%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 4/7/2022
%%BoundingBox: 0 0 1034 400
%%HiResBoundingBox: 0 0 1033.0507 400
%%CropBox: 0 0 1033.0507 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 7266 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD41FFA8FD3D
%FFA8A8FD25FF7DA8FD0BFFA82727A8FD09FF52F827FD0DFFA82EF8A8FD11
%FFA87DFD0CFF7D20A8FD08FFA827F87DFD0DFF52F87DFD13FF27F852FD0B
%FF52F826FD0AFF27207DFD0DFF7DF827A8FD10FFA8F827A8FD0BFFF8207D
%FD08FFA8F84BA1FD0DFFF8207DFD12FFA82020A1FD0BFFA84B76CAFD09FF
%A175A0FD0DFFA8766FCFFD10FF52204BFD0BFFA8764AA8FD09FFA06FCAFD
%0DFF7C4AA8FD13FFA175A8FD0BFFA8A176FD09FF847E757DFD0CFFA8A876
%76A9FD11FF759AFD0CFFA176A8FD08FFA97776A8FD0DFF7D76A8FD12FF7E
%7D4BA8FD09FF842828285253FD07FF53282853287DFD0AFF7E2F28522853
%AFFD0FFF7D7652AFFD0AFF2E2F4C53A8FD06FFA8282F2853A9FD0BFF2E28
%2853A8FD10FF7D2928532EFD08FF84282F2E2F2853A8FD05FF532F285328
%5328FD09FFA95328532853287EFD0EFF532F285353FD09FF7E2F282F28A9
%FD06FF7E2F285328FD0BFF7D2F2E2F28FD10FFA82F282F282F84FD06FFA8
%282E282F282F28A8FD04FF7E282853282F282F53FD08FF7E282F282F282F
%28A9FD0CFF7D28282F28297EFD08FF7E062F28287DFD06FF7D062F282F7E
%FD09FFA82F285328287EFD0FFF842853525328A8FD06FF53532F53285328
%2F7DFD04FF7E29535253282F2853A8FD07FF77532F53282F28537DFD0CFF
%5928532E2F287EFD08FF7D2F2853287EFD06FF522F285352A8FD09FFCA4C
%2F285328A8FD0FFF532F295328287DFD06FFA84C77282F282F287DFD04FF
%7D765253282F282E6FA1FD06FFA89A7553282F282F4C9ACAFD0BFF2F2F29
%53282853FD08FF7E282F535253FD05FFA15228535276A1FD09FFA0762853
%769A7DFFA8FD0DFFA8767D7653287EFD06FFCA9A9A53285328539AFD04FF
%CA999A2853282F529A76CFFD05FFCA75A0522F282F287675A1CFFD0AFFA1
%767D522F28A1FD08FF7D2F52A0767EFD05FFCA4C2F4C9A999AA0A8FD07FF
%C34C2F529A999A759AA8FD0DFFA06F9A4C2859FD07FF769A525328535276
%A8FFFFFFA89A765A537E5A7EA19A6FCAFD04FFA099A17E2F592F537DC34B
%75CAFD09FFCA997576282F6FCAFD07FFA82976759A76FD05FF9A77535A53
%7D76994AA8FD06FF9A775353537D7D9A6FCAFD0DFFA876759A5AA9FD07FF
%CA6FA184857E854BA0FD04FF75A185A87E8585AF764BA8FFFFFFCA9A75FF
%A9A87E857FAFFF5151FD0BFFA79A757D5A7D75FD07FFA9847E7E759A7CFF
%FFFFA84B52A985857E85A1A1CAFD05FF7D4B7DA985857EA9CFCAFD0EFFAF
%5A766F7E7EFD07FFA17576847E857E524AFFFFFFA17575857E855A855AA8
%A8FD05FF7676FFA97E855A857EFFA8FD0DFF779976855320A1FD06FFA95A
%855B7D6F75A8FFFFFF767D5A857E7E5A85FD07FFA84B7E5A857E7E5AFD10
%FFA985769977A8A9FD06FFCA757D85857E857ECAFD04FFA1A87F857E857F
%8585FD09FF85857E857F85AFFD0DFFA97E75767E857DFD07FFA9857F857E
%7DA8FD05FF85857F857E855AFD09FF85857F857E85A9FD0FFFA95A7E767E
%7EA9FD08FF5A857E855A85FD06FFAF7F7E855A857E85A9FD07FFAF855A85
%5A855AA9FD0DFFA95A7D53857EFD08FFA95A857E845AA9FD05FFA95A857E
%7E5A7F84FD08FF855A857E7E5AA9FD0FFF84857F857E8485FD08FF855A85
%7F857EFD07FF5A857E857E857EAFFD08FF5A857F857E8585FD0DFF848485
%857E85A9FD07FFA9857E857E7E7EFD05FF85857E857E7F5A85FD08FF7F85
%7E857E7F7EFD0FFF855A855A845985FD08FF5A5A7E847E7F84FD05FFA85A
%5A7E7D845A8584FD07FFA87E5A857E855A85A9FD0CFF8559845A855AA9FD
%07FFA95A855A845A84FD04FFAF855A857E845A5A5AFD07FFA8855A857E7E
%5A5AA8FD0EFF7E857F857E8485FD07FFAF857EA97E855AAFFD05FFAF5A85
%5AA87E857FA9FD08FF7D857F857E857FFD0DFF7E85A1857F8585FD07FFA9
%857E857E845AFD05FF85857E85A1845A85A9FD07FFA1857F857E855AAFFD
%0DFF7E847E857E845A85FD04FFCAFF84857E855A857E7F84FD05FF845A5A
%7F7E855A8584FD07FF845A5A857E855A8584FD0BFF5A7E5A847E855AA9FF
%FFA8FFCAA97E847E855A845A7EAFFFFFFFAF857E857E845A7E5AAFFD06FF
%A8857E857E845A5A7EFD0BFFAF7E857F857E857E7EA8FFFFFF7DC8C2845A
%857F857E857EA9FD05FFA95A7F5A857F855AA9FD07FF855A7F5A857F857E
%85FD09FFAF5A855A847E857F85A9FFFF84A0C8A17F7E857F857E857EFD05
%FF7E857F857E855A7FA8FD06FFA95A857F855A855A7FA9FD09FFA95A855A
%857E855A7E5AFFFFFFA883C1C87D855A857E855A85A9FD05FF5A7E5A7E7E
%857E7F7EFD07FF5A7E5A5A5A857E855AAFFD07FFA95A5A5A7E7D855A855A
%FFFFFF7EC2C1A15A845A855A7E5A85FD04FFA9855A857E855A7E5AA9FD06
%FF7E855A857E7E5A7E5AA9FD09FFA8857E857F857E855A85FD04FF7DC8C2
%A85B857F857EA9FD07FF855A857EA97F857EA9FD06FFA9855A855AAF8585
%7E85A9FD07FFA87F5A855A857F857FA9FFFFFF84A0C8A17F7E857F857EA9
%FD06FF7E857F857E855A7FA9FD05FFAF857E857FAF7E855A7F7EFD07FFCA
%C2C87D855A855A7E5A7FA8FFFFFFA8A79FCAA9A95A855A7EA8FD06FFAF5A
%7F5A8484857E7F84FD06FF855A7F5A7EAFA95A855A85FD05FFCFC2C27D5B
%5A857E855A85A9FFFFFF84A0A0FFA9855A855AA9FD06FFA97F5A857E855A
%7F5AAFFD05FFA95A855A85FFA95A7F5A7EA9FD06FF7EC8C2C97EA9A8855A
%7F5AFD04FFAF7DC9FFFFA97F5A855AFD07FFA95B5A8584A95A855BA9FD06
%FF5A7F5A7F84FFA9857F855AFD05FF7DC8C2C95AA9A9857F857EFD04FF84
%A0CFFFFF85857E85A9FD06FFAF7F857EA97E5B5A85A9FD05FF7E857F8584
%FFAF7F5A855AA9FD06FFA97DC2A0FFFF855A5B5A85FD04FF84A1C9FFFFA9
%5A5B5A85FD07FFA95A5A5AA9A87D76A8AFFD05FFA9845A5A5AA9FFFF7E85
%5A7EA8FD04FF857CC2A0FFFFA95A855AA9FD04FF59C9FFFFA8855A855AAF
%FD06FF847F5A7F84A8777D7DFD06FFA85A855AA9FFFF7E5A5A7EA8FD07FF
%84A0A7FFFFA8A27DA8AFFD05FFA8FD04FFA87DA8A9FD08FFC29AA7FFCFC1
%C8C2CFFD06FFC8C2A0A9FFFFFFAF7EA1C2C9A7C9A1FFFF84A0C9FFFFA8A8
%A1A8FD05FFAFCAFFFFFFA8A17DA9FD08FFA1A1A1FFC9C1C1C8A8FD05FFC8
%C8A1A9FD04FF7EA1C2C9A1C9A1AFFFFFFF84A1C9FFFFCAC1C8A0A8FD0AFF
%C2C2C1C9FD07FFCFC1C19FA8CAC8C1C8A0C9CAFFFFFFA8C8C1C2A1FD04FF
%CAC1C8C1C27C84A8FF847DC8FFFFCAC1C8A0A8FD09FFC9C1C8A0CAFD06FF
%C9C8C1C2A8CA9FC29FC2C2CAFFFFA8C2C1C2A1FD04FFCAC1C8C2A07D84A8
%FD04FF7DC9FFFFC9C8C2C8A0C9CAFD07FFCFC8C2C8A0C9C9FD05FFA8A0A0
%C29FC97DA77DA7A0A7A8FFFFAF59A7C2C8C9FFFFFFCFC8C2A77EAFFD04FF
%84C9CFFFC9C8C2C8A0C9CAFD07FFC9C8C2C8A0C9CAFD04FFAE7CC9C2C8C2
%A77D837D7D7DFFFFAF5AA7C2C8C9FD04FFC9A0A784AFFD06FFA8A7FFFFA8
%7D837DA77C7DA8FD07FF7D847D837D7DA8FD04FFAF7E84597D7C7D84AF84
%A984FD04FFAF5A847D7D7DFFFFFFA78484FD06FFAF7DFFFFA859837D837D
%83A8FD06FFA87D847D837DA7FD04FFA8845A847DA17DAFA9AFA9AFFD04FF
%607E7D7D7DFFFFFFA88484FD0EFFAFFFAFAFA8FD09FFAFFFAFFFA9FD09FF
%A8AFA8FD0BFFAFFFAFFD13FFAFFFAFFFAFFD09FFAFFFAFFFAFFD07FFAFAF
%A8AFFD0AFFAFFFAFFDFCFFFDFCFFFDFCFFFD97FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-04-07T14:43:28+03:00"
   xmp:ModifyDate="2022-04-07T14:43:28+03:00"
   xmp:MetadataDate="2022-04-07T14:43:28+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:2d2e27d5-1965-ea4d-bb1f-e947e0a0b4a4"
   xmpMM:InstanceID="xmp.iid:2d2e27d5-1965-ea4d-bb1f-e947e0a0b4a4"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2204.w037.n003.294B.p1.294</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="100"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAZAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWL&#xA;6x+aHkDR/MVr5b1HXLaHXbuRIYdPBaSUSSBTGkgjD+kXEilBJx5V2rirKMVdiqH1G/tdO0+51C7f&#xA;07Wziee4koTxjiUu5oN9lGKsM/Lb85fKv5h3epweX4L0R6YV9S6uYRHFIrkhTGQzHfi2zAHbpimm&#xA;d4odirzHyP8An75Z85+dbryvo+nX7fVlcnUnWIW9Yah+VJCwFeIQivKvQDfBaeE1b07Ch2KuxV52&#xA;Pz08mP8AmOvkC2ivbrWBI0E80UFbeKZdyjuWDUAqSwXj742mnomKHYq7FXYqxsfmT5DPmdfK667a&#xA;Pr7FkGnpIHcSIaNGStVEi90J5d6YqyTFXYqlPmvzVoXlTQLrX9duPqml2fD15wjyEGWRYkASNXY8&#xA;ncDYfPbFUu/Lz8xPL/n3QTrWhrcJapKbeRLqL0pFkVVcjYsrDjIp5KxG/XFJFMnxQxz8wPPmi+Rf&#xA;LNx5i1lZXsoHSMx24VpWeVuKhQ7Rr89+mKoX8sfzEsvP/lka7aWFzpyCUwNBdhallRHLxlSeUZ9S&#xA;gYhT12wA2kxI5stwodiqS+c/N+jeT/Ld55i1p3TTbEJ6xjXm9ZZFiQKtRWruBiqVflh+ZelfmHoE&#xA;mtaZZXdlbxTm3ZLxUVmcIslU4O9V4yLvtgBSRTL8KHYq7FVG8vLWytJru7lWC1gQyTTOaKqqKkk4&#xA;QL2CvmLV7/8ALS+/N+DzpbTXH7y9tZ7+4ukJK/VeHA261LFGMSV5UKgbClBk56PLxCuTdiz4hjN/&#xA;U+owQwBBqDuCOhGVtLsVeV/mP+c3k/The+XTZHXjLHJbajbq4jtwsilJImlo5LUNDxXbxrmVj0sp&#xA;Czs1yygFiH5B+ZvLOn+ZLnR7a1e0bVlRLIVBjT0A7iJiSSxIZvj7nqKnKjopYwZE25OXVxyUAKp9&#xA;B5U1MB/Mf83dI8myJZLAdQ1aRef1VX9NY0P2WkejUr2UCvy2zIw6cz35Brnkp4x5G/MLQND86LrB&#xA;0hLO0uS8UkFuSI7ZJmBd4ga1G1StPl0Aw/ydUjIFvnruLGIU+pFZWUMpBUioI3BBzGYN4qxT8w/z&#xA;E0ryVpsVzdRtdXd0xW0skYKX4irMzEHiq1FTQ9emXYcJmWE50+ftM89eV4PzBh83HRPqTPcvc30N&#xA;s/NnlmUrJMHbjueRYpxoTXccicnLs6XHYOzdHWxGLhr1PqayvLW9s4Ly0kE1rcxrLBKvRkcclYV8&#xA;QcxyKNMFbArsVQmravpukadPqOpTrbWVuvKWZ+gHQCg3JJ2AG5yUYkmggmnzX5XuPy6sfzmPm2zu&#xA;5YoL28ubiW7vAxkEt2rpwAqwWGsrUbqB16YnSZRPycgZsXhf0n0/kWh2KvKvz780eU4NDHljWtPO&#xA;qSakqziAMEWFY3+CYsQa/GuyjqAQSMux6c5AaNIGUQkLFqX/ADjxrGhvoN9olipjurac3Uy8QiMs&#xA;oCKY1HQKIwpH9cr/AC0sURxdW7Nnjkl6eT1rItTyT8+fO+lafZReWbnTU1CW/jW5ZpSQsCq5EciU&#xA;3L8kam4G29QSMvxabxIndAzeHIFV/wCcfPMWm3ugX2kW0BhmsJvXkYn+9W5JIem/EgpQivv3oIS0&#xA;pxAC7bMuo8WRIFPVsrYOxV5b+eXnXyxYaK/lrUrIarc6igc2vMxiFVasczMvxcg61VR1pvt1vxaY&#xA;5AegR4vAQUN/zjzruk3Gi6lpNpC0Nxb3H1uUsRSQTjiCq78eIiCkVPtToKzpTiAs225tSMsrAp63&#xA;kGt2KuxV5p+f8mpt5JS0skcx3V1GLx1BKiJAWAYjpWQJSuZOlMRK5ECu9jKEpbRFl813llJarH6g&#xA;IZwa+Gx7bDNjDLGd8JB9zTkwyhXECPe+xPJF0bryZoVwx5PLp9qznf7Xory6++ajKKkfe3R5K3mu&#xA;21G58tanBps5t76S3kEEqirA8ei9KMw2B7dcEZCJsi2Qje3J8e6lpgs05sxfmaIfA9TXxzZafVwz&#xA;fSx1Ojnh+rqifJd5LY+bNJvYgC1tdRzFWbgCqMGZS1G4gqCK0OWaicYwJkaDTgxynMCPN9nZp3If&#xA;Jf5iaXdp5s1q81Cf15hdSGUioB+KiKtakKBQDrtmfp9ZjkfDFiScuinGPiGjFhiirAeJpmcTTggW&#xA;+pfyZ8wC78ujSLi4aW902iRrIRy+r0Aj47AkJ9netNvYZoPzEcsiQKdtn0hwgb2HoWScZ81/nNw1&#xA;jzjqE4ldo9PQQKCQQghWsgUf6/L6cv0mtAn4fD15hyMugPheJfTk8tkMZc+mCqfsgmp+nNsHVGuj&#xA;6L/InzFbQ6S3l+7uiJkIlsVlccSjgco469w3xcffbvmiy6qOTIRVV9rtp6KWPGJc75+T1vFxnYq8&#xA;i/5yMOpTaHpNlbKxtZbh5LhwDx5RoBGrEePNiB7ZlaWcIkmRA97GWOU9ogl893ds1tIsbAhioJB8&#xA;fbNjCYkLBB9zj5MZgaIIPm+vfy31O41LyPo9zcAeuLdYZDy5FmgJi5k+LcOVPfNPkMTI8JsOWYSj&#xA;tLmyTIIfNv8AzkJb3Nx+YMEagn/cfDwr04+rL0+mubPSECBJ23aMkTKVDcqv5EJNp/5hejx4pd6f&#xA;KjAdKoyOTv7p+OU5s0MkDwm6LdLBPHIcQqw+jcwkvlT839Tk1r8wr/1JQq2p+p24b7ISF2U0Pu1W&#xA;+nM/Qy9BJ5WUanHUogc+Efayb8lb7TvL3mKZtRulghvLX0BI9FQSK6snJuijjyFTmFm18JnhHLvc&#xA;z+TckY8XM9z6Atbq1u4FuLWZLiB68JYmDoaGhoykg75EFxSCOarih8k/mJy1Xz1qNwspJmnenMks&#xA;EV2RKV7BVAp2zO0eoBxky2ESWWp0pE4xjuZAMs/KDVNK8r+Y7y71K4MNreWxiJVGZRIHVgSqAmlA&#xA;ei5g5e0YT2qgOTlnsucRYNnqHvmja7pGtWZvNKu47y2DmNpIzXi605KwNCGFehwRkDuHEnAxNFHY&#xA;WLsVS3zNZWl75f1C3u05wNBIWHcFVLKR7giowxgJkRPIpGQw9Q5h82ajomnfpWKxvmMkDSIqspKs&#xA;DIeKCtOtWGDDA6fU8F2D+l2OfINTpTMiiP0PojyN9XTyrp9vbjjHaR/VgtSaeiSnU+IFctzbyvv3&#xA;+bqocq7k9ypm+d9Y0PT288ahp13pzpaM00sMEykcUDAB1YU2PL4fb5YOzoy8aXCOnVz+0MkTp48R&#xA;s2OShqPkvTY7C6fRrMJqhjb6oebH95T4R8ZZRXp0zda3Bx4iB+KdLotSceUSP4t7j5Fk16Tynpx1&#xA;+3Nrqoi4XEDEMy8CVXkVJFeIHQ5o8d1u7DOYmRMeTy/zJoeo/wCNtWu77SmGnSBpfVcK8IQukaOW&#xA;+Jau3Reo+jDoYH8yDXf9zkazNH8pwg77fepppemRuHis4Y2HRljQEfSBnSRjtvu85KW+2ydeVPIh&#xA;vfNlt5ns9SFhbWQVZtIgiAWSSlGZn5bK4psop1FKZz+p0Yx5LHJ3mLXyyYuGW5erTCVonETBJSpE&#xA;bsOQDU2JWorQ9q5EtQeTaP5I1LT7LzPqHme2hna5AigeQrN6vOXlLKUoVUM/ArXfrsO40GEjKCeb&#xA;ldo6qMsfDHkGON5V8tlg36NgFOg4Cn0jpnRwhQ33Lz8p2dmT6n+Vtj5vstBvtMvF0F7Fj9ea0gTn&#xA;KYxxSm4VT1qaGtc5/V6YDIXd6XWyGMDm9XAoAPD/AD75FpdiqUebdI0/VfL95a3y1hWNpVcfaRow&#xA;WDr7jAcYn6e9njzHEeIdHzePL+lXetJY6gS7AukTRtx5MqlyDt4Kct7OvHmliO4/U5fadZMEcw2P&#xA;63qv5OzeZbbUdY0m50+SLQIn9fTb5x8EhbiCqNvXuGHbjXvlU8Rx5JR6W0zzRy44y/i5fj4vUsLj&#xA;vLvzP0LR7/zHb3V3bepcx2iIkvJ1IUSSED4SP5jmy0mLjx0eV7uLlymE7HPowq0sdc0bX7O68uBJ&#xA;b92Mdqk4BTk/w8HJK/C1aVqD75rdRop4Znw7Ma3/AB8HcYddjz46y0JDk+gJBcy2bBD9XuXjIVjR&#xA;/TcrsfBuJxcLq8GtvJWoaa91D5sjs9S1aW4kl+trEjBomNEbcfCW4lqe+bLs3ERDystHaGcSkK/m&#xA;hdcaTo/qRwPbJBBSheBQrKDtyAFAePWnfJZdFDMJWAJXzHz+KMPaGTCY0SY9x/Gz2HyZ5Z07y7ok&#xA;dnYyGVJT9Ylm7SSSKOTqB0DUzUQx8ApzM2bxJcSYazFqc2k3kWlTpbak8LrZ3Eq80SUqeDMvcA5I&#xA;tcavd4Rp/k67s7T0PNdnbT60ztJO3FZOIduSKrbn7NO/z3zZ9m4DHH5Wf1NPaOp48m3QV+lO/L2j&#xA;+XZNah067sYja3SmEmlGDOPhKEbqeQptg1GlhOEjwiwegr8bbscOtyQlECUq8zb1Xy95d0zQNOSx&#xA;0+Pig3klahkkb+ZyAKnNXCAiKDmZs0skrKZ5NqdiqU+arlINCuwzBXlT041JFWLbUA77Zdp/rBPI&#xA;NeX6SBzeUPbwSSJI8avJGaxsQCVJ8M3k4x+ojk66M5Vwg7Fnv5aXDPpt7F1VLksp/wBdR/zTmo1U&#xA;KEf6oc7DKzL+szDMRvYD+ZcqPcacIGV5Y/V9ZVIqB8HHl/w1K5tOzo1xE+X6XC1Z5BitKUIP3ZnQ&#xA;nxEiiK73GlCq3Bev6Xcm5021uG+1LEjt8yoJ/HNBljwyI83aQNgFIPzHmEflp0/39NGg+gl/+Ncy&#xA;dALyfBo1R9Dzi0m9RCrH4k6HxGbKjCVD6T9ne4tiUbPMfay38v7hk1iSGvwTQmq+6kEH7q5Tr43C&#xA;+4tmlPqehZp3PY3+YM3DyzNHUAzyRxrUgbhufU/6mZOlkIzs3t3An7mnPEmND76+95tBJ6kQbv0P&#xA;zzeusDOvy7vardWLHoRMg+fwt/xrmr7Qhyl8HN0kuYZnmtcx2KpL5xu0tvLl7VgrzRmKNSd2L/CQ&#xA;B32Jy/Tj1gnkGvN9Jp5VFDA/p3JjX1gvASUHIDod+u9M22OjM2PUOtdOfP4uDMy4BR9J6X15cvg9&#xA;G/L2dn0ueE7iKaq/JlG33jMHtCPrB8nI0p9LKcwHKed+f5FfW4wprwgVTTx5uf45uNAPR8XX6r6v&#xA;gxZ5zBdWk4NDFIHB91KnMjhBlIf0R/vmqyIj3n9D23Ofdq8087vy8wzDb4EjH/Cg/wAc3eiH7sOu&#xA;1P1sWvkPJW2pxp1Fep7ZZjyR45R3u+49w68mGSB4Qen7S9T8hXTz+WLXmatEXiqfBWPH7gaZqtbG&#xA;shc3TG4BkOYre8u83SCTzDeODUBlTr3RFU/iM3WjkOAR3seR+/kXXaiJ4r/Sx24mkhu4Zozxkj4u&#xA;h8GViRl8ADxDz/QGqZrh936S9tsrqO7s4LqP7E8ayL8mFc0E48JI7naxNi1bIpQmqX6WNlLOSnqK&#xA;pMSO3HmwFQoyJyQiRxnhDKOOUvpFl5ZqWq3upXH1i6k5t+wo2VR4KO2dHixRgKDqJzJO6XTXKx7L&#xA;u/h4ZOcOIEd7GMuE29K/L7TjZ+XY5HFJLtjOa9eJ+FP+FWv05ptbk4snuc/TRqHvSLVtW1Jdbv0S&#xA;8lWNZuEaLIwUURfhABpnOdr5ZxlARJHpvb+sXc9lQjITMgD6q3/qhjB9Uf34Kyj+8DChDd6j553O&#xA;E3AHyDzOUATIHei9J0u71W5NvZgOyisjEgKq1pU45csYCyiEDI0Hq2n2n1Sxt7Xly9GNULeJUUrm&#xA;hyT4pE97tIRoAMM/NO6pBYWoP2meVh/qgKv/ABI5sOzo7kuJrDsAwnT4SYZpuyMif8GGP/GmbGXM&#xA;OJHkynyL/wAd9P8AjG/6sxdd/dt+m+t6Rmldi89/NK/rNZaep2RWnkHux4p+ps2vZ0NjJwdZLkGJ&#xA;aXa3M0dzLGtYrdVeVvDkwUfrzPlMAgd7ixiTac+WtQ+o61bTE0jZvTl8OL7Gvy65VqcfFAhswy4Z&#xA;AvVs0DtEFrGpJp2nzXJKeoiM0UbtwDsBWlcBnCJHGeEFkISlfCLLxzVta1DVrr6zeSl2/wB1oNkQ&#xA;eCjtnR48MYCg6aeSUjZVkUKiqP2QB9Pf8cGIGrPM7/j4MshF0Oj0vyTYG10RJHFHumMp/wBU7L+A&#xA;r9OanW5OKfuc7TxqPvYTNq+ry2k0Qu55JphOkUXqMxcjl8IWu+3bOe1GTINaBEnhBh7uUXcaOEJa&#xA;S5VZ49+vOSTWv9wv0/rOdxAUZeZ/QHmJGwPd+ko2w0O+1e8ght4maIP+/l6IikipLfLtlOTMIEk9&#xA;wr7WccZkBXef0PYc0bs3lfmmX1fMF63hJw/4ABf4ZvtKKxh1eY3MpBqIAeLxMdT/AME2Xx6tUnpP&#xA;5a8v8OGtaevJxr4UXpmn1/8AefB2Gl+hk88yQQSTOaJErOx9lFTmHEWacgmhbx24nee4lnk3eV2d&#xA;j7sanOjjGhTqCbNoPV7O5tLsRzqVZo45E/1XUMP14McgQSO9ZgjYvRfy31P6zobWjNWSycqB39N/&#xA;iX8eQzVa/HU773P0s7jXcyzMFyWCec7Ka21hLsszW16oXckhJYxSg8Ay7/Oua/tTTieLjH1Q/wBy&#xA;f1H73K7PznHm4SfTk+yQ/WPudpvlm1/w7Jqoid7ySCSSC3lKhI2PLi1Omw3oTmy0OqnDDGM5bR5n&#xA;y/scbWYIyyyMRuenn/aw3SNEu9Q1CG24GNZHUSO/w0UncjlSpp2GbGPbGmntCdy7t3Dl2ZnhvKND&#xA;4Pa4o44o0ijXjGgCoo6AAUAzWk3u5YDGNK8uSNr97f39uPSW5ea05EGrdFeg8BuK98x54ycwn0EK&#xA;+Nks8U+HFKPWU7+FAJL+Z1ldyX9nNHGXiMRQUI+0GJO1fAjNjh7Qw6eNZDVnuceeiy5j6BdIz8s9&#xA;Mmtoby5mCgzemqKGBYBeVeQB27dcdRrcecA4zYRj0s8JImKLN8xW55v+aNtcnUbOdB6qPEUESkBl&#xA;4tUseRUb8u3hl0O1cOmHDkvdA7NyagkwrbvQVro8qeUHulaM3E10nFOVQAqH4ZCvLiRyO2Op7bhG&#xA;IywHFHl3fjkuDsqRmcczwlM/IotLfUx9cuFjv5EdYYQPgZar9lzT4vamY+PtgaqJjw8NN2XszwDY&#xA;Nh6Fkmp5V57s7iXzHcSxN6ycUDdFCFVA47nenWuWYu3MGE+HIGx3brLsnLlHGCN+9k/kjy8IvLs4&#xA;ulHLUqklWVgYitEIKkjuWGZOp1IlMGPIOPhwGMSJcywu9sL2zvvqc1vIHru5UhOHIrzBagI+E0pk&#xA;9Z2xhwAWbkegTpezMublsB1Z9a+dtHjtAJmmDwhUdpIwpcjYsN6dq9e+aSOvhM+kEk9BuXYT0csY&#xA;uRAiOp2CReZ1k+vRagkzT6dqKhrZ2rRGpum/QEbgfPKe1dJx4+MD1Q5+7v8Agfs9yezdXwZOEn0Z&#xA;Pp9/d8Ry83aV5MsV0F9WkiLXbwvJHbOR6UbfFv0XlxG4rtm10eulHDESl6R/F5f2OLq9MJZZGI9R&#xA;6ef9qSaTpkt9fQ25/dq7KHZyFopIBpyIqfYZmx7Z009oSuXdR/U40+zM8N5Roe8PWo40jjWNBxRA&#xA;FVR2AFAM15NuSAxryh5flszLd3sAS55OsHIgsqM5LHbpy2zH8L99Kffw18I0WePIRhjDuMr+MiQx&#xA;zztBMvmCVvT+CRUZCu+wUA1p/lA5s8famnwxEJyqXuLjns/NlJlAWPeGVeR7Q2+iVanKWVnPEhqb&#xA;BaVUn+XK9RqI5SJQNxpOLDLGOGQosgzHbHk2s2l2Nbuo3QEtMxaUMoQczy3JIO1d9szB23poEQJN&#xA;jbk1fyVmkOMAUd+al5o0SW0ubQK6s0trE7iuwNCpoy8g261rmJq/aGOnnw8HFe93XX3ORpexTnjx&#xA;cXD05X+lmf5fXdgukGxjn5XEMhMsbrwPx9OIJPIe4yH5+Gp9Y2vpaZaKWD0nfzTbzUf9wF2Ofpll&#xA;CqaVqSR8PUfa6YTqY4P3kuQYxwSyngjzLzvQ9Jn1DU4bYoFFQ8yl05ekGAdgK1NK0zPwds4c0TwX&#xA;fmHGz9mZMRHFRHkyT8x9AmuraHUbSIyS2ysk6oKn0gC9af5ND9+Ok1UcYPEajzY58BmRw8+SQeS7&#xA;86LcS3d3HMVmQRi3iCMx3BDNVlAp/HNbqu3cGU8IBofxfsc/D2PlgLJF9zPtN8z6XqF69nbsxmVe&#xA;QquxA69K0+nBhy+IOIAiPeevuYZIiEuHiBl3Dp71fXdKTVNMltCQsho0Eh/ZkXdT/A+2XRI67jr7&#xA;mnJGxtsenkei2PTp49BOn+oGnNu0QkavHkykfPiCfuzHhgAx+HZqqciWYmfHtxc/K2JSeRtfcAM1&#xA;m3EhlPOUEMpqCPg2IzGh2ViibjOYPw/Y2y7SznYxgR7z+osn8vp5ijEqasY2UAei6tyb3B2GZmPG&#xA;Yj6jL3gD7i40shkfpEfcSf0JvliEg80aFqOpvbNZyQqIg4cTFh9qlKcQfDMbUaPHmrjJ27m7Fqsm&#xA;L6BHfvv9CTWnlXzTYTyXNnJapM68XKO4LgdK8o6H6chj0EYCo5Jj4D9aZ67JM+qED8T+pmlsZzbR&#xA;G4AFwUX1gu6h6fFT2rmY0Mf80+U7nWbiO4gvRbvFHwELx80Y1JrUEEdcx82kxZfrF/Gv2fY2Y9Rm&#xA;x/3cq8iLH6/tYyPI/m23EkUH1bhKyvI0chUMy1oSGTqKnKsfZ+OO3FKUf5shY+yUWWXXZpj6Yxl/&#xA;OiaP2xknaeQW9JG/SMsc1AXHFHAam4BovfLTo9Of8mPnL/imA1GoH+Ul8on/AHrI9IsJrCyW2luW&#xA;uihPGRlCmh7beGXRgIioih+O9iZSO8jZ/Hcx/WvJUs1y93pk4SSZy81vOWMZLGrMrAMy79qZDPps&#xA;WYesb/zhz/auLNlwm8Z2/my5fDqET5d0rzJprxW88lqdNXlWKMuWWtSOFUX9rrvji04xjacpe8D7&#xA;1nnnM+qMY+4n9Sv5m0GfU0he1aOO5Q8WeStPTO/YGpB6ZTqNFjzSBle3d1bsWryYokQrfv6LNK8m&#xA;aXZss1zW+uh0kmA4Kf8AIj+yPpqcyscY448MBwjy/SeZcWUTOXFkPHLz6e4cgmWs6XDqmnS2cvw8&#xA;xWOTujjdWHyOSiaK5IcQpQtdLu4fLrac0ivdGCSPma8Obg07V4iuUR08RAw34d/fRbzmmZCe3Ht7&#xA;rDFZPIuvOBzezcqQy1aQUI6EfAaHMaHZeKJuMpx+X7G6XaWcijGB+f7WVaFb69Aky6tNFNUqYWiL&#xA;MR15BuSp7UzMhjEBXFKXvr9DinJKR3jGPuv9KaZNWMeYvLWqahqH1m0lgVCiqVl5g1Ff5Qcw83Z+&#xA;LLLikZX5V+pyMety448MOGvO0HpnljzTpsjPaT2cYdg8qKZAHINfi+DfJQ0cYfTOfxosJ6vJP6o4&#xA;/tDM8ympiGreSr+4ubi4t7yOQXDs5gnQhQHJPHktajen2cxcmgwTNkGMu8H9d/obYavUQ2EhKPdI&#xA;fpFfpS+LyPq9xPbw33GK0iHDnby0ZU3aihkIpybwyMNBjErkTk8pR/TdpnrMshQHh+cZH7uGkyX8&#xA;ttJVgy318GBqCJItj/yKy/8ALYP9Tj9v62rxM3+qz+z9Sfaro1rqdiLS5Z6IQySq1HDqCA3gep6j&#xA;LRXIgEebCUb6kHvGzFYvJnmK1vEntri1eSAn6vcPzSQAihqAjgVHXfMUdn4hLihKcPIbj7f0t/53&#xA;Pw8MhCfmbB+z9DMLFL02KJqJje5IIm9KpjIJNKVC/s9dsyTEVV21RkeZ2PkxuPyGJLqRru6Is+Z9&#xA;GCHZinbm5/ED78xtPosOLcRuXed69w5fO23UanNl2Mqj3R2v3nn8qZLY6dY2EIhs4Egj7hRufdj1&#xA;J+eZcpEmy0QgIigKRGBk7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FX//2Q=="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:10ae21cc-98f8-494f-96cc-15e8f4bec15a"
    stRef:documentID="xmp.did:10ae21cc-98f8-494f-96cc-15e8f4bec15a"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:10ae21cc-98f8-494f-96cc-15e8f4bec15a"
      stEvt:when="2022-04-07T14:43:26+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:2d2e27d5-1965-ea4d-bb1f-e947e0a0b4a4"
      stEvt:when="2022-04-07T14:43:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1033.050700"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
1033.05 400 li
1033.05 0 li
cp
clp
1033.05 400 mo
-7.36263e-06 400 li
-7.36263e-06 0 li
1033.05 0 li
1033.05 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
916.771 202.649 mo
936.323 169.51 li
918.977 159.667 li
918.977 159.667 906.429 169.083 906.223 196.033 cv
906.137 207.252 916.771 202.649 916.771 202.649 cv
cp
.698039 .403922 .337255 rgb
f
916.5 158.807 mo
910.702 168.333 li
916.5 172.671 li
916.5 158.807 li
cp
.25098 .313726 .498039 rgb
f
917.824 205.167 mo
917.824 205.167 917.078 213.628 915.206 214.805 cv
913.335 215.981 910.702 215.112 910.702 215.112 cv
910.702 215.112 908.65 219.337 906.827 218.428 cv
905.004 217.519 905.711 214.71 905.185 214.359 cv
904.659 214.01 898.541 210.513 898.065 208.508 cv
897.591 206.502 906.032 195.341 909.128 194.94 cv
912.225 194.539 917.745 197.073 917.824 205.167 cv
cp
.698039 .403922 .337255 rgb
f
910.703 215.436 mo
910.636 215.436 910.568 215.415 910.511 215.372 cv
910.064 215.042 906.147 212.087 906.106 210.194 cv
906.098 209.787 906.243 209.424 906.54 209.115 cv
907.24 208.389 908.668 208.143 909.511 208.059 cv
909.071 207.477 908.477 206.457 908.585 205.301 cv
908.683 204.267 909.315 203.358 910.466 202.601 cv
910.613 202.503 910.814 202.543 910.914 202.693 cv
911.012 202.843 910.971 203.043 910.821 203.142 cv
909.843 203.785 909.308 204.532 909.229 205.361 cv
909.093 206.82 910.391 208.095 910.403 208.107 cv
910.498 208.198 910.527 208.337 910.479 208.459 cv
910.432 208.58 910.314 208.661 910.184 208.663 cv
909.531 208.674 907.688 208.856 907.006 209.564 cv
906.831 209.747 906.748 209.948 906.753 210.181 cv
906.782 211.517 909.753 214.006 910.896 214.853 cv
911.039 214.959 911.069 215.161 910.963 215.305 cv
910.899 215.391 910.802 215.436 910.703 215.436 cv
cp
0 0 0 rgb
f
905.185 214.683 mo
905.006 214.683 904.861 214.538 904.861 214.359 cv
904.861 213.732 904.908 208.192 906.608 206.933 cv
908.095 205.831 909.763 207.246 910.438 208.146 cv
910.545 208.289 910.516 208.491 910.373 208.599 cv
910.229 208.704 910.026 208.675 909.92 208.534 cv
909.904 208.514 908.336 206.457 906.993 207.452 cv
905.774 208.355 905.508 212.744 905.508 214.359 cv
905.508 214.538 905.363 214.683 905.185 214.683 cv
cp
f
901.014 211.949 mo
900.794 211.923 900.669 211.76 900.693 211.583 cv
900.816 210.661 901.502 206.028 902.879 205.349 cv
904.419 204.59 906.107 207.904 906.295 208.284 cv
906.374 208.445 906.309 208.639 906.148 208.718 cv
905.984 208.795 905.794 208.729 905.715 208.571 cv
905.21 207.548 903.921 205.56 903.165 205.929 cv
902.336 206.338 901.603 209.667 901.334 211.669 cv
901.313 211.831 901.174 211.949 901.014 211.949 cv
cp
f
902.065 207.42 mo
901.898 207.42 901.758 207.292 901.743 207.124 cv
901.707 206.703 901.478 205.54 900.852 205.219 cv
900.529 205.054 900.104 205.127 899.588 205.434 cv
899.436 205.524 899.236 205.476 899.145 205.322 cv
899.053 205.169 899.103 204.971 899.256 204.879 cv
899.978 204.447 900.614 204.371 901.148 204.644 cv
902.222 205.196 902.382 206.994 902.388 207.07 cv
902.402 207.248 902.271 207.404 902.093 207.419 cv
902.083 207.42 902.074 207.42 902.065 207.42 cv
cp
f
962.988 312.958 mo
972.562 327.765 li
984.899 315.438 li
980.145 301.79 li
962.988 312.958 li
cp
.698039 .403922 .337255 rgb
f
928.864 182.21 mo
910.055 171.351 li
908.816 170.636 908.393 169.052 909.107 167.814 cv
909.822 166.576 911.405 166.151 912.644 166.867 cv
931.453 177.726 li
932.691 178.441 933.116 180.024 932.401 181.263 cv
931.686 182.501 930.103 182.925 928.864 182.21 cv
cp
.360784 .411765 .647059 rgb
f
989.54 304.198 mo
958.87 316.868 li
928.45 241.349 li
932.551 189.958 li
950.9 185.679 li
950.9 185.679 951.631 187.818 952.831 191.409 cv
953.9 194.619 955.351 198.979 956.99 204.019 cv
960.44 214.658 964.721 228.238 968.051 240.118 cv
973.331 258.979 989.54 304.198 989.54 304.198 cv
cp
.498039 .647059 .866667 rgb
f
904.35 302.652 mo
897.654 320.59 li
916.405 320.986 li
922.962 308.106 li
904.35 302.652 li
cp
.698039 .403922 .337255 rgb
f
919.795 188.902 mo
919.795 188.902 915.287 204.469 914.12 215.376 cv
912.953 226.282 911.782 248.711 910.783 252.98 cv
909.784 257.249 895.641 305.686 895.641 305.686 cv
895.641 305.686 903.552 308.439 912.162 311.139 cv
919.972 313.587 928.792 314.777 928.792 314.777 cv
928.792 314.777 944.822 270.678 946.776 254.724 cv
948.73 238.77 939.794 192.427 939.794 192.427 cv
919.795 188.902 li
cp
.572549 .705882 .917647 rgb
f
921.094 207.411 mo
920.454 207.411 919.766 207.333 919.03 207.177 cv
918.855 207.14 918.744 206.968 918.781 206.793 cv
918.818 206.617 918.994 206.508 919.165 206.544 cv
921.329 207.003 923.025 206.741 924.208 205.763 cv
926.115 204.185 926.074 201.228 926.074 201.197 cv
926.07 201.02 926.212 200.871 926.391 200.867 cv
926.585 200.866 926.716 201.005 926.721 201.183 cv
926.724 201.316 926.771 204.478 924.624 206.259 cv
923.698 207.026 922.516 207.411 921.094 207.411 cv
cp
.968627 .701961 .411765 rgb
f
957.364 205.56 mo
938.156 209.611 li
937.456 194.171 li
952.828 191.811 li
953.898 195.021 955.725 200.52 957.364 205.56 cv
cp
.572549 .705882 .917647 rgb
f
912.035 252.035 mo
915.086 252.877 919.351 253.67 920.271 252.785 cv
920.372 252.689 920.493 252.518 920.393 252.132 cv
920.295 251.757 920.063 251.479 919.685 251.279 cv
917.941 250.365 913.901 251.451 912.035 252.035 cv
cp
918.5 253.813 mo
915.689 253.813 911.473 252.556 910.853 252.366 cv
910.72 252.325 910.628 252.204 910.624 252.065 cv
910.62 251.927 910.706 251.801 910.836 251.753 cv
911.104 251.654 917.433 249.372 919.985 250.706 cv
920.526 250.99 920.875 251.415 921.02 251.969 cv
921.19 252.628 920.951 253.03 920.72 253.252 cv
920.295 253.659 919.483 253.813 918.5 253.813 cv
cp
.968627 .701961 .411765 rgb
f
943.621 342.13 mo
942.32 343.14 916.341 343.49 913.971 342.26 cv
911.601 341.03 892.641 329.74 892.211 328.53 cv
892.061 328.13 892.681 326.16 893.591 323.73 cv
895.421 318.87 898.44 312.17 898.99 312.34 cv
899.82 312.61 920.061 313.97 920.971 314.68 cv
921.871 315.38 929.24 329.04 929.24 329.04 cv
929.24 329.04 939.021 330.64 941.971 334.06 cv
942.951 335.2 943.61 336.26 944.021 337.22 cv
945.07 339.64 944.541 341.41 943.621 342.13 cv
cp
f
945.793 262.796 mo
945.774 262.796 945.756 262.795 945.736 262.791 cv
945.561 262.76 945.443 262.592 945.475 262.416 cv
949.548 239.532 941.933 209.31 941.855 209.007 cv
941.812 208.836 941.913 208.661 942.083 208.615 cv
949.65 206.54 li
949.825 206.491 950.001 206.594 950.048 206.766 cv
950.096 206.938 949.994 207.116 949.822 207.163 cv
942.559 209.155 li
943.355 212.423 949.986 240.758 946.111 262.529 cv
946.084 262.687 945.947 262.796 945.793 262.796 cv
cp
f
916.479 196.474 mo
916.479 196.474 942.634 200.521 954.197 196.663 cv
954.197 196.663 957.952 155.556 948.204 146.921 cv
943.164 142.457 933.448 144.134 933.448 144.134 cv
917.759 170.258 li
916.479 196.474 li
cp
.25098 .313726 .498039 rgb
f
967.31 186.4 mo
967.31 186.4 975.798 186.704 977.071 188.512 cv
978.344 190.319 979.203 192.825 979.203 192.825 cv
979.203 192.825 983.043 194.913 982.23 196.781 cv
981.418 198.648 977.471 197.999 977.149 198.542 cv
976.827 199.086 973.654 205.378 971.676 205.957 cv
969.698 206.535 958.112 198.688 957.55 195.617 cv
956.988 192.546 959.231 186.9 967.31 186.4 cv
cp
.698039 .403922 .337255 rgb
f
978.971 192.771 mo
978.929 192.771 978.887 192.763 978.847 192.746 cv
972.362 190.051 li
972.197 189.982 972.119 189.793 972.188 189.628 cv
972.256 189.462 972.449 189.386 972.61 189.453 cv
979.095 192.148 li
979.26 192.217 979.338 192.406 979.27 192.571 cv
979.218 192.696 979.098 192.771 978.971 192.771 cv
cp
0 0 0 rgb
f
964.196 187.708 mo
931.493 167.434 li
921.272 184.561 li
921.272 184.561 930.412 197.312 957.351 198.108 cv
968.564 198.439 964.196 187.708 964.196 187.708 cv
cp
.698039 .403922 .337255 rgb
f
923.184 189.979 mo
943.097 173.539 li
933.452 144.13 li
933.452 144.13 916.412 148.44 915.422 164.27 cv
914.901 172.75 918.975 184.833 923.184 189.979 cv
cp
.25098 .313726 .498039 rgb
f
936.694 164.938 mo
936.545 164.938 936.398 164.971 936.254 165.038 cv
935.966 165.172 935.918 165.323 935.909 165.44 cv
935.832 166.477 938.473 168.709 940.594 170.213 cv
939.887 168.435 938.528 165.627 937.169 165.043 cv
937.006 164.973 936.848 164.938 936.694 164.938 cv
cp
941.251 171.38 mo
941.189 171.38 941.127 171.362 941.072 171.326 cv
940.463 170.923 935.118 167.333 935.265 165.392 cv
935.286 165.104 935.428 164.708 935.982 164.451 cv
936.444 164.237 936.93 164.236 937.425 164.449 cv
939.667 165.413 941.481 170.727 941.558 170.953 cv
941.602 171.083 941.558 171.228 941.448 171.313 cv
941.391 171.357 941.32 171.38 941.251 171.38 cv
cp
.639216 .482353 .564706 rgb
f
922.345 187.813 mo
922.257 187.813 922.169 187.778 922.105 187.708 cv
921.972 187.561 918.827 184.068 917.902 180.492 cv
917.858 180.319 917.962 180.143 918.135 180.098 cv
918.312 180.05 918.484 180.158 918.529 180.33 cv
919.413 183.75 922.553 187.238 922.584 187.273 cv
922.704 187.405 922.694 187.61 922.563 187.73 cv
922.5 187.786 922.422 187.813 922.345 187.813 cv
cp
f
946.293 127.479 mo
946.293 127.479 951.626 120.883 949.389 118.266 cv
947.15 115.649 943.69 118.266 943.69 118.266 cv
943.69 118.266 943.5 115.169 940.049 115.489 cv
936.599 115.809 934.52 119.486 934.52 119.486 cv
934.52 119.486 931.483 116.448 929.405 119.486 cv
927.326 122.523 928.766 127.479 928.766 127.479 cv
928.766 127.479 926.367 127.124 927.007 129.939 cv
927.646 132.755 931.418 135.657 931.418 135.657 cv
946.293 127.479 li
cp
0 0 0 rgb
f
934.62 137.864 mo
934.52 145.303 li
934.52 145.303 935.832 147.459 940.179 147.871 cv
943.417 148.179 944.565 147.461 944.565 147.461 cv
944.164 143.688 li
943.769 140.008 li
935.935 138.173 li
934.62 137.864 li
cp
.698039 .403922 .337255 rgb
f
935.935 138.173 mo
935.95 138.376 936.024 138.618 936.141 138.894 cv
937.755 142.632 942.295 143.495 944.164 143.688 cv
943.769 140.008 li
935.935 138.173 li
cp
0 0 0 rgb
f
945.656 123.075 mo
945.656 123.075 949.434 132.454 947.825 137.615 cv
946.216 142.776 941.499 141.819 938.692 140.731 cv
935.885 139.643 934.619 137.866 934.619 137.866 cv
934.619 137.866 931.943 138.687 930.242 136.172 cv
928.542 133.657 929.715 130.859 931.246 130.254 cv
932.778 129.65 934.546 130.794 934.546 130.794 cv
933.214 128.062 li
933.214 128.062 939.543 114.556 945.656 123.075 cv
cp
.698039 .403922 .337255 rgb
f
934.221 134.834 mo
934.153 134.834 934.086 134.813 934.028 134.771 cv
931.226 132.697 li
931.082 132.591 931.052 132.388 931.158 132.245 cv
931.265 132.1 931.468 132.072 931.61 132.177 cv
934.413 134.25 li
934.557 134.357 934.587 134.56 934.48 134.703 cv
934.417 134.789 934.319 134.834 934.221 134.834 cv
cp
0 0 0 rgb
f
931.167 134.751 mo
931.021 134.751 930.889 134.652 930.853 134.504 cv
930.811 134.331 930.917 134.156 931.091 134.113 cv
933.305 133.575 li
933.478 133.532 933.652 133.64 933.695 133.813 cv
933.737 133.987 933.631 134.162 933.457 134.204 cv
931.243 134.742 li
931.218 134.749 931.192 134.751 931.167 134.751 cv
cp
f
939.621 127.417 mo
939.585 127.417 939.549 127.41 939.513 127.397 cv
939.344 127.337 939.257 127.152 939.316 126.984 cv
939.877 125.412 941.244 125.224 941.894 125.34 cv
942.069 125.372 942.186 125.541 942.153 125.717 cv
942.121 125.891 941.96 126.009 941.778 125.977 cv
941.724 125.968 940.438 125.764 939.926 127.202 cv
939.879 127.334 939.754 127.417 939.621 127.417 cv
cp
f
946.596 126.689 mo
946.521 126.689 946.447 126.664 946.387 126.612 cv
945.878 126.181 945.645 126.085 945.571 126.064 cv
945.468 126.097 945.347 126.076 945.259 125.999 cv
945.125 125.881 945.111 125.677 945.229 125.542 cv
945.612 125.107 946.479 125.842 946.805 126.119 cv
946.941 126.235 946.958 126.439 946.843 126.575 cv
946.778 126.65 946.688 126.689 946.596 126.689 cv
cp
f
945.248 133.749 mo
945.18 133.749 945.11 133.727 945.052 133.683 cv
944.91 133.574 944.883 133.371 944.991 133.229 cv
945.71 132.286 944.391 130.504 943.821 129.897 cv
943.699 129.767 943.706 129.562 943.836 129.44 cv
943.967 129.318 944.171 129.325 944.293 129.454 cv
944.393 129.56 946.702 132.051 945.505 133.622 cv
945.441 133.705 945.346 133.749 945.248 133.749 cv
cp
f
945.855 130.428 mo
945.696 130.428 945.559 130.312 945.535 130.15 cv
945.284 128.4 li
945.259 128.223 945.382 128.059 945.559 128.034 cv
945.741 128.007 945.898 128.132 945.925 128.308 cv
946.176 130.059 li
946.201 130.235 946.078 130.399 945.901 130.425 cv
945.886 130.427 945.87 130.428 945.855 130.428 cv
cp
f
940.729 130.436 mo
940.559 130.436 940.417 130.304 940.405 130.132 cv
940.293 128.367 li
940.282 128.189 940.417 128.035 940.596 128.024 cv
940.779 128.017 940.928 128.148 940.939 128.326 cv
941.052 130.091 li
941.063 130.27 940.928 130.423 940.749 130.435 cv
940.742 130.435 940.735 130.436 940.729 130.436 cv
cp
f
946.41 125.188 mo
946.41 125.188 945.623 123.681 943.768 123.644 cv
941.912 123.605 940.812 124.898 940.812 124.898 cv
940.812 124.898 941.583 128.034 939.037 129.659 cv
936.492 131.285 934.546 130.794 934.546 130.794 cv
932.725 130.118 li
931.418 127.425 li
936.789 121.791 li
943.69 118.266 li
947.141 121.483 li
946.41 125.188 li
cp
f
943.244 136.689 mo
942.773 136.689 941.311 136.565 940.639 135.082 cv
940.565 134.919 940.638 134.727 940.8 134.653 cv
940.964 134.581 941.153 134.652 941.229 134.815 cv
941.829 136.141 943.278 136.045 943.339 136.04 cv
943.521 136.02 943.672 136.16 943.687 136.337 cv
943.7 136.515 943.568 136.67 943.391 136.685 cv
943.379 136.686 943.327 136.689 943.244 136.689 cv
cp
f
941.004 148.568 mo
940.869 148.568 940.73 148.565 940.589 148.559 cv
936.234 148.381 934.329 145.601 934.251 145.482 cv
934.151 145.334 934.191 145.134 934.34 145.034 cv
934.484 144.937 934.687 144.973 934.788 145.123 cv
934.806 145.149 936.604 147.749 940.615 147.913 cv
943.675 148.049 944.838 146.621 944.849 146.606 cv
944.959 146.466 945.16 146.439 945.302 146.547 cv
945.442 146.655 945.471 146.856 945.363 146.998 cv
945.313 147.065 944.141 148.568 941.004 148.568 cv
cp
.639216 .482353 .564706 rgb
f
1022.5 319.204 mo
1021.7 320.182 978.317 343.273 976.413 342.002 cv
975.867 341.64 974.827 340.073 973.626 338.016 cv
973.573 337.909 973.508 337.798 973.447 337.695 cv
970.423 332.49 966.459 324.476 966.459 324.476 cv
966.459 324.476 965.277 321.592 965.038 320.201 cv
964.723 318.389 985.066 309.325 985.066 309.325 cv
1004.69 314.348 li
1004.69 314.348 1008.1 311.742 1012.59 310.437 cv
1014.97 309.731 1017.82 311.951 1019.88 314.36 cv
1020.04 314.545 1020.19 314.726 1020.34 314.91 cv
1021.9 316.858 1022.85 318.769 1022.5 319.204 cv
cp
.968627 .701961 .411765 rgb
f
991.701 316.465 mo
991.624 316.465 991.547 316.438 991.487 316.384 cv
991.398 316.306 991.359 316.185 991.386 316.068 cv
992.528 311.135 li
992.568 310.961 992.739 310.848 992.917 310.893 cv
993.091 310.934 993.199 311.107 993.159 311.281 cv
992.151 315.631 li
1000.28 312.636 li
1000.45 312.573 1000.63 312.661 1000.69 312.827 cv
1000.75 312.995 1000.67 313.182 1000.5 313.243 cv
991.813 316.445 li
991.776 316.459 991.739 316.465 991.701 316.465 cv
cp
.360784 .411765 .647059 rgb
f
1022.5 319.204 mo
1021.7 320.182 978.317 343.273 976.413 342.002 cv
975.867 341.64 974.827 340.073 973.626 338.016 cv
1020.34 314.91 li
1021.9 316.858 1022.85 318.769 1022.5 319.204 cv
cp
.407843 .713726 .847059 rgb
f
927.282 326.61 mo
927.231 326.61 927.18 326.599 927.132 326.573 cv
918.936 322.265 li
918.83 322.21 918.764 322.101 918.763 321.982 cv
918.761 321.863 918.825 321.753 918.929 321.695 cv
923.358 319.24 li
923.515 319.155 923.711 319.21 923.799 319.366 cv
923.885 319.522 923.829 319.72 923.673 319.807 cv
919.767 321.971 li
927.433 326.001 li
927.591 326.084 927.651 326.279 927.568 326.438 cv
927.511 326.548 927.398 326.61 927.282 326.61 cv
cp
.360784 .411765 .647059 rgb
f
943.621 342.13 mo
942.32 343.14 916.341 343.49 913.971 342.26 cv
911.601 341.03 892.641 329.74 892.211 328.53 cv
892.061 328.13 892.681 326.16 893.591 323.73 cv
916.48 337.22 li
944.021 337.22 li
945.07 339.64 944.541 341.41 943.621 342.13 cv
cp
.407843 .713726 .847059 rgb
f
944.072 176.184 mo
927.566 190.302 li
926.48 191.232 924.846 191.104 923.917 190.018 cv
922.987 188.932 923.114 187.297 924.201 186.368 cv
940.706 172.25 li
941.793 171.32 943.427 171.447 944.356 172.534 cv
945.286 173.621 945.158 175.254 944.072 176.184 cv
cp
.360784 .411765 .647059 rgb
f
821.694 302.146 mo
822.044 319.773 li
839.021 315.783 li
842.159 301.675 li
821.694 302.146 li
cp
.698039 .403922 .337255 rgb
f
872.09 334.751 mo
870.93 335.255 821.79 335.985 820.677 333.984 cv
820.356 333.413 820.146 331.545 820.018 329.165 cv
820.02 329.047 820.012 328.918 820.005 328.8 cv
819.691 322.787 819.825 313.847 819.825 313.847 cv
819.825 313.847 820.091 310.742 820.513 309.395 cv
821.061 307.639 843.298 308.866 843.298 308.866 cv
858.459 322.295 li
858.459 322.295 862.686 321.535 867.28 322.427 cv
869.715 322.884 871.239 326.161 871.971 329.244 cv
872.031 329.483 872.082 329.712 872.125 329.941 cv
872.628 332.391 872.596 334.521 872.09 334.751 cv
cp
.94902 .635294 .32549 rgb
f
855.279 319.402 mo
855.24 319.4 846.048 318.282 846.048 318.282 cv
845.93 318.268 845.829 318.189 845.786 318.079 cv
845.742 317.969 845.763 317.843 845.84 317.752 cv
849.109 313.884 li
849.227 313.748 849.431 313.73 849.565 313.846 cv
849.702 313.961 849.719 314.165 849.604 314.302 cv
846.721 317.712 li
855.318 318.758 li
855.496 318.779 855.622 318.94 855.601 319.118 cv
855.58 319.282 855.44 319.402 855.279 319.402 cv
cp
.360784 .411765 .647059 rgb
f
872.09 334.751 mo
870.93 335.255 821.79 335.985 820.677 333.984 cv
820.356 333.413 820.146 331.545 820.018 329.165 cv
872.125 329.941 li
872.628 332.391 872.596 334.521 872.09 334.751 cv
cp
.34902 .666667 .776471 rgb
f
789.094 203.654 mo
808.646 170.515 li
791.3 160.672 li
791.3 160.672 778.752 170.088 778.546 197.038 cv
778.46 208.256 789.094 203.654 789.094 203.654 cv
cp
.698039 .403922 .337255 rgb
f
791.767 204.118 mo
791.767 204.118 791.021 212.579 789.148 213.756 cv
787.277 214.933 784.646 214.063 784.646 214.063 cv
784.646 214.063 782.593 218.288 780.77 217.379 cv
778.947 216.47 779.653 213.661 779.128 213.312 cv
778.602 212.961 772.483 209.465 772.009 207.459 cv
771.534 205.453 779.976 194.292 783.071 193.891 cv
786.167 193.49 791.688 196.025 791.767 204.118 cv
cp
f
784.646 214.387 mo
784.578 214.387 784.511 214.366 784.453 214.323 cv
784.007 213.993 780.09 211.039 780.049 209.146 cv
780.04 208.737 780.187 208.375 780.483 208.066 cv
781.184 207.341 782.61 207.094 783.453 207.011 cv
783.014 206.428 782.42 205.408 782.528 204.252 cv
782.625 203.218 783.258 202.31 784.409 201.552 cv
784.557 201.454 784.758 201.494 784.857 201.645 cv
784.955 201.794 784.914 201.994 784.765 202.093 cv
783.787 202.735 783.251 203.481 783.173 204.31 cv
783.034 205.763 784.333 207.047 784.347 207.06 cv
784.44 207.151 784.47 207.29 784.422 207.411 cv
784.373 207.532 784.257 207.613 784.126 207.615 cv
783.474 207.626 781.631 207.808 780.948 208.516 cv
780.773 208.698 780.69 208.899 780.695 209.132 cv
780.725 210.468 783.695 212.957 784.838 213.804 cv
784.981 213.91 785.012 214.112 784.905 214.256 cv
784.842 214.342 784.744 214.387 784.646 214.387 cv
cp
0 0 0 rgb
f
779.128 213.635 mo
778.949 213.635 778.805 213.49 778.805 213.312 cv
778.804 212.684 778.851 207.144 780.551 205.884 cv
782.034 204.785 783.704 206.197 784.38 207.098 cv
784.487 207.241 784.458 207.443 784.315 207.551 cv
784.171 207.656 783.969 207.628 783.862 207.486 cv
783.847 207.466 782.277 205.414 780.936 206.403 cv
779.717 207.307 779.451 211.696 779.451 213.312 cv
779.451 213.49 779.307 213.635 779.128 213.635 cv
cp
f
774.956 210.9 mo
774.736 210.874 774.611 210.711 774.636 210.534 cv
774.759 209.612 775.445 204.979 776.823 204.301 cv
777.521 203.957 778.319 204.38 779.2 205.552 cv
779.795 206.343 780.22 207.2 780.237 207.236 cv
780.316 207.396 780.251 207.59 780.09 207.669 cv
779.93 207.747 779.736 207.681 779.657 207.522 cv
779.151 206.499 777.851 204.509 777.109 204.881 cv
776.28 205.289 775.545 208.618 775.276 210.62 cv
775.255 210.782 775.116 210.9 774.956 210.9 cv
cp
f
776.009 206.371 mo
775.842 206.371 775.701 206.243 775.687 206.075 cv
775.65 205.654 775.421 204.492 774.795 204.171 cv
774.47 204.007 774.047 204.078 773.53 204.385 cv
773.378 204.476 773.179 204.428 773.087 204.273 cv
772.995 204.12 773.045 203.921 773.198 203.83 cv
773.919 203.398 774.556 203.32 775.092 203.596 cv
776.165 204.148 776.325 205.945 776.331 206.021 cv
776.346 206.199 776.214 206.355 776.036 206.37 cv
776.026 206.371 776.018 206.371 776.009 206.371 cv
cp
f
848.743 306.861 mo
816.863 306.191 li
817.623 250.831 li
802.653 193.171 li
819.753 187.771 li
819.753 187.771 820.333 188.571 821.323 190.001 cv
823.013 192.432 825.903 196.682 829.173 201.852 cv
836.293 213.111 845.213 228.711 847.403 239.371 cv
851.333 258.562 848.743 306.861 848.743 306.861 cv
cp
.498039 .647059 .866667 rgb
f
783.799 307.593 mo
783.799 326.738 li
801.505 320.553 li
803.144 306.193 li
783.799 307.593 li
cp
.698039 .403922 .337255 rgb
f
789.846 181.485 mo
789.846 181.485 787.686 200.647 786.588 213.312 cv
785.641 224.239 784.124 251.448 783.799 255.82 cv
783.475 260.192 777.24 310.926 777.24 310.926 cv
777.24 310.926 786.509 312.157 795.53 312.326 cv
804.552 312.495 810.363 313.326 810.363 313.326 cv
810.363 313.326 819.184 259.222 818.639 243.157 cv
818.095 227.093 810.511 189.409 810.511 189.409 cv
789.846 181.485 li
cp
.572549 .705882 .917647 rgb
f
832.041 342.22 mo
832.041 342.69 831.801 343.12 831.36 343.17 cv
828.841 343.46 814.381 343.57 810.65 343.26 cv
810.65 343.26 780.19 336.69 779.61 335.61 cv
779.411 335.25 779.431 333.15 779.591 330.48 cv
779.911 325.26 781.549 315.729 782.509 314.91 cv
783.948 313.66 799.601 314.541 801.751 314.75 cv
803.144 314.886 816.661 329.47 816.661 329.47 cv
816.661 329.47 821.49 329.04 827.74 332.27 cv
830.19 333.54 831.261 335.92 831.711 338.33 cv
831.971 339.68 832.03 341.04 832.041 342.22 cv
cp
.968627 .701961 .411765 rgb
f
829.173 201.852 mo
812.783 208.191 li
811.153 193.182 li
821.323 190.001 li
823.013 192.432 825.903 196.682 829.173 201.852 cv
cp
.572549 .705882 .917647 rgb
f
790.597 208.387 mo
790.091 208.387 789.561 208.342 789.006 208.252 cv
788.829 208.224 788.71 208.057 788.738 207.881 cv
788.767 207.704 788.925 207.582 789.109 207.613 cv
791.212 207.954 792.919 207.604 794.19 206.567 cv
796.424 204.751 796.595 201.396 796.596 201.362 cv
796.604 201.184 796.746 201.059 796.933 201.053 cv
797.111 201.061 797.25 201.211 797.242 201.39 cv
797.236 201.538 797.062 205.063 794.603 207.066 cv
793.525 207.945 792.182 208.387 790.597 208.387 cv
cp
.968627 .701961 .411765 rgb
f
819.639 253.506 mo
822.017 253.814 826.215 254.109 827.169 253.013 cv
827.283 252.882 827.419 252.657 827.284 252.226 cv
827.168 251.854 826.938 251.608 826.58 251.473 cv
825.024 250.879 821.564 252.46 819.639 253.506 cv
cp
823.538 254.441 mo
821.329 254.441 819.035 254.079 818.608 254.009 cv
818.475 253.986 818.369 253.883 818.344 253.75 cv
818.318 253.617 818.378 253.482 818.494 253.412 cv
818.732 253.27 824.341 249.931 826.81 250.867 cv
827.357 251.076 827.725 251.468 827.901 252.032 cv
828.115 252.716 827.887 253.174 827.657 253.438 cv
826.981 254.215 825.286 254.441 823.538 254.441 cv
cp
f
817.627 259.332 mo
817.404 259.304 817.281 259.14 817.307 258.963 cv
820.983 233.476 813.662 207.642 813.588 207.384 cv
813.539 207.216 813.632 207.041 813.798 206.986 cv
821.256 204.547 li
821.426 204.492 821.608 204.584 821.664 204.754 cv
821.72 204.924 821.627 205.106 821.457 205.162 cv
814.293 207.505 li
815.103 210.482 821.429 234.918 817.947 259.055 cv
817.924 259.216 817.785 259.332 817.627 259.332 cv
cp
f
786.609 196.599 mo
786.609 196.599 814.63 199.301 825.993 194.888 cv
825.993 194.888 827.664 152.333 817.602 145.495 cv
812.033 141.711 802.729 143.425 802.729 143.425 cv
787.313 163.182 li
786.609 196.599 li
cp
.25098 .313726 .498039 rgb
f
838.45 190.012 mo
838.45 190.012 846.837 191.357 847.878 193.308 cv
848.918 195.258 849.464 197.85 849.464 197.85 cv
849.464 197.85 853.018 200.395 851.981 202.148 cv
850.945 203.902 847.108 202.772 846.722 203.271 cv
846.336 203.771 842.413 209.626 840.379 209.957 cv
838.345 210.288 827.812 201.075 827.631 197.959 cv
827.451 194.842 830.371 189.516 838.45 190.012 cv
cp
.698039 .403922 .337255 rgb
f
849.287 197.443 mo
849.217 197.443 849.146 197.42 849.087 197.374 cv
842.905 192.515 li
842.765 192.405 842.741 192.201 842.852 192.061 cv
842.961 191.919 843.164 191.896 843.306 192.006 cv
849.487 196.865 li
849.628 196.975 849.651 197.179 849.541 197.319 cv
849.478 197.4 849.383 197.443 849.287 197.443 cv
cp
0 0 0 rgb
f
802.729 143.425 mo
802.729 143.425 790.922 144.81 788.579 154.359 cv
786.237 163.909 786.609 196.599 786.609 196.599 cv
802.305 153.819 li
802.729 143.425 li
cp
.25098 .313726 .498039 rgb
f
835.773 190.826 mo
807.604 164.614 li
794.267 179.443 li
794.267 179.443 800.77 193.72 827.046 199.707 cv
837.984 202.199 835.773 190.826 835.773 190.826 cv
cp
.698039 .403922 .337255 rgb
f
797.122 187.49 mo
819.515 172.671 li
818.404 167.351 809.872 139.83 796.852 145.49 cv
783.092 151.48 792.922 180.72 797.122 187.49 cv
cp
.25098 .313726 .498039 rgb
f
815.81 126.636 mo
815.81 126.636 821.143 120.041 818.905 117.423 cv
816.667 114.806 813.207 117.423 813.207 117.423 cv
813.207 117.423 813.017 114.327 809.565 114.646 cv
806.115 114.966 804.036 118.643 804.036 118.643 cv
804.036 118.643 801 115.605 798.922 118.643 cv
796.843 121.681 798.282 126.636 798.282 126.636 cv
798.282 126.636 795.884 126.281 796.523 129.097 cv
797.163 131.912 800.935 134.814 800.935 134.814 cv
815.81 126.636 li
cp
0 0 0 rgb
f
804.137 137.021 mo
804.036 144.46 li
804.036 144.46 805.349 146.616 809.695 147.029 cv
812.934 147.336 814.082 146.618 814.082 146.618 cv
813.681 142.845 li
813.285 139.165 li
805.451 137.331 li
804.137 137.021 li
cp
.698039 .403922 .337255 rgb
f
805.451 137.331 mo
805.467 137.534 805.541 137.775 805.657 138.051 cv
807.271 141.79 811.811 142.652 813.681 142.845 cv
813.285 139.165 li
805.451 137.331 li
cp
0 0 0 rgb
f
815.173 122.232 mo
815.173 122.232 818.95 131.611 817.342 136.772 cv
815.732 141.933 811.016 140.977 808.209 139.889 cv
805.401 138.801 804.136 137.023 804.136 137.023 cv
804.136 137.023 801.46 137.844 799.759 135.329 cv
798.059 132.814 799.231 130.016 800.763 129.412 cv
802.295 128.808 804.063 129.952 804.063 129.952 cv
802.73 127.219 li
802.73 127.219 809.06 113.713 815.173 122.232 cv
cp
.698039 .403922 .337255 rgb
f
803.737 133.992 mo
803.67 133.992 803.603 133.971 803.545 133.928 cv
800.742 131.854 li
800.599 131.748 800.568 131.545 800.675 131.402 cv
800.781 131.257 800.984 131.229 801.127 131.334 cv
803.93 133.408 li
804.073 133.514 804.104 133.717 803.997 133.86 cv
803.934 133.946 803.836 133.992 803.737 133.992 cv
cp
0 0 0 rgb
f
800.684 133.909 mo
800.537 133.909 800.405 133.809 800.369 133.661 cv
800.327 133.488 800.434 133.313 800.607 133.271 cv
802.821 132.732 li
802.991 132.689 803.169 132.797 803.212 132.971 cv
803.254 133.144 803.147 133.319 802.974 133.361 cv
800.76 133.899 li
800.734 133.906 800.709 133.909 800.684 133.909 cv
cp
f
809.138 126.574 mo
809.102 126.574 809.064 126.567 809.029 126.555 cv
808.86 126.495 808.773 126.31 808.833 126.141 cv
809.394 124.569 810.761 124.381 811.41 124.497 cv
811.586 124.529 811.702 124.698 811.67 124.874 cv
811.639 125.049 811.475 125.167 811.295 125.134 cv
811.241 125.125 809.956 124.921 809.442 126.359 cv
809.396 126.491 809.271 126.574 809.138 126.574 cv
cp
f
816.112 125.847 mo
816.038 125.847 815.964 125.822 815.903 125.77 cv
815.394 125.337 815.16 125.242 815.088 125.221 cv
814.98 125.254 814.862 125.233 814.774 125.156 cv
814.641 125.037 814.628 124.833 814.746 124.699 cv
815.133 124.264 815.997 125 816.321 125.277 cv
816.458 125.393 816.475 125.597 816.358 125.733 cv
816.295 125.808 816.204 125.847 816.112 125.847 cv
cp
f
814.765 132.907 mo
814.696 132.907 814.627 132.885 814.568 132.84 cv
814.427 132.732 814.399 132.529 814.508 132.387 cv
815.227 131.443 813.907 129.662 813.338 129.054 cv
813.216 128.924 813.223 128.719 813.353 128.597 cv
813.482 128.475 813.688 128.481 813.81 128.611 cv
813.909 128.717 816.219 131.208 815.021 132.779 cv
814.958 132.863 814.862 132.907 814.765 132.907 cv
cp
f
815.372 129.585 mo
815.213 129.585 815.075 129.469 815.052 129.308 cv
814.801 127.557 li
814.775 127.38 814.898 127.216 815.075 127.191 cv
815.26 127.167 815.416 127.29 815.441 127.465 cv
815.692 129.216 li
815.718 129.393 815.595 129.557 815.418 129.582 cv
815.402 129.584 815.387 129.585 815.372 129.585 cv
cp
f
810.245 129.593 mo
810.075 129.593 809.934 129.461 809.922 129.29 cv
809.81 127.524 li
809.799 127.346 809.934 127.192 810.112 127.181 cv
810.282 127.17 810.444 127.305 810.456 127.483 cv
810.568 129.249 li
810.579 129.427 810.444 129.581 810.266 129.592 cv
810.259 129.592 810.252 129.593 810.245 129.593 cv
cp
f
815.927 124.345 mo
815.927 124.345 815.14 122.838 813.284 122.801 cv
811.429 122.763 810.328 124.055 810.328 124.055 cv
810.328 124.055 811.1 127.191 808.554 128.817 cv
806.008 130.442 804.063 129.952 804.063 129.952 cv
802.24 129.275 li
800.935 126.583 li
806.306 120.948 li
813.207 117.423 li
816.656 120.641 li
815.927 124.345 li
cp
f
812.761 135.847 mo
812.29 135.847 810.827 135.723 810.155 134.239 cv
810.082 134.076 810.154 133.884 810.316 133.811 cv
810.481 133.738 810.67 133.809 810.745 133.972 cv
811.345 135.298 812.793 135.202 812.855 135.197 cv
813.029 135.179 813.188 135.317 813.203 135.494 cv
813.217 135.672 813.085 135.827 812.907 135.842 cv
812.896 135.843 812.844 135.847 812.761 135.847 cv
cp
f
813.763 326.888 mo
813.737 326.888 813.711 326.885 813.685 326.879 cv
804.695 324.651 li
804.58 324.622 804.49 324.533 804.46 324.418 cv
804.431 324.303 804.467 324.181 804.554 324.1 cv
808.27 320.658 li
808.4 320.537 808.605 320.543 808.727 320.676 cv
808.848 320.807 808.84 321.012 808.709 321.133 cv
805.433 324.167 li
813.841 326.25 li
814.014 326.293 814.12 326.469 814.077 326.643 cv
814.04 326.789 813.908 326.888 813.763 326.888 cv
cp
.360784 .411765 .647059 rgb
f
809.996 147.5 mo
805.683 147.5 803.842 144.754 803.766 144.637 cv
803.668 144.487 803.71 144.288 803.859 144.19 cv
804.004 144.092 804.208 144.132 804.307 144.283 cv
804.376 144.388 806.048 146.853 809.996 146.853 cv
810.021 146.853 810.044 146.853 810.068 146.853 cv
813.229 146.828 814.333 146.25 814.344 146.244 cv
814.501 146.16 814.696 146.217 814.782 146.372 cv
814.868 146.527 814.813 146.722 814.659 146.809 cv
814.61 146.836 813.44 147.474 810.074 147.499 cv
810.048 147.5 810.021 147.5 809.996 147.5 cv
cp
.639216 .482353 .564706 rgb
f
813.546 164.389 mo
813.437 164.389 813.326 164.407 813.215 164.443 cv
812.912 164.542 812.848 164.686 812.825 164.801 cv
812.624 165.821 814.979 168.353 816.906 170.099 cv
816.416 168.249 815.403 165.299 814.123 164.557 cv
813.929 164.445 813.738 164.389 813.546 164.389 cv
cp
817.458 171.337 mo
817.383 171.337 817.309 171.311 817.249 171.26 cv
816.691 170.788 811.813 166.586 812.19 164.676 cv
812.246 164.393 812.435 164.017 813.016 163.828 cv
813.498 163.669 813.981 163.728 814.448 163.998 cv
816.56 165.222 817.726 170.714 817.774 170.948 cv
817.803 171.083 817.742 171.221 817.623 171.292 cv
817.572 171.322 817.515 171.337 817.458 171.337 cv
cp
f
796.728 185.399 mo
796.627 185.399 796.527 185.352 796.464 185.263 cv
796.349 185.101 793.643 181.258 793.151 177.598 cv
793.127 177.42 793.252 177.258 793.429 177.234 cv
793.614 177.208 793.769 177.335 793.792 177.512 cv
794.263 181.016 796.964 184.85 796.991 184.888 cv
797.095 185.034 797.061 185.236 796.915 185.339 cv
796.858 185.38 796.793 185.399 796.728 185.399 cv
cp
f
819.647 176.441 mo
801.576 188.491 li
800.387 189.284 798.779 188.962 797.986 187.773 cv
797.193 186.583 797.515 184.976 798.704 184.183 cv
816.775 172.134 li
817.965 171.34 819.572 171.662 820.365 172.852 cv
821.158 174.041 820.837 175.648 819.647 176.441 cv
cp
.360784 .411765 .647059 rgb
f
832.041 342.22 mo
832.041 342.69 831.801 343.12 831.36 343.17 cv
828.841 343.46 814.381 343.57 810.65 343.26 cv
810.65 343.26 780.19 336.69 779.61 335.61 cv
779.411 335.25 779.431 333.15 779.591 330.48 cv
811.15 338.33 li
831.711 338.33 li
831.971 339.68 832.03 341.04 832.041 342.22 cv
cp
.407843 .713726 .847059 rgb
f
679.827 265.36 mo
662.222 266.318 li
666.795 283.147 li
681.004 285.797 li
679.827 265.36 li
cp
.698039 .403922 .337255 rgb
f
692.402 310.322 mo
692.402 329.469 li
710.107 323.283 li
711.747 308.923 li
692.402 310.322 li
cp
f
741.128 342.077 mo
739.963 342.57 690.818 342.814 689.726 340.803 cv
689.41 340.228 689.219 338.357 689.113 335.977 cv
689.116 335.858 689.11 335.73 689.104 335.611 cv
688.851 329.596 689.072 320.657 689.072 320.657 cv
689.072 320.657 689.369 317.556 689.805 316.213 cv
690.369 314.462 712.594 315.909 712.594 315.909 cv
727.621 329.487 li
727.621 329.487 731.854 328.77 736.44 329.706 cv
738.871 330.188 740.362 333.48 741.063 336.57 cv
741.121 336.81 741.17 337.039 741.21 337.27 cv
741.688 339.723 741.636 341.853 741.128 342.077 cv
cp
.968627 .701961 .411765 rgb
f
724.474 326.563 mo
724.432 326.561 715.25 325.352 715.25 325.352 cv
715.132 325.337 715.032 325.258 714.989 325.146 cv
714.947 325.035 714.97 324.91 715.047 324.82 cv
718.355 320.984 li
718.474 320.849 718.678 320.834 718.812 320.95 cv
718.947 321.067 718.962 321.271 718.846 321.406 cv
715.929 324.789 li
724.516 325.92 li
724.693 325.942 724.817 326.105 724.794 326.282 cv
724.772 326.445 724.634 326.563 724.474 326.563 cv
cp
.360784 .411765 .647059 rgb
f
741.128 342.077 mo
739.963 342.57 690.818 342.814 689.726 340.803 cv
689.41 340.228 689.219 338.357 689.113 335.977 cv
741.21 337.27 li
741.688 339.723 741.636 341.853 741.128 342.077 cv
cp
.407843 .713726 .847059 rgb
f
647.932 315.078 mo
647.427 313.919 646.647 264.78 648.646 263.665 cv
649.218 263.344 651.086 263.133 653.466 263.001 cv
653.584 263.003 653.712 262.995 653.831 262.987 cv
659.843 262.669 668.784 262.793 668.784 262.793 cv
668.784 262.793 671.889 263.056 673.236 263.477 cv
674.993 264.022 673.788 286.261 673.788 286.261 cv
660.374 301.436 li
660.374 301.436 661.138 305.661 660.251 310.258 cv
659.797 312.692 656.521 314.22 653.438 314.954 cv
653.199 315.015 652.97 315.066 652.741 315.108 cv
650.293 315.614 648.162 315.585 647.932 315.078 cv
cp
.968627 .701961 .411765 rgb
f
664.587 296.264 mo
664.371 296.24 664.244 296.079 664.266 295.901 cv
665.375 286.707 li
665.39 286.589 665.467 286.488 665.578 286.445 cv
665.688 286.4 665.814 286.423 665.905 286.499 cv
669.776 289.765 li
669.912 289.88 669.93 290.084 669.814 290.221 cv
669.7 290.357 669.496 290.375 669.358 290.259 cv
665.945 287.38 li
664.908 295.979 li
664.889 296.144 664.749 296.264 664.587 296.264 cv
cp
.360784 .411765 .647059 rgb
f
647.932 315.078 mo
647.427 313.919 646.647 264.78 648.646 263.665 cv
649.218 263.344 651.086 263.133 653.466 263.001 cv
652.741 315.108 li
650.293 315.614 648.162 315.585 647.932 315.078 cv
cp
.407843 .713726 .847059 rgb
f
734.914 282.058 mo
716.693 296.608 677.094 289.708 677.094 289.708 cv
675.184 258.918 li
696.934 256.938 li
717.834 200.878 li
720.494 193.748 li
729.374 190.748 li
729.374 190.748 731.363 197.188 733.754 206.698 cv
739.613 229.998 747.854 271.718 734.914 282.058 cv
cp
.498039 .647059 .866667 rgb
f
692.518 193.22 mo
692.518 193.22 689.575 210.935 690.114 221.891 cv
690.653 232.847 689.71 256.617 689.385 260.989 cv
689.06 265.361 686.595 312.721 686.595 312.721 cv
686.595 312.721 693.063 313.323 702.074 313.771 cv
712.884 314.308 718.832 314.872 718.832 314.872 cv
718.832 314.872 725.956 274.883 725.412 258.818 cv
724.867 242.755 721.216 188.896 721.216 188.896 cv
692.518 193.22 li
cp
.572549 .705882 .917647 rgb
f
697.256 210.19 mo
696.659 210.19 696.029 210.136 695.366 210.028 cv
695.189 210 695.07 209.833 695.099 209.657 cv
695.127 209.481 695.285 209.356 695.47 209.39 cv
697.834 209.775 699.731 209.434 701.106 208.375 cv
703 206.917 703.248 204.578 703.25 204.555 cv
703.268 204.378 703.415 204.244 703.604 204.264 cv
703.781 204.281 703.911 204.439 703.895 204.617 cv
703.884 204.725 703.614 207.26 701.502 208.888 cv
700.376 209.754 698.953 210.19 697.256 210.19 cv
cp
.968627 .701961 .411765 rgb
f
688.127 284.346 mo
687.933 284.337 687.795 284.185 687.804 284.006 cv
689.14 257.602 li
689.148 257.424 689.269 257.3 689.479 257.295 cv
689.657 257.304 689.795 257.456 689.786 257.635 cv
688.45 284.039 li
688.441 284.212 688.299 284.346 688.127 284.346 cv
cp
f
733.754 206.698 mo
719.073 211.108 li
717.834 200.878 li
720.494 193.748 li
729.374 190.748 li
729.374 190.748 731.363 197.188 733.754 206.698 cv
cp
.572549 .705882 .917647 rgb
f
722.848 286.922 mo
722.83 286.922 722.812 286.921 722.793 286.917 cv
722.617 286.888 722.499 286.72 722.529 286.544 cv
727.707 256.324 722.235 210.521 722.18 210.063 cv
722.161 209.909 722.254 209.764 722.4 209.716 cv
729.858 207.276 li
730.026 207.221 730.211 207.313 730.267 207.483 cv
730.322 207.653 730.229 207.836 730.06 207.892 cv
722.854 210.249 li
723.295 214.051 728.155 257.538 723.166 286.653 cv
723.14 286.811 723.003 286.922 722.848 286.922 cv
cp
.968627 .701961 .411765 rgb
f
690.909 199.926 mo
690.909 199.926 720.882 202.544 732.246 198.132 cv
732.246 198.132 732.401 156.875 722.501 148.663 cv
717.319 144.364 708.98 146.668 708.98 146.668 cv
690.196 173.271 li
690.909 199.926 li
cp
.25098 .313726 .498039 rgb
f
731.354 202.379 mo
712.247 168.98 li
695.105 179.176 li
695.105 179.176 697.072 194.741 720.383 208.266 cv
730.087 213.896 731.354 202.379 731.354 202.379 cv
cp
.698039 .403922 .337255 rgb
f
733.596 202.069 mo
733.596 202.069 741.411 205.396 741.951 207.54 cv
742.491 209.684 742.396 212.331 742.396 212.331 cv
742.396 212.331 745.231 215.656 743.804 217.108 cv
742.375 218.562 738.924 216.54 738.428 216.932 cv
737.933 217.324 732.715 222.061 730.661 221.892 cv
728.606 221.723 720.604 210.243 721.181 207.175 cv
721.757 204.106 725.874 199.641 733.596 202.069 cv
cp
f
742.4 211.901 mo
742.305 211.901 742.209 211.858 742.146 211.776 cv
737.316 205.572 li
737.206 205.432 737.231 205.229 737.373 205.119 cv
737.512 205.009 737.717 205.033 737.826 205.176 cv
742.655 211.38 li
742.766 211.521 742.74 211.724 742.599 211.833 cv
742.54 211.879 742.47 211.901 742.4 211.901 cv
cp
0 0 0 rgb
f
694.472 190.64 mo
694.852 191.43 695.342 192.26 695.932 193.13 cv
718.962 179.895 li
720.204 176.496 li
720.204 176.496 718.662 144.64 703.111 147.26 cv
687.562 149.88 691.941 185.3 694.472 190.64 cv
cp
.25098 .313726 .498039 rgb
f
708.98 146.668 mo
708.98 146.668 696.373 144.835 691.938 156.955 cv
687.504 169.074 690.909 199.926 690.909 199.926 cv
702.221 161.486 li
708.98 146.668 li
cp
f
719.622 129.44 mo
719.622 129.44 724.955 122.844 722.718 120.227 cv
720.479 117.61 717.02 120.227 717.02 120.227 cv
717.02 120.227 716.829 117.13 713.378 117.45 cv
709.928 117.77 707.849 121.447 707.849 121.447 cv
707.849 121.447 704.813 118.409 702.734 121.447 cv
700.655 124.484 702.094 129.44 702.094 129.44 cv
702.094 129.44 699.696 129.085 700.336 131.9 cv
700.976 134.716 704.747 137.618 704.747 137.618 cv
719.622 129.44 li
cp
0 0 0 rgb
f
707.949 139.825 mo
707.849 147.264 li
707.849 147.264 709.161 149.42 713.508 149.833 cv
716.746 150.14 717.895 149.422 717.895 149.422 cv
717.493 145.649 li
717.098 141.969 li
709.263 140.134 li
707.949 139.825 li
cp
.698039 .403922 .337255 rgb
f
709.263 140.134 mo
709.279 140.338 709.354 140.579 709.47 140.855 cv
711.084 144.593 715.623 145.456 717.493 145.649 cv
717.098 141.969 li
709.263 140.134 li
cp
0 0 0 rgb
f
718.985 125.036 mo
718.985 125.036 722.763 134.415 721.154 139.576 cv
719.545 144.737 714.828 143.78 712.021 142.692 cv
709.214 141.604 707.947 139.827 707.947 139.827 cv
707.947 139.827 705.272 140.648 703.571 138.133 cv
701.871 135.618 703.044 132.82 704.575 132.216 cv
706.107 131.611 707.875 132.755 707.875 132.755 cv
706.543 130.023 li
706.543 130.023 712.872 116.517 718.985 125.036 cv
cp
.698039 .403922 .337255 rgb
f
707.55 136.795 mo
707.482 136.795 707.415 136.774 707.357 136.732 cv
704.555 134.658 li
704.411 134.552 704.381 134.349 704.487 134.206 cv
704.594 134.061 704.798 134.033 704.939 134.138 cv
707.742 136.211 li
707.886 136.318 707.916 136.521 707.81 136.664 cv
707.746 136.75 707.648 136.795 707.55 136.795 cv
cp
0 0 0 rgb
f
704.495 136.712 mo
704.349 136.712 704.217 136.613 704.181 136.465 cv
704.139 136.292 704.245 136.117 704.419 136.074 cv
706.634 135.536 li
706.804 135.492 706.981 135.601 707.024 135.774 cv
707.066 135.948 706.96 136.123 706.786 136.165 cv
704.571 136.703 li
704.546 136.709 704.521 136.712 704.495 136.712 cv
cp
f
712.95 129.377 mo
712.914 129.377 712.877 129.371 712.842 129.358 cv
712.673 129.298 712.586 129.113 712.646 128.945 cv
713.206 127.374 714.571 127.184 715.223 127.301 cv
715.398 127.333 715.515 127.502 715.482 127.678 cv
715.451 127.853 715.288 127.972 715.107 127.938 cv
715.053 127.928 713.768 127.725 713.255 129.163 cv
713.208 129.295 713.083 129.377 712.95 129.377 cv
cp
f
719.925 128.651 mo
719.851 128.651 719.776 128.625 719.716 128.574 cv
719.206 128.141 718.973 128.045 718.9 128.025 cv
718.793 128.057 718.675 128.037 718.587 127.959 cv
718.453 127.841 718.44 127.637 718.559 127.502 cv
718.944 127.067 719.809 127.804 720.134 128.081 cv
720.271 128.196 720.287 128.4 720.171 128.537 cv
720.107 128.612 720.017 128.651 719.925 128.651 cv
cp
f
718.577 135.71 mo
718.509 135.71 718.439 135.688 718.381 135.644 cv
718.239 135.536 718.212 135.333 718.32 135.19 cv
719.039 134.247 717.72 132.465 717.15 131.858 cv
717.028 131.728 717.035 131.523 717.165 131.401 cv
717.296 131.278 717.501 131.285 717.622 131.415 cv
717.722 131.521 720.031 134.012 718.834 135.583 cv
718.771 135.667 718.675 135.71 718.577 135.71 cv
cp
f
719.185 132.389 mo
719.025 132.389 718.888 132.272 718.864 132.111 cv
718.613 130.361 li
718.588 130.184 718.711 130.02 718.888 129.995 cv
719.069 129.972 719.228 130.093 719.254 130.269 cv
719.505 132.02 li
719.53 132.196 719.407 132.36 719.23 132.386 cv
719.215 132.388 719.199 132.389 719.185 132.389 cv
cp
f
714.058 132.396 mo
713.888 132.396 713.746 132.265 713.734 132.093 cv
713.622 130.328 li
713.611 130.15 713.746 129.996 713.925 129.985 cv
714.101 129.973 714.257 130.109 714.269 130.287 cv
714.381 132.052 li
714.392 132.23 714.257 132.384 714.078 132.396 cv
714.071 132.396 714.064 132.396 714.058 132.396 cv
cp
f
719.739 127.148 mo
719.739 127.148 718.952 125.642 717.097 125.604 cv
715.241 125.567 714.14 126.859 714.14 126.859 cv
714.14 126.859 714.912 129.995 712.366 131.621 cv
709.82 133.246 707.875 132.755 707.875 132.755 cv
706.053 132.079 li
704.747 129.386 li
710.118 123.751 li
717.02 120.227 li
720.469 123.444 li
719.739 127.148 li
cp
f
716.573 138.65 mo
716.103 138.65 714.64 138.526 713.968 137.042 cv
713.895 136.88 713.967 136.688 714.129 136.614 cv
714.294 136.542 714.482 136.613 714.558 136.776 cv
715.157 138.102 716.608 138.004 716.668 138.001 cv
716.843 137.986 717.001 138.121 717.016 138.298 cv
717.029 138.476 716.897 138.631 716.72 138.646 cv
716.708 138.646 716.656 138.65 716.573 138.65 cv
cp
f
715.262 169.978 mo
715.188 169.978 715.114 169.985 715.039 170.001 cv
714.727 170.065 714.646 170.202 714.611 170.313 cv
714.298 171.305 716.358 174.083 718.079 176.032 cv
717.798 174.139 717.118 171.094 715.929 170.215 cv
715.713 170.056 715.493 169.978 715.262 169.978 cv
cp
718.526 177.326 mo
718.439 177.326 718.354 177.291 718.291 177.225 cv
717.789 176.693 713.408 171.976 713.994 170.119 cv
714.081 169.844 714.31 169.491 714.908 169.367 cv
715.409 169.265 715.88 169.375 716.313 169.695 cv
718.275 171.146 718.826 176.735 718.849 176.972 cv
718.861 177.109 718.786 177.24 718.66 177.297 cv
718.617 177.316 718.571 177.326 718.526 177.326 cv
cp
.639216 .482353 .564706 rgb
f
720.1 182.64 mo
700.803 192.608 li
699.532 193.265 697.971 192.767 697.314 191.497 cv
696.658 190.227 697.156 188.665 698.427 188.008 cv
717.724 178.04 li
718.994 177.383 720.556 177.881 721.212 179.151 cv
721.868 180.421 721.37 181.983 720.1 182.64 cv
cp
.360784 .411765 .647059 rgb
f
713.679 150.344 mo
709.364 150.344 707.523 147.599 707.447 147.481 cv
707.35 147.332 707.392 147.132 707.541 147.035 cv
707.686 146.937 707.89 146.978 707.988 147.127 cv
708.058 147.233 709.729 149.697 713.679 149.697 cv
713.703 149.697 713.727 149.697 713.751 149.697 cv
716.911 149.673 718.016 149.095 718.026 149.089 cv
718.183 149.004 718.379 149.061 718.465 149.216 cv
718.551 149.372 718.496 149.567 718.342 149.654 cv
718.293 149.681 717.123 150.318 713.757 150.344 cv
713.73 150.344 713.704 150.344 713.679 150.344 cv
cp
.639216 .482353 .564706 rgb
f
551.381 283.048 mo
536.389 292.328 li
548.471 304.905 li
562.21 300.42 li
551.381 283.048 li
cp
.698039 .403922 .337255 rgb
f
626.142 203.749 mo
615.617 175.395 li
595.397 178.527 li
595.397 178.527 597.14 199.284 613.872 207.712 cv
624.702 213.167 626.142 203.749 626.142 203.749 cv
cp
f
628.128 204.513 mo
628.128 204.513 634.021 210.63 633.68 212.814 cv
633.339 214.999 630.955 216.413 630.955 216.413 cv
630.955 216.413 632.794 220.735 630.912 221.514 cv
629.029 222.292 627.374 219.915 626.766 220.082 cv
626.156 220.249 619.502 222.568 617.677 221.61 cv
615.853 220.651 612.975 206.957 614.705 204.358 cv
616.435 201.76 621.971 199.259 628.128 204.513 cv
cp
f
626.797 217.241 mo
625.74 217.241 624.76 217.096 624.228 216.652 cv
623.914 216.391 623.736 216.043 623.699 215.617 cv
623.608 214.585 624.403 213.306 624.893 212.627 cv
624.11 212.509 622.744 212.156 621.851 211.11 cv
621.147 210.286 620.881 209.204 621.058 207.893 cv
621.081 207.716 621.234 207.592 621.421 207.615 cv
621.599 207.639 621.723 207.802 621.698 207.979 cv
621.548 209.1 621.765 210.012 622.343 210.689 cv
623.442 211.978 625.49 212.039 625.511 212.04 cv
625.635 212.043 625.746 212.117 625.798 212.23 cv
625.849 212.344 625.83 212.477 625.75 212.571 cv
625.33 213.071 624.257 214.582 624.344 215.561 cv
624.366 215.812 624.463 216.006 624.642 216.154 cv
625.669 217.013 629.497 216.402 630.886 216.098 cv
631.065 216.056 631.232 216.17 631.271 216.344 cv
631.31 216.518 631.199 216.69 631.024 216.729 cv
630.681 216.805 628.626 217.241 626.797 217.241 cv
cp
0 0 0 rgb
f
626.766 220.405 mo
626.69 220.405 626.614 220.38 626.554 220.326 cv
626.08 219.914 621.932 216.242 622.097 214.132 cv
622.241 212.289 624.407 211.954 625.526 212.041 cv
625.704 212.054 625.838 212.208 625.825 212.387 cv
625.813 212.564 625.651 212.711 625.479 212.686 cv
625.457 212.686 622.873 212.521 622.741 214.183 cv
622.623 215.697 625.76 218.778 626.978 219.838 cv
627.112 219.955 627.127 220.159 627.01 220.294 cv
626.945 220.368 626.855 220.405 626.766 220.405 cv
cp
f
621.965 221.757 mo
621.875 221.757 621.786 221.72 621.722 221.647 cv
621.107 220.949 618.063 217.391 618.455 215.905 cv
618.894 214.248 622.502 215.149 622.911 215.257 cv
623.083 215.302 623.187 215.479 623.141 215.651 cv
623.095 215.824 622.915 215.929 622.746 215.882 cv
621.644 215.593 619.296 215.256 619.08 216.071 cv
618.845 216.964 620.873 219.703 622.208 221.22 cv
622.326 221.354 622.313 221.559 622.179 221.677 cv
622.117 221.73 622.041 221.757 621.965 221.757 cv
cp
f
616.039 218.711 mo
616.021 218.711 616.001 218.71 615.981 218.706 cv
615.806 218.675 615.689 218.507 615.721 218.33 cv
615.869 217.504 616.228 216.972 616.786 216.749 cv
617.909 216.298 619.368 217.361 619.43 217.406 cv
619.574 217.512 619.604 217.714 619.499 217.858 cv
619.393 218.002 619.19 218.032 619.047 217.928 cv
618.706 217.678 617.678 217.09 617.025 217.351 cv
616.688 217.485 616.464 217.854 616.357 218.445 cv
616.329 218.602 616.193 218.711 616.039 218.711 cv
cp
f
597.342 189.03 mo
608.702 190.54 li
619.941 181.71 li
616.742 173.32 614.321 165.99 613.111 162.19 cv
612.571 160.49 611.151 159.23 609.401 158.87 cv
599.901 156.95 li
599.901 156.95 592.852 170.86 597.342 189.03 cv
cp
.25098 .313726 .498039 rgb
f
620.564 183.041 mo
601.369 194.124 li
600.132 194.838 598.548 194.414 597.833 193.176 cv
597.118 191.938 597.543 190.354 598.78 189.639 cv
617.976 178.557 li
619.214 177.842 620.798 178.267 621.513 179.505 cv
622.228 180.743 621.803 182.326 620.564 183.041 cv
cp
.360784 .411765 .647059 rgb
f
549.815 341.883 mo
548.771 341.17 521.971 299.976 523.07 297.968 cv
523.384 297.393 524.853 296.219 526.798 294.842 cv
526.899 294.78 527.004 294.706 527.101 294.636 cv
532.021 291.168 539.658 286.518 539.658 286.518 cv
539.658 286.518 542.427 285.088 543.792 284.728 cv
545.57 284.255 556.38 303.727 556.38 303.727 cv
553.093 323.712 li
553.093 323.712 555.988 326.884 557.683 331.247 cv
558.593 333.551 556.631 336.587 554.411 338.849 cv
554.241 339.027 554.075 339.192 553.903 339.351 cv
552.1 341.081 550.28 342.189 549.815 341.883 cv
cp
.968627 .701961 .411765 rgb
f
553.737 317.141 mo
553.616 317.141 553.5 317.072 553.444 316.955 cv
549.492 308.58 li
549.441 308.473 549.454 308.347 549.524 308.251 cv
549.595 308.155 549.713 308.106 549.83 308.122 cv
554.846 308.828 li
555.022 308.853 555.146 309.017 555.121 309.193 cv
555.097 309.37 554.931 309.491 554.756 309.469 cv
550.333 308.847 li
554.03 316.68 li
554.106 316.841 554.037 317.034 553.875 317.11 cv
553.831 317.131 553.784 317.141 553.737 317.141 cv
cp
.360784 .411765 .647059 rgb
f
549.815 341.883 mo
548.771 341.17 521.971 299.976 523.07 297.968 cv
523.384 297.393 524.853 296.219 526.798 294.842 cv
553.903 339.351 li
552.1 341.081 550.28 342.189 549.815 341.883 cv
cp
.407843 .713726 .847059 rgb
f
608.822 196.391 mo
608.822 196.391 621.267 262.217 603.047 276.768 cv
584.826 291.317 560.321 304.905 560.321 304.905 cv
543.035 276.768 li
573.708 253.328 li
582.437 195.467 li
608.822 196.391 li
cp
.498039 .647059 .866667 rgb
f
581.616 308.991 mo
579.404 328.009 li
597.706 323.911 li
600.993 309.837 li
581.616 308.991 li
cp
.698039 .403922 .337255 rgb
f
580.645 192.902 mo
580.645 192.902 581.055 209.255 582.256 220.799 cv
583.382 231.622 592.033 248.232 591.709 252.569 cv
591.384 256.906 574.74 312.431 574.74 312.431 cv
574.74 312.431 581.675 313.549 590.662 314.338 cv
599.849 315.146 606.114 314.466 606.114 314.466 cv
606.114 314.466 626.282 271.556 627.246 255.641 cv
628.314 238.015 610.815 190.453 610.815 190.453 cv
580.645 192.902 li
cp
.572549 .705882 .917647 rgb
f
583.284 284.532 mo
583.251 284.532 583.218 284.527 583.185 284.517 cv
583.015 284.462 582.922 284.28 582.977 284.109 cv
583.057 283.859 591.031 259.039 591.197 254.147 cv
591.362 249.28 584.845 233.716 584.779 233.559 cv
584.71 233.395 584.787 233.205 584.952 233.136 cv
585.117 233.066 585.306 233.144 585.375 233.309 cv
585.646 233.953 592.014 249.161 591.844 254.169 cv
591.675 259.151 583.922 283.283 583.592 284.309 cv
583.548 284.445 583.421 284.532 583.284 284.532 cv
cp
.968627 .701961 .411765 rgb
f
598.522 251.101 mo
597.172 251.101 594.976 251.887 593.152 252.724 cv
596.308 252.613 599.4 252.208 599.68 251.627 cv
599.696 251.594 599.675 251.541 599.618 251.469 cv
599.414 251.211 599.027 251.101 598.522 251.101 cv
cp
591.698 253.4 mo
591.55 253.4 591.42 253.3 591.385 253.155 cv
591.349 253.011 591.416 252.86 591.548 252.791 cv
592.267 252.414 598.615 249.155 600.126 251.068 cv
600.419 251.438 600.338 251.753 600.263 251.907 cv
599.615 253.254 593.545 253.391 591.7 253.4 cv
591.699 253.4 591.699 253.4 591.698 253.4 cv
cp
f
574.822 254.24 mo
576.725 256.627 578.794 258.791 579.47 258.679 cv
579.486 258.676 579.532 258.667 579.572 258.524 cv
579.898 257.357 577.192 255.492 574.822 254.24 cv
cp
579.457 259.326 mo
577.916 259.326 574.488 254.909 573.45 253.521 cv
573.361 253.403 573.364 253.24 573.457 253.125 cv
573.551 253.01 573.709 252.974 573.845 253.034 cv
574.563 253.365 580.855 256.339 580.195 258.698 cv
580.066 259.16 579.76 259.283 579.588 259.314 cv
579.546 259.322 579.502 259.326 579.457 259.326 cv
cp
f
578.003 203.553 mo
578.003 203.553 602.972 206.389 614.336 201.976 cv
613.892 179.472 li
613.892 179.472 618.661 160.319 605.943 152.582 cv
600.191 149.083 591.07 150.512 591.07 150.512 cv
572.286 177.115 li
578.003 203.553 li
cp
.25098 .313726 .498039 rgb
f
603.857 215.144 mo
603.857 215.144 605.488 223.479 604.017 225.13 cv
602.545 226.779 600.301 228.186 600.301 228.186 cv
600.301 228.186 599.14 232.399 597.136 232.032 cv
595.132 231.665 594.868 227.674 594.266 227.483 cv
593.664 227.293 586.815 225.632 585.803 223.837 cv
584.79 222.041 589.802 208.977 592.665 207.731 cv
595.528 206.487 601.535 207.39 603.857 215.144 cv
cp
.698039 .403922 .337255 rgb
f
600.926 228.091 mo
600.893 228.091 600.859 228.086 600.826 228.075 cv
600.656 228.021 600.563 227.838 600.618 227.668 cv
603.045 220.189 li
603.1 220.02 603.283 219.927 603.452 219.981 cv
603.622 220.036 603.716 220.219 603.66 220.389 cv
601.233 227.867 li
601.189 228.004 601.063 228.091 600.926 228.091 cv
cp
0 0 0 rgb
f
599.837 209.775 mo
584.568 174.457 li
566.397 182.68 li
566.397 182.68 566.618 198.367 588.277 214.404 cv
597.294 221.08 599.837 209.775 599.837 209.775 cv
cp
.698039 .403922 .337255 rgb
f
591.676 188.07 mo
591.676 188.07 598.382 158.54 591.702 153.9 cv
590.031 152.74 592.952 150.74 591.071 150.51 cv
584.972 149.78 575.495 155.333 571.922 161.7 cv
567.407 169.744 566.339 178.588 565.828 185.778 cv
591.676 188.07 li
cp
.25098 .313726 .498039 rgb
f
603.729 133.813 mo
603.729 133.813 609.063 127.217 606.825 124.6 cv
604.587 121.983 601.127 124.6 601.127 124.6 cv
601.127 124.6 600.937 121.503 597.486 121.823 cv
594.035 122.143 591.956 125.82 591.956 125.82 cv
591.956 125.82 588.92 122.782 586.842 125.82 cv
584.763 128.857 586.202 133.813 586.202 133.813 cv
586.202 133.813 583.804 133.458 584.443 136.273 cv
585.083 139.089 588.854 141.991 588.854 141.991 cv
603.729 133.813 li
cp
0 0 0 rgb
f
592.057 144.198 mo
591.956 151.637 li
591.956 151.637 593.269 153.793 597.615 154.206 cv
600.854 154.513 602.002 153.795 602.002 153.795 cv
601.601 150.022 li
601.205 146.342 li
593.371 144.507 li
592.057 144.198 li
cp
.698039 .403922 .337255 rgb
f
593.371 144.507 mo
593.387 144.711 593.461 144.952 593.577 145.228 cv
595.191 148.966 599.731 149.829 601.601 150.022 cv
601.205 146.342 li
593.371 144.507 li
cp
0 0 0 rgb
f
603.093 129.409 mo
603.093 129.409 606.87 138.788 605.262 143.949 cv
603.652 149.11 598.936 148.154 596.129 147.065 cv
593.321 145.978 592.056 144.2 592.056 144.2 cv
592.056 144.2 589.38 145.021 587.679 142.506 cv
585.979 139.991 587.151 137.193 588.683 136.589 cv
590.215 135.984 591.982 137.129 591.982 137.129 cv
590.65 134.396 li
590.65 134.396 596.979 120.89 603.093 129.409 cv
cp
.698039 .403922 .337255 rgb
f
591.657 141.168 mo
591.59 141.168 591.522 141.147 591.465 141.105 cv
588.662 139.032 li
588.519 138.925 588.488 138.723 588.595 138.579 cv
588.702 138.434 588.904 138.406 589.047 138.511 cv
591.85 140.584 li
591.993 140.691 592.023 140.894 591.917 141.037 cv
591.854 141.123 591.756 141.168 591.657 141.168 cv
cp
0 0 0 rgb
f
588.604 141.086 mo
588.457 141.086 588.325 140.987 588.289 140.839 cv
588.247 140.665 588.354 140.49 588.527 140.448 cv
590.741 139.909 li
590.914 139.865 591.089 139.973 591.132 140.147 cv
591.174 140.321 591.067 140.496 590.894 140.538 cv
588.68 141.077 li
588.654 141.083 588.629 141.086 588.604 141.086 cv
cp
f
597.058 133.75 mo
597.021 133.75 596.984 133.744 596.949 133.731 cv
596.78 133.671 596.693 133.486 596.753 133.318 cv
597.313 131.746 598.679 131.556 599.33 131.674 cv
599.506 131.706 599.622 131.875 599.59 132.051 cv
599.559 132.226 599.395 132.341 599.215 132.311 cv
599.159 132.302 597.876 132.098 597.362 133.536 cv
597.315 133.668 597.19 133.75 597.058 133.75 cv
cp
f
604.032 133.024 mo
603.958 133.024 603.884 132.999 603.823 132.947 cv
603.313 132.515 603.081 132.419 603.008 132.398 cv
602.9 132.431 602.783 132.41 602.695 132.333 cv
602.562 132.214 602.548 132.01 602.666 131.876 cv
603.051 131.441 603.917 132.177 604.241 132.454 cv
604.378 132.569 604.395 132.773 604.279 132.91 cv
604.215 132.985 604.124 133.023 604.032 133.024 cv
cp
f
602.685 140.083 mo
602.616 140.083 602.547 140.062 602.488 140.017 cv
602.347 139.909 602.319 139.706 602.428 139.563 cv
603.146 138.621 601.827 136.838 601.258 136.231 cv
601.136 136.101 601.143 135.896 601.272 135.774 cv
601.402 135.652 601.607 135.659 601.729 135.788 cv
601.829 135.894 604.139 138.386 602.941 139.956 cv
602.878 140.04 602.782 140.083 602.685 140.083 cv
cp
f
603.292 136.763 mo
603.133 136.763 602.995 136.646 602.972 136.485 cv
602.721 134.734 li
602.695 134.557 602.818 134.393 602.995 134.368 cv
603.179 134.34 603.335 134.466 603.361 134.642 cv
603.612 136.393 li
603.638 136.57 603.515 136.734 603.338 136.759 cv
603.322 136.761 603.307 136.763 603.292 136.763 cv
cp
f
598.165 136.77 mo
597.995 136.77 597.854 136.638 597.842 136.466 cv
597.729 134.701 li
597.719 134.523 597.854 134.369 598.032 134.358 cv
598.21 134.354 598.364 134.482 598.376 134.66 cv
598.488 136.425 li
598.499 136.604 598.364 136.757 598.186 136.769 cv
598.179 136.769 598.172 136.77 598.165 136.77 cv
cp
f
603.848 131.521 mo
603.848 131.521 603.06 130.015 601.204 129.978 cv
599.349 129.94 598.248 131.232 598.248 131.232 cv
598.248 131.232 599.02 134.368 596.474 135.994 cv
593.929 137.62 591.982 137.129 591.982 137.129 cv
590.161 136.452 li
588.854 133.759 li
594.226 128.125 li
601.127 124.6 li
604.577 127.818 li
603.848 131.521 li
cp
f
600.681 143.023 mo
600.21 143.023 598.747 142.899 598.075 141.416 cv
598.002 141.253 598.074 141.061 598.236 140.987 cv
598.401 140.915 598.591 140.986 598.665 141.149 cv
599.265 142.475 600.714 142.377 600.775 142.374 cv
600.958 142.356 601.109 142.494 601.123 142.671 cv
601.137 142.849 601.005 143.004 600.827 143.019 cv
600.815 143.02 600.764 143.023 600.681 143.023 cv
cp
f
588.328 175.718 mo
588.312 175.718 588.294 175.718 588.276 175.719 cv
587.959 175.733 587.857 175.855 587.805 175.96 cv
587.339 176.889 588.931 179.958 590.319 182.157 cv
590.343 180.243 590.155 177.129 589.12 176.072 cv
588.888 175.834 588.628 175.718 588.328 175.718 cv
cp
590.606 183.51 mo
590.501 183.51 590.4 183.458 590.339 183.368 cv
589.929 182.763 586.353 177.409 587.227 175.669 cv
587.356 175.412 587.639 175.1 588.249 175.073 cv
588.752 175.051 589.206 175.234 589.583 175.62 cv
591.29 177.364 590.944 182.969 590.93 183.207 cv
590.92 183.345 590.824 183.462 590.691 183.498 cv
590.663 183.506 590.635 183.51 590.606 183.51 cv
cp
.639216 .482353 .564706 rgb
f
589.665 188.331 mo
567.5 188.368 li
566.07 188.371 564.909 187.213 564.907 185.784 cv
564.904 184.354 566.062 183.193 567.491 183.19 cv
589.656 183.153 li
591.086 183.15 592.247 184.308 592.249 185.737 cv
592.252 187.167 591.095 188.328 589.665 188.331 cv
cp
.360784 .411765 .647059 rgb
f
598.341 154.586 mo
594.044 154.586 591.519 151.711 591.412 151.588 cv
591.296 151.453 591.311 151.25 591.446 151.133 cv
591.58 151.017 591.784 151.031 591.902 151.166 cv
591.926 151.194 594.351 153.939 598.344 153.939 cv
598.366 153.939 598.388 153.939 598.41 153.939 cv
601.53 153.916 602.616 152.991 602.627 152.981 cv
602.759 152.863 602.964 152.875 603.082 153.007 cv
603.201 153.139 603.192 153.341 603.062 153.46 cv
603.013 153.505 601.823 154.561 598.415 154.586 cv
598.391 154.586 598.365 154.586 598.341 154.586 cv
cp
.639216 .482353 .564706 rgb
f
629.219 342.673 mo
628.054 343.166 578.909 343.41 577.816 341.398 cv
577.501 340.823 577.31 338.953 577.204 336.573 cv
577.207 336.454 577.201 336.326 577.195 336.207 cv
576.941 330.192 577.163 321.253 577.163 321.253 cv
577.163 321.253 577.46 318.151 577.896 316.809 cv
578.46 315.058 600.685 316.505 600.685 316.505 cv
615.712 330.083 li
615.712 330.083 619.945 329.365 624.531 330.302 cv
626.962 330.783 628.453 334.076 629.153 337.166 cv
629.212 337.405 629.261 337.635 629.301 337.865 cv
629.779 340.318 629.727 342.448 629.219 342.673 cv
cp
.968627 .701961 .411765 rgb
f
612.564 327.159 mo
612.522 327.156 603.341 325.947 603.341 325.947 cv
603.223 325.933 603.123 325.854 603.08 325.742 cv
603.038 325.631 603.061 325.506 603.138 325.416 cv
606.446 321.58 li
606.564 321.444 606.769 321.43 606.902 321.546 cv
607.038 321.663 607.053 321.867 606.937 322.002 cv
604.02 325.385 li
612.606 326.516 li
612.784 326.538 612.908 326.701 612.885 326.878 cv
612.863 327.041 612.725 327.159 612.564 327.159 cv
cp
.360784 .411765 .647059 rgb
f
629.219 342.673 mo
628.054 343.166 578.909 343.41 577.816 341.398 cv
577.501 340.823 577.31 338.953 577.204 336.573 cv
629.301 337.865 li
629.779 340.318 629.727 342.448 629.219 342.673 cv
cp
.407843 .713726 .847059 rgb
f
473.177 191.679 mo
457.768 165.654 li
438.431 172.34 li
438.431 172.34 443.844 192.455 461.811 197.765 cv
473.439 201.202 473.177 191.679 473.177 191.679 cv
cp
.698039 .403922 .337255 rgb
f
444.052 185.06 mo
462.602 170.08 li
455.751 160.26 451.212 152.58 451.212 152.58 cv
438.322 152.95 li
438.322 152.95 434.902 168.42 444.052 185.06 cv
cp
.25098 .313726 .498039 rgb
f
477.505 191.973 mo
477.505 191.973 484.737 196.43 484.951 198.63 cv
485.165 200.831 483.208 202.794 483.208 202.794 cv
483.208 202.794 486.066 206.521 484.437 207.744 cv
482.808 208.967 480.613 207.077 480.064 207.391 cv
479.516 207.704 473.65 211.608 471.644 211.135 cv
469.638 210.661 463.439 198.115 464.467 195.167 cv
465.495 192.22 470.234 188.418 477.505 191.973 cv
cp
.698039 .403922 .337255 rgb
f
477.721 204.882 mo
477.35 204.882 477.019 204.828 476.753 204.701 cv
476.384 204.526 476.125 204.233 475.983 203.83 cv
475.499 202.46 476.581 200.186 476.627 200.089 cv
476.705 199.929 476.899 199.862 477.06 199.938 cv
477.22 200.016 477.288 200.209 477.21 200.37 cv
476.928 200.958 476.265 202.688 476.593 203.615 cv
476.677 203.854 476.82 204.018 477.03 204.117 cv
478.241 204.688 481.795 203.147 483.063 202.505 cv
483.222 202.427 483.417 202.488 483.497 202.647 cv
483.578 202.808 483.515 203.002 483.355 203.082 cv
482.937 203.295 479.736 204.882 477.721 204.882 cv
cp
0 0 0 rgb
f
475.752 210.219 mo
475.689 210.219 475.626 210.201 475.57 210.163 cv
474.801 209.64 470.965 206.952 470.976 205.416 cv
470.987 203.699 474.72 203.67 475.13 203.678 cv
475.309 203.679 475.453 203.824 475.451 204.003 cv
475.45 204.181 475.306 204.324 475.128 204.324 cv
473.927 204.324 471.628 204.587 471.622 205.42 cv
471.616 206.344 474.264 208.491 475.935 209.628 cv
476.082 209.729 476.121 209.93 476.02 210.077 cv
475.958 210.17 475.855 210.219 475.752 210.219 cv
cp
f
469.254 208.745 mo
469.087 208.745 468.945 208.616 468.932 208.446 cv
468.87 207.608 469.085 207.004 469.57 206.648 cv
470.545 205.937 472.224 206.599 472.294 206.627 cv
472.46 206.693 472.541 206.881 472.474 207.047 cv
472.408 207.213 472.219 207.297 472.054 207.227 cv
471.661 207.071 470.519 206.754 469.952 207.171 cv
469.659 207.386 469.533 207.799 469.578 208.397 cv
469.591 208.576 469.457 208.731 469.279 208.744 cv
469.271 208.745 469.263 208.745 469.254 208.745 cv
cp
f
480.064 207.714 mo
480.016 207.714 479.966 207.703 479.92 207.68 cv
479.358 207.399 474.426 204.876 474.061 202.791 cv
473.822 201.426 474.895 200.601 475.913 200.189 cv
473.559 198.924 474.026 195.785 474.032 195.75 cv
474.06 195.574 474.223 195.452 474.401 195.481 cv
474.578 195.509 474.698 195.675 474.67 195.851 cv
474.649 195.988 474.18 199.204 476.998 199.917 cv
477.146 199.954 477.247 200.089 477.242 200.241 cv
477.237 200.393 477.127 200.521 476.977 200.548 cv
476.951 200.553 474.411 201.037 474.699 202.68 cv
474.96 204.176 478.766 206.379 480.209 207.102 cv
480.369 207.182 480.434 207.376 480.354 207.535 cv
480.297 207.648 480.183 207.714 480.064 207.714 cv
cp
f
403.441 302.71 mo
396.746 320.647 li
415.496 321.044 li
422.053 308.164 li
403.441 302.71 li
cp
.698039 .403922 .337255 rgb
f
461.493 313.374 mo
471.066 328.181 li
483.403 315.854 li
478.649 302.206 li
461.493 313.374 li
cp
f
521.688 319.981 mo
520.896 320.966 477.72 344.443 475.805 343.188 cv
475.255 342.831 474.202 341.274 472.982 339.228 cv
472.928 339.121 472.862 339.011 472.8 338.909 cv
469.73 333.73 465.695 325.752 465.695 325.752 cv
465.695 325.752 464.488 322.879 464.236 321.489 cv
463.904 319.68 484.167 310.436 484.167 310.436 cv
503.832 315.284 li
503.832 315.284 507.221 312.647 511.704 311.302 cv
514.072 310.575 516.944 312.771 519.024 315.161 cv
519.188 315.344 519.341 315.523 519.485 315.706 cv
521.068 317.642 522.029 319.542 521.688 319.981 cv
cp
.968627 .701961 .411765 rgb
f
490.861 317.517 mo
490.785 317.517 490.709 317.489 490.649 317.438 cv
490.56 317.36 490.52 317.239 490.546 317.123 cv
491.645 312.179 li
491.683 312.005 491.852 311.89 492.03 311.934 cv
492.204 311.972 492.314 312.145 492.275 312.319 cv
491.307 316.679 li
499.407 313.61 li
499.572 313.55 499.762 313.631 499.824 313.799 cv
499.888 313.966 499.803 314.152 499.636 314.216 cv
490.976 317.496 li
490.938 317.51 490.899 317.517 490.861 317.517 cv
cp
.360784 .411765 .647059 rgb
f
521.688 319.981 mo
520.896 320.966 477.72 344.443 475.805 343.188 cv
475.255 342.831 474.202 341.274 472.982 339.228 cv
519.485 315.706 li
521.068 317.642 522.029 319.542 521.688 319.981 cv
cp
.407843 .713726 .847059 rgb
f
415.904 188.896 mo
415.904 188.896 414.997 205.233 413.829 216.14 cv
412.662 227.047 410.287 249.127 409.288 253.396 cv
408.288 257.665 394.422 305.151 394.422 305.151 cv
394.422 305.151 402.896 308.919 411.634 311.167 cv
419.388 313.161 427.296 315.193 427.296 315.193 cv
427.296 315.193 443.327 271.094 445.281 255.14 cv
447.235 239.186 451.35 195.144 451.35 195.144 cv
415.904 188.896 li
cp
.498039 .647059 .866667 rgb
f
410.54 252.451 mo
413.589 253.293 417.853 254.085 418.776 253.201 cv
418.876 253.105 418.998 252.934 418.897 252.548 cv
418.8 252.173 418.568 251.895 418.189 251.695 cv
416.444 250.781 412.406 251.867 410.54 252.451 cv
cp
417.005 254.229 mo
414.194 254.229 409.978 252.972 409.357 252.782 cv
409.224 252.741 409.132 252.62 409.128 252.481 cv
409.125 252.343 409.21 252.217 409.341 252.169 cv
409.609 252.07 415.94 249.788 418.49 251.122 cv
419.031 251.406 419.379 251.831 419.523 252.386 cv
419.695 253.044 419.455 253.446 419.224 253.668 cv
418.799 254.075 417.988 254.229 417.005 254.229 cv
cp
.968627 .701961 .411765 rgb
f
449.407 186.1 mo
449.407 186.1 459.896 216.76 466.553 240.533 cv
471.832 259.39 488.041 303.916 488.041 303.916 cv
457.497 318.685 li
426.953 241.767 li
431.058 190.373 li
449.407 186.1 li
cp
.572549 .705882 .917647 rgb
f
415.904 193.605 mo
415.904 193.605 415.472 209.442 415.904 215.804 cv
416.43 223.546 430.804 251.024 430.804 251.024 cv
434.833 194.947 li
415.904 193.605 li
cp
f
421.176 208.133 mo
420.542 208.133 419.857 208.063 419.119 207.905 cv
418.944 207.868 418.833 207.696 418.87 207.521 cv
418.907 207.347 419.077 207.236 419.254 207.272 cv
426.321 208.77 427.996 201.915 428.065 201.622 cv
428.105 201.448 428.281 201.347 428.453 201.38 cv
428.627 201.421 428.735 201.594 428.695 201.768 cv
428.679 201.839 427.15 208.133 421.176 208.133 cv
cp
.968627 .701961 .411765 rgb
f
464.428 172.279 mo
447.334 186.388 li
446.232 187.298 444.6 187.142 443.69 186.039 cv
442.78 184.937 442.936 183.305 444.039 182.395 cv
461.132 168.285 li
462.235 167.375 463.867 167.531 464.777 168.634 cv
465.687 169.737 465.531 171.368 464.428 172.279 cv
cp
.360784 .411765 .647059 rgb
f
442.716 171.188 mo
442.416 171.188 442.18 171.274 441.997 171.45 cv
441.819 171.621 441.823 171.744 441.846 171.832 cv
442.108 172.843 445.729 174.216 448.564 175.051 cv
447.188 173.704 444.447 171.239 442.764 171.189 cv
442.748 171.188 442.731 171.188 442.716 171.188 cv
cp
449.644 176.011 mo
449.617 176.011 449.589 176.008 449.562 176 cv
448.254 175.658 441.703 173.855 441.22 171.995 cv
441.154 171.741 441.157 171.359 441.549 170.983 cv
441.87 170.676 442.288 170.523 442.783 170.542 cv
445.36 170.619 449.698 175.27 449.881 175.468 cv
449.979 175.573 449.996 175.73 449.921 175.854 cv
449.862 175.953 449.756 176.011 449.644 176.011 cv
cp
1 1 1 rgb
f
413.141 196.947 mo
413.141 196.947 442.669 201.01 454.233 197.152 cv
452.922 174.644 li
452.922 174.644 458.613 155.744 446.284 147.401 cv
440.708 143.627 431.528 144.614 431.528 144.614 cv
415.838 170.738 li
413.141 196.947 li
cp
.25098 .313726 .498039 rgb
f
403.361 203.407 mo
423.239 170.462 li
403.442 162.267 li
403.442 162.267 391.86 186.793 391.374 197.787 cv
390.879 208.995 403.361 203.407 403.361 203.407 cv
cp
.698039 .403922 .337255 rgb
f
404.328 205.385 mo
404.328 205.385 402.813 213.742 400.841 214.743 cv
398.87 215.744 396.268 216.237 396.268 216.237 cv
396.268 216.237 393.652 219.738 391.919 218.667 cv
390.187 217.596 391.395 213.782 390.903 213.386 cv
390.411 212.989 384.637 208.949 384.347 206.908 cv
384.058 204.868 393.482 194.523 396.602 194.407 cv
399.721 194.29 404.988 197.317 404.328 205.385 cv
cp
f
397.702 170.88 mo
419.882 183.17 li
420.102 182.8 li
431.532 144.61 li
431.532 144.61 416.682 142.13 408.212 152.58 cv
405.052 156.48 401.242 163.55 397.702 170.88 cv
cp
.25098 .313726 .498039 rgb
f
397.002 216.398 mo
396.93 216.398 396.857 216.375 396.797 216.325 cv
396.659 216.212 396.639 216.009 396.752 215.87 cv
401.735 209.788 li
401.848 209.649 402.052 209.628 402.19 209.743 cv
402.328 209.856 402.348 210.06 402.235 210.198 cv
397.252 216.28 li
397.189 216.358 397.096 216.398 397.002 216.398 cv
cp
0 0 0 rgb
f
425.003 172.681 mo
424.949 172.681 424.892 172.688 424.834 172.7 cv
423.562 172.974 421.931 175.872 421.062 177.684 cv
422.816 176.685 425.607 174.844 425.78 173.564 cv
425.814 173.309 425.732 173.099 425.522 172.906 cv
425.357 172.754 425.19 172.681 425.003 172.681 cv
cp
420.367 178.755 mo
420.287 178.755 420.208 178.725 420.146 178.668 cv
420.046 178.575 420.016 178.43 420.069 178.304 cv
420.321 177.713 422.591 172.521 424.698 172.068 cv
425.162 171.968 425.595 172.095 425.96 172.429 cv
426.324 172.765 426.484 173.187 426.421 173.651 cv
426.134 175.774 421.089 178.424 420.515 178.719 cv
420.468 178.743 420.417 178.755 420.367 178.755 cv
cp
.639216 .482353 .564706 rgb
f
442.712 342.188 mo
441.412 343.198 415.432 343.548 413.062 342.317 cv
410.692 341.088 391.732 329.798 391.302 328.588 cv
391.152 328.188 391.772 326.218 392.682 323.788 cv
394.512 318.928 397.532 312.228 398.082 312.397 cv
398.912 312.668 419.152 314.027 420.062 314.738 cv
420.962 315.438 428.332 329.098 428.332 329.098 cv
428.332 329.098 438.112 330.698 441.062 334.118 cv
442.042 335.258 442.702 336.317 443.112 337.277 cv
444.162 339.698 443.632 341.468 442.712 342.188 cv
cp
.968627 .701961 .411765 rgb
f
426.374 326.669 mo
426.323 326.669 426.271 326.657 426.224 326.632 cv
418.026 322.322 li
417.921 322.268 417.854 322.158 417.854 322.04 cv
417.852 321.921 417.916 321.811 418.02 321.753 cv
422.45 319.298 li
422.607 319.212 422.803 319.269 422.89 319.424 cv
422.977 319.58 422.92 319.777 422.764 319.864 cv
418.857 322.028 li
426.524 326.06 li
426.683 326.143 426.744 326.338 426.66 326.496 cv
426.603 326.606 426.49 326.669 426.374 326.669 cv
cp
.360784 .411765 .647059 rgb
f
442.712 342.188 mo
441.412 343.198 415.432 343.548 413.062 342.317 cv
410.692 341.088 391.732 329.798 391.302 328.588 cv
391.152 328.188 391.772 326.218 392.682 323.788 cv
415.572 337.277 li
443.112 337.277 li
444.162 339.698 443.632 341.468 442.712 342.188 cv
cp
.407843 .713726 .847059 rgb
f
443.178 128.275 mo
443.178 128.275 448.511 121.679 446.273 119.063 cv
444.035 116.445 440.576 119.063 440.576 119.063 cv
440.576 119.063 440.385 115.965 436.934 116.285 cv
433.483 116.605 431.404 120.282 431.404 120.282 cv
431.404 120.282 428.368 117.245 426.29 120.282 cv
424.211 123.319 425.65 128.275 425.65 128.275 cv
425.65 128.275 423.252 127.92 423.892 130.736 cv
424.531 133.551 428.303 136.453 428.303 136.453 cv
443.178 128.275 li
cp
0 0 0 rgb
f
431.504 138.66 mo
431.404 146.099 li
431.404 146.099 432.717 148.255 437.063 148.667 cv
440.302 148.975 441.45 148.257 441.45 148.257 cv
441.049 144.484 li
440.653 140.804 li
432.819 138.97 li
431.504 138.66 li
cp
.698039 .403922 .337255 rgb
f
432.819 138.97 mo
432.835 139.173 432.909 139.414 433.025 139.69 cv
434.64 143.428 439.179 144.291 441.049 144.484 cv
440.653 140.804 li
432.819 138.97 li
cp
0 0 0 rgb
f
442.541 123.872 mo
442.541 123.872 446.319 133.25 444.71 138.411 cv
443.101 143.572 438.384 142.616 435.577 141.528 cv
432.77 140.439 431.503 138.662 431.503 138.662 cv
431.503 138.662 428.828 139.483 427.127 136.968 cv
425.426 134.453 426.6 131.655 428.131 131.051 cv
429.663 130.446 431.43 131.591 431.43 131.591 cv
430.099 128.858 li
430.099 128.858 436.427 115.352 442.541 123.872 cv
cp
.698039 .403922 .337255 rgb
f
431.105 135.63 mo
431.039 135.63 430.971 135.609 430.913 135.567 cv
428.11 133.494 li
427.967 133.387 427.937 133.185 428.042 133.041 cv
428.147 132.897 428.35 132.867 428.495 132.973 cv
431.298 135.046 li
431.441 135.153 431.472 135.355 431.366 135.499 cv
431.302 135.585 431.204 135.63 431.105 135.63 cv
cp
0 0 0 rgb
f
428.051 135.548 mo
427.905 135.548 427.773 135.448 427.737 135.3 cv
427.695 135.127 427.801 134.952 427.975 134.91 cv
430.19 134.372 li
430.359 134.33 430.538 134.436 430.581 134.61 cv
430.623 134.783 430.516 134.958 430.342 135 cv
428.127 135.539 li
428.102 135.545 428.076 135.548 428.051 135.548 cv
cp
f
436.506 128.212 mo
436.47 128.212 436.433 128.206 436.397 128.193 cv
436.229 128.133 436.141 127.948 436.201 127.78 cv
436.762 126.208 438.132 126.02 438.778 126.136 cv
438.954 126.168 439.07 126.336 439.038 126.512 cv
439.005 126.688 438.831 126.801 438.663 126.772 cv
438.61 126.764 437.323 126.56 436.811 127.998 cv
436.763 128.13 436.639 128.212 436.506 128.212 cv
cp
f
443.481 127.486 mo
443.407 127.486 443.333 127.46 443.271 127.409 cv
442.762 126.976 442.528 126.881 442.456 126.86 cv
442.351 126.893 442.231 126.872 442.143 126.794 cv
442.009 126.676 441.996 126.472 442.114 126.337 cv
442.498 125.903 443.365 126.639 443.69 126.916 cv
443.827 127.031 443.843 127.235 443.728 127.372 cv
443.664 127.447 443.573 127.486 443.481 127.486 cv
cp
f
442.133 134.545 mo
442.064 134.545 441.995 134.523 441.937 134.479 cv
441.794 134.371 441.767 134.167 441.875 134.025 cv
442.595 133.083 441.275 131.301 440.707 130.693 cv
440.584 130.563 440.591 130.358 440.721 130.236 cv
440.853 130.114 441.057 130.122 441.178 130.25 cv
441.277 130.356 443.587 132.848 442.39 134.418 cv
442.326 134.501 442.23 134.545 442.133 134.545 cv
cp
f
442.74 131.225 mo
442.582 131.225 442.443 131.108 442.42 130.947 cv
442.169 129.196 li
442.144 129.019 442.267 128.855 442.444 128.83 cv
442.625 128.809 442.785 128.928 442.81 129.104 cv
443.061 130.855 li
443.086 131.032 442.963 131.196 442.786 131.221 cv
442.771 131.223 442.755 131.225 442.74 131.225 cv
cp
f
437.612 131.232 mo
437.443 131.232 437.301 131.1 437.29 130.929 cv
437.178 129.164 li
437.167 128.985 437.302 128.832 437.48 128.82 cv
437.647 128.801 437.813 128.944 437.824 129.123 cv
437.936 130.888 li
437.947 131.066 437.812 131.22 437.633 131.231 cv
437.626 131.231 437.619 131.232 437.612 131.232 cv
cp
f
443.295 125.984 mo
443.295 125.984 442.508 124.478 440.652 124.44 cv
438.797 124.402 437.696 125.694 437.696 125.694 cv
437.696 125.694 438.468 128.83 435.922 130.456 cv
433.376 132.082 431.43 131.591 431.43 131.591 cv
429.609 130.914 li
428.303 128.222 li
433.674 122.587 li
440.576 119.063 li
444.025 122.28 li
443.295 125.984 li
cp
f
440.129 137.485 mo
439.658 137.485 438.195 137.361 437.524 135.878 cv
437.451 135.715 437.522 135.523 437.686 135.45 cv
437.847 135.377 438.04 135.448 438.114 135.611 cv
438.712 136.933 440.159 136.84 440.224 136.836 cv
440.414 136.809 440.557 136.955 440.571 137.133 cv
440.585 137.311 440.453 137.466 440.275 137.48 cv
440.264 137.481 440.211 137.485 440.129 137.485 cv
cp
f
417.438 182.668 mo
397.299 173.411 li
396 172.814 395.431 171.277 396.028 169.978 cv
396.625 168.679 398.163 168.109 399.461 168.707 cv
419.601 177.964 li
420.899 178.561 421.468 180.099 420.872 181.397 cv
420.274 182.697 418.737 183.266 417.438 182.668 cv
cp
.360784 .411765 .647059 rgb
f
438.324 149.048 mo
438.189 149.048 438.051 149.045 437.908 149.039 cv
433.586 148.862 431.265 146.423 431.167 146.319 cv
431.046 146.188 431.053 145.984 431.184 145.863 cv
431.313 145.741 431.519 145.749 431.641 145.877 cv
431.663 145.901 433.89 148.227 437.935 148.393 cv
441.016 148.521 442.157 147.102 442.168 147.087 cv
442.277 146.946 442.481 146.919 442.621 147.028 cv
442.762 147.136 442.79 147.337 442.683 147.479 cv
442.633 147.545 441.46 149.048 438.324 149.048 cv
cp
.639216 .482353 .564706 rgb
f
276.39 306.821 mo
276.168 325.967 li
293.944 319.986 li
295.749 305.646 li
276.39 306.821 li
cp
.698039 .403922 .337255 rgb
f
324.396 342.38 mo
324.396 342.85 324.156 343.279 323.716 343.329 cv
321.196 343.619 306.736 343.729 303.006 343.419 cv
303.006 343.419 272.546 336.85 271.966 335.77 cv
271.766 335.409 271.786 333.31 271.946 330.64 cv
272.266 325.419 273.904 315.89 274.864 315.069 cv
276.304 313.819 291.956 314.7 294.106 314.909 cv
295.499 315.045 309.016 329.63 309.016 329.63 cv
309.016 329.63 313.846 329.199 320.096 332.43 cv
322.546 333.699 323.616 336.079 324.066 338.489 cv
324.326 339.84 324.386 341.199 324.396 342.38 cv
cp
.94902 .635294 .32549 rgb
f
306.119 327.048 mo
306.093 327.048 306.066 327.045 306.041 327.039 cv
297.052 324.811 li
296.936 324.781 296.846 324.691 296.816 324.577 cv
296.787 324.462 296.822 324.34 296.91 324.259 cv
300.625 320.817 li
300.755 320.695 300.961 320.702 301.083 320.835 cv
301.204 320.966 301.196 321.171 301.065 321.292 cv
297.789 324.326 li
306.196 326.41 li
306.37 326.454 306.475 326.629 306.432 326.803 cv
306.396 326.95 306.264 327.048 306.119 327.048 cv
cp
.360784 .411765 .647059 rgb
f
324.396 342.38 mo
324.396 342.85 324.156 343.279 323.716 343.329 cv
321.196 343.619 306.736 343.729 303.006 343.419 cv
303.006 343.419 272.546 336.85 271.966 335.77 cv
271.766 335.409 271.786 333.31 271.946 330.64 cv
303.506 338.489 li
324.066 338.489 li
324.326 339.84 324.386 341.199 324.396 342.38 cv
cp
.34902 .666667 .776471 rgb
f
340.433 191.679 mo
326.919 167.889 li
307.582 174.575 li
307.582 174.575 312.995 194.689 330.962 200 cv
342.591 203.438 340.433 191.679 340.433 191.679 cv
cp
.698039 .403922 .337255 rgb
f
309.822 183.46 mo
310.232 184.35 310.662 185.21 311.102 186.03 cv
330.962 172.44 li
323.982 160.95 318.137 150.491 318.137 150.491 cv
306.422 151.02 li
306.422 151.02 301.892 166.21 309.822 183.46 cv
cp
.25098 .313726 .498039 rgb
f
342.694 192.766 mo
342.694 192.766 349.586 197.73 349.641 199.941 cv
349.696 202.151 347.604 203.969 347.604 203.969 cv
347.604 203.969 350.187 207.893 348.473 208.994 cv
346.76 210.097 344.707 208.054 344.138 208.327 cv
343.568 208.601 337.436 212.073 335.469 211.456 cv
333.503 210.839 328.223 197.879 329.46 195.014 cv
330.697 192.147 335.697 188.697 342.694 192.766 cv
cp
.698039 .403922 .337255 rgb
f
342.296 205.667 mo
341.795 205.667 341.354 205.592 341.028 205.406 cv
340.673 205.206 340.436 204.895 340.322 204.482 cv
339.938 203.081 341.182 200.891 341.235 200.798 cv
341.324 200.643 341.522 200.59 341.677 200.678 cv
341.832 200.767 341.885 200.965 341.796 201.12 cv
341.472 201.687 340.687 203.364 340.946 204.312 cv
341.013 204.555 341.144 204.729 341.346 204.844 cv
342.51 205.501 346.167 204.22 347.479 203.67 cv
347.645 203.604 347.834 203.679 347.902 203.844 cv
347.971 204.009 347.894 204.198 347.729 204.267 cv
347.318 204.439 344.319 205.667 342.296 205.667 cv
cp
0 0 0 rgb
f
344.137 208.65 mo
344.081 208.65 344.024 208.636 343.973 208.605 cv
343.433 208.285 338.695 205.414 338.481 203.308 cv
338.294 201.47 340.362 200.757 341.481 200.637 cv
341.66 200.624 341.818 200.747 341.837 200.924 cv
341.856 201.102 341.728 201.261 341.55 201.28 cv
341.524 201.283 338.956 201.584 339.125 203.243 cv
339.278 204.753 342.915 207.225 344.303 208.049 cv
344.457 208.141 344.507 208.339 344.416 208.492 cv
344.355 208.594 344.248 208.65 344.137 208.65 cv
cp
f
339.656 210.839 mo
339.586 210.839 339.515 210.816 339.456 210.77 cv
338.726 210.192 335.093 207.235 335.214 205.704 cv
335.35 203.995 339.06 204.235 339.483 204.269 cv
339.661 204.282 339.794 204.438 339.78 204.616 cv
339.766 204.794 339.609 204.935 339.432 204.913 cv
338.292 204.825 335.925 204.914 335.859 205.755 cv
335.787 206.676 338.273 209.008 339.857 210.262 cv
339.997 210.373 340.021 210.576 339.91 210.717 cv
339.846 210.797 339.751 210.839 339.656 210.839 cv
cp
f
333.282 208.901 mo
333.104 208.901 332.958 208.757 332.958 208.579 cv
332.957 207.739 333.214 207.151 333.724 206.832 cv
334.745 206.194 336.373 206.973 336.443 207.006 cv
336.603 207.084 336.669 207.278 336.591 207.438 cv
336.514 207.6 336.321 207.665 336.159 207.588 cv
335.779 207.403 334.662 207.006 334.066 207.381 cv
333.759 207.574 333.604 207.977 333.605 208.577 cv
333.605 208.757 333.436 208.931 333.282 208.901 cv
cp
f
332.031 174.038 mo
312.836 185.12 li
311.597 185.834 310.014 185.41 309.299 184.172 cv
308.584 182.934 309.009 181.351 310.247 180.636 cv
329.442 169.553 li
330.68 168.838 332.264 169.263 332.979 170.501 cv
333.693 171.739 333.269 173.322 332.031 174.038 cv
cp
.360784 .411765 .647059 rgb
f
314.346 301.814 mo
314.491 319.445 li
331.513 315.652 li
334.815 301.581 li
314.346 301.814 li
cp
.698039 .403922 .337255 rgb
f
285.517 189.817 mo
285.517 189.817 284.246 201.453 283.721 212.873 cv
283.218 223.83 280.278 247.231 279.902 251.6 cv
279.526 255.968 269.59 307.967 269.59 307.967 cv
269.59 307.967 279.068 310.052 288.034 311.06 cv
295.306 311.877 301.892 312.563 301.892 312.563 cv
301.892 312.563 312.333 258.864 311.974 242.795 cv
311.616 226.726 311.408 190.746 311.408 190.746 cv
285.517 189.817 li
cp
.498039 .647059 .866667 rgb
f
314.745 187.682 mo
314.745 187.682 339.13 220.33 342.7 238.81 cv
346.414 258.036 343.427 305.156 343.427 305.156 cv
310.324 305.646 li
310.874 250.455 li
285.517 189.817 li
314.745 187.682 li
cp
.572549 .705882 .917647 rgb
f
311.115 248.542 mo
311.115 248.542 287.41 221.748 285.517 211.335 cv
283.721 201.453 283.529 188.325 283.529 188.325 cv
311.408 190.746 li
316.979 225.394 li
311.115 248.542 li
cp
f
310.776 260.589 mo
310.599 260.589 310.454 260.446 310.453 260.269 cv
310.424 257.424 310.248 249.796 309.779 248.676 cv
309.304 247.539 297.373 231.86 292.816 225.916 cv
292.708 225.773 292.734 225.57 292.876 225.462 cv
293.017 225.354 293.221 225.38 293.33 225.521 cv
294 226.397 309.771 246.98 310.376 248.426 cv
310.979 249.866 311.089 259.202 311.099 260.263 cv
311.101 260.441 310.958 260.587 310.779 260.589 cv
310.778 260.589 310.777 260.589 310.776 260.589 cv
cp
.968627 .701961 .411765 rgb
f
315.44 244.05 mo
314.065 244.05 311.846 245.834 310.479 247.118 cv
313.079 246.457 316.124 245.397 316.327 244.608 cv
316.337 244.566 316.363 244.468 316.17 244.299 cv
315.973 244.126 315.725 244.05 315.44 244.05 cv
cp
309.435 248.022 mo
309.32 248.022 309.211 247.962 309.153 247.858 cv
309.083 247.735 309.102 247.581 309.199 247.478 cv
309.735 246.908 314.498 241.968 316.597 243.813 cv
317.003 244.168 317.015 244.529 316.953 244.77 cv
316.538 246.388 310.675 247.757 309.504 248.015 cv
309.481 248.021 309.458 248.022 309.435 248.022 cv
cp
f
291.053 207.904 mo
290.517 207.904 289.953 207.853 289.361 207.749 cv
289.186 207.719 289.067 207.551 289.098 207.375 cv
289.129 207.199 289.294 207.078 289.473 207.112 cv
291.574 207.476 293.283 207.146 294.554 206.126 cv
296.772 204.344 296.944 201.017 296.946 200.983 cv
296.954 200.806 297.09 200.664 297.283 200.674 cv
297.461 200.682 297.6 200.833 297.592 201.012 cv
297.586 201.159 297.409 204.658 294.962 206.627 cv
293.907 207.477 292.596 207.904 291.053 207.904 cv
cp
f
282.708 196.447 mo
282.708 196.447 310.32 197.872 321.684 193.458 cv
321.139 180.854 li
321.139 180.854 326.49 153.004 313.772 145.267 cv
308.021 141.768 298.899 143.197 298.899 143.197 cv
280.115 169.8 li
282.708 196.447 li
cp
.25098 .313726 .498039 rgb
f
279.691 205.933 mo
285.457 167.889 li
264.031 167.889 li
264.031 167.889 263.505 195.309 265.798 203.802 cv
268.724 214.633 279.691 205.933 279.691 205.933 cv
cp
.698039 .403922 .337255 rgb
f
280.135 207.041 mo
280.135 207.041 281.865 215.357 280.413 217.024 cv
278.961 218.691 276.732 220.124 276.732 220.124 cv
276.732 220.124 275.621 224.352 273.613 224.008 cv
271.605 223.663 271.294 219.676 270.69 219.493 cv
270.085 219.31 263.218 217.729 262.184 215.946 cv
261.15 214.163 266.009 201.039 268.857 199.761 cv
271.705 198.483 277.723 199.315 280.135 207.041 cv
cp
f
277.353 220.021 mo
277.321 220.021 277.289 220.017 277.257 220.007 cv
277.086 219.954 276.991 219.772 277.044 219.602 cv
279.382 212.096 li
279.435 211.926 279.613 211.829 279.788 211.884 cv
279.958 211.937 280.053 212.118 280 212.289 cv
277.662 219.795 li
277.619 219.933 277.491 220.021 277.353 220.021 cv
cp
0 0 0 rgb
f
286.619 183.15 mo
291.516 178.375 li
291.516 178.375 305.202 158.63 300.742 151.83 cv
299.622 150.13 300.552 144.11 298.902 143.2 cv
298.902 143.2 288.483 143.937 281.712 147.33 cv
266.697 154.853 261.682 174.618 261.532 175.688 cv
286.619 183.15 li
cp
.25098 .313726 .498039 rgb
f
287.599 172.361 mo
287.471 172.361 287.35 172.397 287.229 172.47 cv
286.113 173.141 285.507 176.411 285.272 178.406 cv
286.608 176.893 288.654 174.249 288.403 172.981 cv
288.354 172.729 288.208 172.557 287.946 172.441 cv
287.824 172.388 287.709 172.361 287.599 172.361 cv
cp
284.855 179.662 mo
284.811 179.662 284.766 179.652 284.724 179.633 cv
284.599 179.578 284.523 179.45 284.533 179.314 cv
284.58 178.674 285.049 173.025 286.896 171.915 cv
287.299 171.672 287.752 171.649 288.207 171.85 cv
288.66 172.049 288.947 172.397 289.038 172.856 cv
289.453 174.958 285.537 179.097 285.088 179.563 cv
285.026 179.627 284.941 179.662 284.855 179.662 cv
cp
.639216 .482353 .564706 rgb
f
310.182 126.68 mo
310.182 126.68 315.515 120.084 313.276 117.467 cv
311.039 114.85 307.579 117.467 307.579 117.467 cv
307.579 117.467 307.388 114.371 303.938 114.69 cv
300.487 115.01 298.408 118.687 298.408 118.687 cv
298.408 118.687 295.372 115.649 293.293 118.687 cv
291.215 121.725 292.654 126.68 292.654 126.68 cv
292.654 126.68 290.255 126.325 290.895 129.141 cv
291.535 131.956 295.306 134.858 295.306 134.858 cv
310.182 126.68 li
cp
0 0 0 rgb
f
298.508 137.065 mo
298.408 144.504 li
298.408 144.504 299.72 146.66 304.067 147.072 cv
307.305 147.38 308.454 146.662 308.454 146.662 cv
308.053 142.889 li
307.657 139.209 li
299.822 137.375 li
298.508 137.065 li
cp
.698039 .403922 .337255 rgb
f
299.822 137.375 mo
299.838 137.578 299.913 137.819 300.029 138.095 cv
301.643 141.833 306.183 142.696 308.053 142.889 cv
307.657 139.209 li
299.822 137.375 li
cp
0 0 0 rgb
f
309.544 122.276 mo
309.544 122.276 313.322 131.655 311.713 136.816 cv
310.104 141.977 305.388 141.021 302.581 139.933 cv
299.773 138.845 298.507 137.067 298.507 137.067 cv
298.507 137.067 295.832 137.888 294.131 135.373 cv
292.43 132.858 293.604 130.06 295.135 129.456 cv
296.667 128.851 298.434 129.996 298.434 129.996 cv
297.102 127.263 li
297.102 127.263 303.431 113.757 309.544 122.276 cv
cp
.698039 .403922 .337255 rgb
f
298.108 134.036 mo
298.042 134.036 297.974 134.015 297.917 133.972 cv
295.114 131.898 li
294.97 131.792 294.94 131.589 295.046 131.446 cv
295.152 131.302 295.354 131.271 295.499 131.378 cv
298.301 133.452 li
298.445 133.558 298.475 133.761 298.369 133.904 cv
298.306 133.99 298.208 134.036 298.108 134.036 cv
cp
0 0 0 rgb
f
295.055 133.953 mo
294.909 133.953 294.777 133.853 294.741 133.705 cv
294.699 133.532 294.805 133.357 294.979 133.314 cv
297.193 132.776 li
297.364 132.732 297.542 132.841 297.584 133.015 cv
297.626 133.188 297.52 133.363 297.346 133.405 cv
295.131 133.943 li
295.106 133.95 295.08 133.953 295.055 133.953 cv
cp
f
303.51 126.618 mo
303.474 126.618 303.437 126.611 303.401 126.599 cv
303.233 126.539 303.145 126.354 303.205 126.186 cv
303.765 124.613 305.136 124.423 305.781 124.541 cv
305.957 124.573 306.074 124.742 306.042 124.918 cv
306.009 125.093 305.834 125.206 305.667 125.178 cv
305.61 125.169 304.326 124.966 303.814 126.402 cv
303.767 126.535 303.643 126.618 303.51 126.618 cv
cp
f
310.484 125.891 mo
310.41 125.891 310.336 125.866 310.275 125.814 cv
309.766 125.381 309.532 125.286 309.459 125.265 cv
309.355 125.298 309.235 125.278 309.146 125.2 cv
309.013 125.082 309 124.877 309.118 124.743 cv
309.5 124.309 310.367 125.044 310.694 125.321 cv
310.83 125.437 310.847 125.641 310.731 125.777 cv
310.667 125.852 310.576 125.891 310.484 125.891 cv
cp
f
309.136 132.951 mo
309.067 132.951 308.999 132.929 308.94 132.884 cv
308.798 132.776 308.771 132.573 308.879 132.431 cv
309.599 131.487 308.279 129.706 307.71 129.098 cv
307.588 128.968 307.594 128.763 307.725 128.641 cv
307.855 128.52 308.059 128.526 308.182 128.655 cv
308.28 128.761 310.591 131.252 309.394 132.823 cv
309.33 132.907 309.233 132.951 309.136 132.951 cv
cp
f
309.743 129.629 mo
309.585 129.629 309.446 129.513 309.423 129.352 cv
309.173 127.601 li
309.147 127.424 309.271 127.26 309.447 127.235 cv
309.629 127.215 309.789 127.333 309.813 127.509 cv
310.064 129.26 li
310.089 129.437 309.966 129.601 309.79 129.626 cv
309.774 129.628 309.758 129.629 309.743 129.629 cv
cp
f
304.616 129.637 mo
304.447 129.637 304.305 129.505 304.294 129.333 cv
304.182 127.568 li
304.17 127.39 304.306 127.236 304.484 127.225 cv
304.645 127.21 304.815 127.348 304.827 127.527 cv
304.939 129.292 li
304.951 129.471 304.815 129.625 304.637 129.636 cv
304.63 129.636 304.624 129.637 304.616 129.637 cv
cp
f
310.299 124.389 mo
310.299 124.389 309.511 122.882 307.656 122.845 cv
305.801 122.807 304.7 124.099 304.7 124.099 cv
304.7 124.099 305.471 127.235 302.926 128.861 cv
300.38 130.486 298.434 129.996 298.434 129.996 cv
296.613 129.319 li
295.306 126.626 li
300.678 120.992 li
307.579 117.467 li
311.029 120.685 li
310.299 124.389 li
cp
f
307.133 135.891 mo
306.662 135.891 305.199 135.767 304.527 134.283 cv
304.454 134.12 304.526 133.928 304.689 133.854 cv
304.852 133.781 305.043 133.853 305.117 134.016 cv
305.715 135.338 307.165 135.244 307.228 135.241 cv
307.41 135.221 307.561 135.361 307.575 135.538 cv
307.589 135.716 307.457 135.871 307.279 135.886 cv
307.268 135.887 307.215 135.891 307.133 135.891 cv
cp
f
282.807 184.75 mo
261.425 178.912 li
260.045 178.535 259.232 177.112 259.609 175.732 cv
259.986 174.353 261.409 173.541 262.789 173.917 cv
284.17 179.755 li
285.55 180.131 286.363 181.555 285.986 182.934 cv
285.609 184.313 284.186 185.126 282.807 184.75 cv
cp
.360784 .411765 .647059 rgb
f
305.166 147.271 mo
300.885 147.271 298.125 144.619 298.009 144.505 cv
297.881 144.38 297.879 144.176 298.003 144.048 cv
298.128 143.92 298.333 143.917 298.461 144.042 cv
298.487 144.069 301.173 146.656 305.24 146.625 cv
308.327 146.601 309.395 145.13 309.405 145.115 cv
309.507 144.97 309.708 144.933 309.855 145.034 cv
310.001 145.135 310.039 145.334 309.938 145.481 cv
309.89 145.554 308.697 147.245 305.245 147.271 cv
305.219 147.271 305.192 147.271 305.166 147.271 cv
cp
.639216 .482353 .564706 rgb
f
364.297 336.953 mo
363.122 337.42 313.984 336.608 312.934 334.574 cv
312.632 333.992 312.48 332.118 312.426 329.736 cv
312.432 329.617 312.428 329.489 312.425 329.37 cv
312.301 323.352 312.714 314.419 312.714 314.419 cv
312.714 314.419 313.078 311.324 313.542 309.991 cv
314.144 308.253 336.332 310.178 336.332 310.178 cv
351.064 324.076 li
351.064 324.076 355.313 323.449 359.877 324.484 cv
362.296 325.018 363.717 328.341 364.351 331.445 cv
364.404 331.687 364.448 331.917 364.483 332.147 cv
364.909 334.61 364.811 336.739 364.297 336.953 cv
cp
.968627 .701961 .411765 rgb
f
347.988 321.085 mo
347.971 321.085 347.955 321.084 347.938 321.081 cv
338.785 319.675 li
338.667 319.657 338.569 319.576 338.529 319.464 cv
338.489 319.353 338.514 319.228 338.594 319.139 cv
341.984 315.375 li
342.104 315.243 342.309 315.232 342.44 315.352 cv
342.573 315.471 342.584 315.676 342.464 315.809 cv
339.476 319.127 li
348.037 320.442 li
348.213 320.469 348.334 320.634 348.307 320.811 cv
348.283 320.971 348.145 321.085 347.988 321.085 cv
cp
.360784 .411765 .647059 rgb
f
364.297 336.953 mo
363.122 337.42 313.984 336.608 312.934 334.574 cv
312.632 333.992 312.48 332.118 312.426 329.736 cv
364.483 332.147 li
364.909 334.61 364.811 336.739 364.297 336.953 cv
cp
.407843 .713726 .847059 rgb
f
215.315 204.593 mo
215.315 204.593 205.61 191.887 202.16 181.572 cv
198.709 171.257 203.792 163.362 203.792 163.362 cv
218.682 169.524 li
229.136 204.974 li
219.328 209.04 li
215.315 204.593 li
cp
.698039 .403922 .337255 rgb
f
199.792 186.46 mo
200.052 187.63 200.352 188.75 200.682 189.82 cv
210.262 186.2 li
222.962 180.69 li
222.942 180.63 222.922 180.58 222.902 180.52 cv
218.402 167.62 217.962 159.08 217.962 159.08 cv
203.302 154.03 li
203.302 154.03 195.672 167.92 199.792 186.46 cv
cp
.25098 .313726 .498039 rgb
f
229.958 202.482 mo
229.958 202.482 235.648 208.79 235.236 210.962 cv
234.824 213.134 232.395 214.47 232.395 214.47 cv
232.395 214.47 234.092 218.849 232.185 219.565 cv
230.278 220.282 228.702 217.852 228.087 217.999 cv
227.473 218.146 220.747 220.247 218.954 219.229 cv
217.162 218.212 214.733 204.431 216.547 201.89 cv
218.361 199.349 223.977 197.03 229.958 202.482 cv
cp
.698039 .403922 .337255 rgb
f
228.624 215.168 mo
227.416 215.168 226.248 215.009 225.664 214.488 cv
225.359 214.218 225.192 213.863 225.169 213.437 cv
225.106 212.3 226.122 210.9 226.6 210.309 cv
225.48 209.515 221.772 206.561 222.424 202.684 cv
222.454 202.507 222.623 202.393 222.797 202.418 cv
222.973 202.448 223.092 202.615 223.062 202.791 cv
222.382 206.83 227.203 209.939 227.251 209.97 cv
227.332 210.021 227.386 210.104 227.398 210.199 cv
227.412 210.294 227.382 210.389 227.318 210.46 cv
226.882 210.945 225.76 212.42 225.815 213.401 cv
225.829 213.653 225.92 213.851 226.093 214.006 cv
227.092 214.894 230.938 214.413 232.335 214.151 cv
232.513 214.125 232.681 214.234 232.713 214.41 cv
232.746 214.586 232.63 214.755 232.455 214.788 cv
232.134 214.848 230.338 215.168 228.624 215.168 cv
cp
0 0 0 rgb
f
228.087 218.322 mo
228.008 218.322 227.93 218.294 227.867 218.236 cv
227.407 217.809 223.381 214.003 223.616 211.899 cv
223.821 210.063 225.996 209.805 227.112 209.922 cv
227.29 209.94 227.418 210.1 227.4 210.277 cv
227.381 210.455 227.22 210.595 227.044 210.564 cv
227.017 210.563 224.444 210.315 224.259 211.972 cv
224.09 213.479 227.125 216.663 228.308 217.762 cv
228.438 217.884 228.446 218.088 228.324 218.219 cv
228.261 218.288 228.174 218.322 228.087 218.322 cv
cp
f
223.246 219.517 mo
223.152 219.517 223.06 219.477 222.996 219.399 cv
222.404 218.681 219.477 215.024 219.917 213.553 cv
220.412 211.911 223.988 212.929 224.393 213.051 cv
224.564 213.102 224.661 213.282 224.61 213.453 cv
224.559 213.625 224.376 213.722 224.208 213.67 cv
223.116 213.345 220.78 212.931 220.538 213.738 cv
220.272 214.624 222.211 217.428 223.495 218.987 cv
223.609 219.126 223.589 219.329 223.451 219.443 cv
223.391 219.492 223.318 219.517 223.246 219.517 cv
cp
f
217.423 216.278 mo
217.401 216.278 217.378 216.276 217.355 216.271 cv
217.181 216.234 217.069 216.063 217.106 215.888 cv
217.282 215.066 217.658 214.546 218.224 214.342 cv
219.356 213.929 220.784 215.037 220.844 215.085 cv
220.984 215.195 221.009 215.398 220.898 215.538 cv
220.788 215.68 220.584 215.703 220.444 215.594 cv
220.111 215.333 219.102 214.713 218.443 214.95 cv
218.101 215.074 217.865 215.435 217.739 216.022 cv
217.707 216.175 217.573 216.278 217.423 216.278 cv
cp
f
168.972 265.389 mo
151.366 266.347 li
155.94 283.176 li
170.148 285.825 li
168.972 265.389 li
cp
.698039 .403922 .337255 rgb
f
223.755 182.724 mo
203.049 190.632 li
201.714 191.142 200.217 190.473 199.707 189.137 cv
199.197 187.801 199.866 186.305 201.202 185.795 cv
221.908 177.887 li
223.243 177.376 224.74 178.046 225.25 179.381 cv
225.76 180.717 225.091 182.213 223.755 182.724 cv
cp
.360784 .411765 .647059 rgb
f
180.385 310.351 mo
180.385 329.497 li
198.09 323.312 li
199.729 308.951 li
180.385 310.351 li
cp
.698039 .403922 .337255 rgb
f
229.306 343.42 mo
228.131 343.887 178.993 343.075 177.943 341.041 cv
177.641 340.459 177.489 338.585 177.435 336.203 cv
177.44 336.084 177.438 335.956 177.434 335.837 cv
177.31 329.818 177.724 320.886 177.724 320.886 cv
177.724 320.886 178.086 317.791 178.551 316.458 cv
179.153 314.72 201.341 316.644 201.341 316.644 cv
216.073 330.543 li
216.073 330.543 220.322 329.916 224.886 330.951 cv
227.306 331.483 228.726 334.808 229.36 337.912 cv
229.413 338.153 229.457 338.384 229.492 338.614 cv
229.918 341.077 229.819 343.205 229.306 343.42 cv
cp
.968627 .701961 .411765 rgb
f
212.997 327.552 mo
212.98 327.552 212.964 327.551 212.947 327.548 cv
203.794 326.142 li
203.677 326.124 203.579 326.043 203.539 325.931 cv
203.499 325.819 203.523 325.694 203.603 325.605 cv
206.993 321.842 li
207.113 321.711 207.318 321.699 207.449 321.818 cv
207.582 321.938 207.593 322.143 207.473 322.275 cv
204.485 325.594 li
213.046 326.909 li
213.222 326.936 213.343 327.101 213.316 327.277 cv
213.292 327.438 213.154 327.552 212.997 327.552 cv
cp
.360784 .411765 .647059 rgb
f
229.306 343.42 mo
228.131 343.887 178.993 343.075 177.943 341.041 cv
177.641 340.459 177.489 338.585 177.435 336.203 cv
229.492 338.614 li
229.918 341.077 229.819 343.205 229.306 343.42 cv
cp
.407843 .713726 .847059 rgb
f
134.846 314.708 mo
134.382 313.532 135.293 264.396 137.33 263.35 cv
137.912 263.049 139.786 262.901 142.168 262.852 cv
142.287 262.857 142.416 262.854 142.535 262.851 cv
148.554 262.739 157.485 263.171 157.485 263.171 cv
157.485 263.171 160.579 263.54 161.911 264.008 cv
163.648 264.613 161.679 286.797 161.679 286.797 cv
147.75 301.501 li
147.75 301.501 148.369 305.751 147.324 310.313 cv
146.786 312.731 143.459 314.145 140.354 314.772 cv
140.113 314.825 139.882 314.869 139.651 314.903 cv
137.188 315.324 135.06 315.222 134.846 314.708 cv
cp
.968627 .701961 .411765 rgb
f
151.071 298.754 mo
151.055 298.754 151.038 298.753 151.021 298.75 cv
150.844 298.723 150.724 298.558 150.751 298.381 cv
152.176 289.23 li
152.195 289.113 152.276 289.015 152.388 288.976 cv
152.5 288.934 152.625 288.96 152.713 289.04 cv
156.469 292.438 li
156.602 292.558 156.612 292.763 156.492 292.895 cv
156.373 293.026 156.167 293.037 156.036 292.918 cv
152.724 289.922 li
151.391 298.48 li
151.366 298.64 151.228 298.754 151.071 298.754 cv
cp
.360784 .411765 .647059 rgb
f
134.846 314.708 mo
134.382 313.532 135.293 264.396 137.33 263.35 cv
137.912 263.049 139.786 262.901 142.168 262.852 cv
139.651 314.903 li
137.188 315.324 135.06 315.222 134.846 314.708 cv
cp
.407843 .713726 .847059 rgb
f
181.844 191.332 mo
181.844 191.332 179.563 211.53 178.896 223.214 cv
178.271 234.166 177.692 256.646 177.367 261.018 cv
177.042 265.39 174.578 313.749 174.578 313.749 cv
174.578 313.749 183.834 313.432 192.856 313.601 cv
201.877 313.769 207.75 313.601 207.75 313.601 cv
207.75 313.601 215.769 261.979 215.225 245.915 cv
214.68 229.852 210.085 192.797 210.085 192.797 cv
181.844 191.332 li
cp
.498039 .647059 .866667 rgb
f
200.834 256.116 mo
200.834 256.116 187.286 235.049 182.751 222.228 cv
177.938 208.618 180.385 189.961 180.385 189.961 cv
212.699 191.236 li
210.085 246.804 li
200.834 256.116 li
cp
.572549 .705882 .917647 rgb
f
211.581 192.376 mo
211.581 192.376 243.549 262.527 225.329 277.078 cv
207.108 291.628 165.073 289.733 165.073 289.733 cv
163.162 258.944 li
201.724 246.804 li
203.63 194.61 li
211.581 192.376 li
cp
f
197.354 248.115 mo
200.118 249.568 205.307 251.929 207.178 251.1 cv
207.511 250.953 207.713 250.708 207.795 250.351 cv
207.877 249.992 207.807 249.7 207.573 249.433 cv
206.252 247.917 200.499 247.927 197.354 248.115 cv
cp
206.209 251.908 mo
202.747 251.908 196.378 248.327 196.073 248.154 cv
195.95 248.085 195.886 247.943 195.916 247.805 cv
195.946 247.666 196.063 247.563 196.204 247.551 cv
196.604 247.514 206.043 246.693 208.061 249.007 cv
208.432 249.433 208.555 249.934 208.426 250.495 cv
208.296 251.059 207.964 251.461 207.438 251.692 cv
207.098 251.842 206.68 251.908 206.209 251.908 cv
cp
.968627 .701961 .411765 rgb
f
187.768 211.28 mo
187.231 211.28 186.667 211.229 186.075 211.125 cv
185.899 211.095 185.781 210.927 185.812 210.751 cv
185.843 210.575 186.011 210.453 186.187 210.488 cv
188.287 210.854 189.997 210.522 191.268 209.502 cv
193.486 207.721 193.659 204.394 193.66 204.36 cv
193.668 204.183 193.804 204.042 193.998 204.051 cv
194.176 204.059 194.314 204.209 194.307 204.388 cv
194.3 204.536 194.124 208.035 191.677 210.004 cv
190.621 210.854 189.311 211.28 187.768 211.28 cv
cp
f
184.755 181.178 mo
184.692 181.178 184.611 181.195 184.511 181.254 cv
183.311 181.954 182.085 186.252 181.429 189.073 cv
183.294 186.248 185.418 182.494 185.058 181.396 cv
185.022 181.289 184.966 181.229 184.868 181.197 cv
184.838 181.187 184.801 181.178 184.755 181.178 cv
cp
180.763 190.946 mo
180.72 190.946 180.677 190.938 180.636 190.92 cv
180.496 190.86 180.417 190.71 180.446 190.561 cv
180.62 189.672 182.2 181.853 184.186 180.695 cv
184.478 180.524 184.783 180.487 185.073 180.583 cv
185.366 180.681 185.573 180.892 185.673 181.195 cv
186.335 183.214 181.573 190.038 181.027 190.809 cv
180.965 190.897 180.866 190.946 180.763 190.946 cv
cp
1 1 1 rgb
f
178.472 197.859 mo
178.472 197.859 204.964 203.567 216.328 199.155 cv
217.422 182.174 li
217.422 182.174 223.989 155.028 211.271 147.291 cv
205.52 143.792 196.398 145.221 196.398 145.221 cv
176.628 172.6 li
178.472 197.859 li
cp
.25098 .313726 .498039 rgb
f
182.799 211.289 mo
182.799 211.289 183.529 219.752 181.89 221.235 cv
180.25 222.718 177.868 223.876 177.868 223.876 cv
177.868 223.876 176.263 227.941 174.31 227.361 cv
172.357 226.782 172.521 222.785 171.943 222.532 cv
171.365 222.278 164.733 219.895 163.918 218.001 cv
163.103 216.108 169.484 203.653 172.464 202.723 cv
175.443 201.792 181.32 203.332 182.799 211.289 cv
cp
.698039 .403922 .337255 rgb
f
178.535 223.851 mo
178.49 223.851 178.445 223.842 178.402 223.822 cv
178.239 223.75 178.167 223.559 178.239 223.396 cv
181.452 216.22 li
181.525 216.057 181.717 215.982 181.879 216.057 cv
182.042 216.129 182.115 216.32 182.042 216.483 cv
178.83 223.659 li
178.776 223.779 178.658 223.851 178.535 223.851 cv
cp
0 0 0 rgb
f
176.523 174.898 mo
176.437 174.898 176.347 174.914 176.25 174.943 cv
175.974 175.029 175.808 175.186 175.728 175.436 cv
175.327 176.675 177.018 179.538 178.151 181.198 cv
178.165 179.179 177.97 175.841 176.949 175.05 cv
176.817 174.948 176.678 174.898 176.523 174.898 cv
cp
178.449 182.498 mo
178.349 182.498 178.252 182.451 178.19 182.368 cv
177.805 181.854 174.449 177.287 175.112 175.237 cv
175.257 174.789 175.583 174.474 176.057 174.326 cv
176.529 174.178 176.974 174.252 177.345 174.539 cv
179.039 175.852 178.804 181.545 178.772 182.19 cv
178.765 182.326 178.673 182.443 178.543 182.483 cv
178.512 182.493 178.48 182.498 178.449 182.498 cv
cp
1 1 1 rgb
f
168.596 206.902 mo
168.596 206.902 160.68 193.011 158.642 182.327 cv
156.604 171.643 162.698 164.5 162.698 164.5 cv
176.628 172.6 li
182.242 209.13 li
171.978 211.847 li
168.596 206.902 li
cp
.698039 .403922 .337255 rgb
f
180.412 184.23 mo
180.262 183.12 li
180.262 183.12 201.892 160.9 197.092 154.34 cv
195.892 152.7 198.102 146.05 196.402 145.22 cv
196.402 145.22 184.192 145.74 177.812 149.81 cv
168.852 155.55 159.142 164.5 155.309 174.253 cv
180.412 184.23 li
cp
.25098 .313726 .498039 rgb
f
182.78 173.809 mo
182.685 173.809 182.588 173.83 182.49 173.872 cv
181.292 174.381 180.236 177.534 179.725 179.478 cv
181.259 178.165 183.653 175.832 183.582 174.542 cv
183.568 174.285 183.448 174.095 183.204 173.944 cv
183.059 173.854 182.919 173.809 182.78 173.809 cv
cp
179.183 180.666 mo
179.123 180.666 179.063 180.649 179.011 180.616 cv
178.896 180.543 178.837 180.406 178.867 180.273 cv
179.002 179.646 180.254 174.118 182.237 173.276 cv
182.67 173.092 183.123 173.133 183.545 173.394 cv
183.966 173.654 184.202 174.039 184.228 174.506 cv
184.346 176.646 179.891 180.198 179.382 180.597 cv
179.324 180.642 179.253 180.666 179.183 180.666 cv
cp
.639216 .482353 .564706 rgb
f
208.834 128.447 mo
208.834 128.447 214.168 121.852 211.93 119.234 cv
209.692 116.617 206.232 119.234 206.232 119.234 cv
206.232 119.234 206.042 116.138 202.591 116.457 cv
199.141 116.777 197.061 120.454 197.061 120.454 cv
197.061 120.454 194.025 117.417 191.947 120.454 cv
189.868 123.491 191.307 128.447 191.307 128.447 cv
191.307 128.447 188.909 128.092 189.548 130.908 cv
190.188 133.723 193.959 136.625 193.959 136.625 cv
208.834 128.447 li
cp
0 0 0 rgb
f
197.162 138.833 mo
197.061 146.271 li
197.061 146.271 198.374 148.427 202.72 148.84 cv
205.958 149.147 207.107 148.429 207.107 148.429 cv
206.706 144.656 li
206.31 140.976 li
198.476 139.142 li
197.162 138.833 li
cp
.698039 .403922 .337255 rgb
f
198.476 139.142 mo
198.492 139.345 198.566 139.586 198.682 139.862 cv
200.296 143.601 204.836 144.463 206.706 144.656 cv
206.31 140.976 li
198.476 139.142 li
cp
0 0 0 rgb
f
208.197 124.043 mo
208.197 124.043 211.976 133.422 210.367 138.583 cv
208.758 143.744 204.041 142.788 201.234 141.7 cv
198.426 140.612 197.16 138.834 197.16 138.834 cv
197.16 138.834 194.485 139.655 192.784 137.14 cv
191.083 134.625 192.256 131.827 193.788 131.223 cv
195.32 130.618 197.087 131.763 197.087 131.763 cv
195.755 129.03 li
195.755 129.03 202.084 115.524 208.197 124.043 cv
cp
.698039 .403922 .337255 rgb
f
196.762 135.803 mo
196.695 135.803 196.627 135.782 196.57 135.739 cv
193.767 133.666 li
193.624 133.559 193.593 133.356 193.699 133.213 cv
193.805 133.068 194.008 133.038 194.152 133.145 cv
196.955 135.219 li
197.098 135.325 197.128 135.528 197.022 135.671 cv
196.959 135.757 196.861 135.803 196.762 135.803 cv
cp
0 0 0 rgb
f
193.708 135.72 mo
193.562 135.72 193.43 135.62 193.394 135.472 cv
193.352 135.299 193.458 135.124 193.632 135.082 cv
195.847 134.543 li
196.018 134.501 196.195 134.608 196.237 134.782 cv
196.279 134.955 196.173 135.13 195.999 135.172 cv
193.784 135.71 li
193.759 135.717 193.733 135.72 193.708 135.72 cv
cp
f
202.163 128.385 mo
202.127 128.385 202.09 128.378 202.055 128.366 cv
201.886 128.306 201.798 128.121 201.858 127.953 cv
202.418 126.38 203.791 126.19 204.435 126.308 cv
204.61 126.34 204.727 126.509 204.695 126.685 cv
204.662 126.86 204.49 126.973 204.32 126.945 cv
204.263 126.938 202.979 126.733 202.468 128.169 cv
202.42 128.302 202.296 128.385 202.163 128.385 cv
cp
f
209.138 127.658 mo
209.063 127.658 208.989 127.632 208.928 127.581 cv
208.418 127.148 208.185 127.053 208.112 127.032 cv
208.007 127.065 207.887 127.043 207.799 126.966 cv
207.666 126.848 207.653 126.644 207.771 126.509 cv
208.155 126.075 209.021 126.811 209.347 127.087 cv
209.483 127.203 209.5 127.407 209.384 127.543 cv
209.32 127.619 209.229 127.658 209.138 127.658 cv
cp
f
207.79 134.717 mo
207.721 134.717 207.652 134.695 207.593 134.651 cv
207.451 134.542 207.424 134.339 207.532 134.197 cv
208.252 133.254 206.933 131.473 206.363 130.865 cv
206.241 130.735 206.248 130.53 206.378 130.408 cv
206.508 130.286 206.712 130.293 206.835 130.422 cv
206.934 130.528 209.245 133.02 208.047 134.59 cv
207.983 134.673 207.887 134.717 207.79 134.717 cv
cp
f
208.396 131.396 mo
208.238 131.396 208.1 131.28 208.077 131.119 cv
207.826 129.368 li
207.801 129.191 207.924 129.027 208.101 129.002 cv
208.281 128.982 208.442 129.1 208.467 129.276 cv
208.717 131.027 li
208.743 131.204 208.62 131.368 208.443 131.393 cv
208.427 131.395 208.412 131.396 208.396 131.396 cv
cp
f
203.269 131.404 mo
203.1 131.404 202.958 131.272 202.947 131.101 cv
202.835 129.335 li
202.824 129.157 202.959 129.003 203.137 128.992 cv
203.306 128.977 203.469 129.116 203.48 129.294 cv
203.592 131.06 li
203.604 131.238 203.468 131.392 203.29 131.403 cv
203.283 131.403 203.276 131.404 203.269 131.404 cv
cp
f
208.952 126.156 mo
208.952 126.156 208.165 124.649 206.309 124.612 cv
204.454 124.574 203.353 125.866 203.353 125.866 cv
203.353 125.866 204.125 129.002 201.579 130.627 cv
199.033 132.253 197.087 131.763 197.087 131.763 cv
195.266 131.086 li
193.959 128.394 li
199.331 122.759 li
206.232 119.234 li
209.682 122.452 li
208.952 126.156 li
cp
f
205.786 137.658 mo
205.315 137.658 203.852 137.534 203.181 136.05 cv
203.107 135.887 203.18 135.695 203.342 135.622 cv
203.503 135.549 203.696 135.62 203.771 135.783 cv
204.369 137.105 205.819 137.012 205.881 137.008 cv
206.069 136.984 206.214 137.128 206.228 137.305 cv
206.242 137.483 206.11 137.638 205.933 137.653 cv
205.921 137.654 205.869 137.658 205.786 137.658 cv
cp
f
176.512 184.534 mo
155.634 177.092 li
154.287 176.612 153.584 175.131 154.064 173.784 cv
154.544 172.437 156.025 171.734 157.373 172.215 cv
178.25 179.657 li
179.597 180.137 180.3 181.618 179.82 182.964 cv
179.339 184.312 177.858 185.014 176.512 184.534 cv
cp
.360784 .411765 .647059 rgb
f
203.68 149.295 mo
199.359 149.295 196.931 145.94 196.829 145.797 cv
196.726 145.651 196.76 145.45 196.905 145.346 cv
197.052 145.242 197.253 145.277 197.356 145.422 cv
197.379 145.455 199.705 148.68 203.739 148.648 cv
206.826 148.625 207.894 147.154 207.904 147.139 cv
208.006 146.994 208.206 146.957 208.354 147.058 cv
208.5 147.159 208.538 147.358 208.438 147.505 cv
208.389 147.578 207.196 149.269 203.744 149.295 cv
203.723 149.295 203.701 149.295 203.68 149.295 cv
cp
.639216 .482353 .564706 rgb
f
35.1514 282.555 mo
20.1597 291.836 li
32.2412 304.412 li
45.9809 299.927 li
35.1514 282.555 li
cp
.698039 .403922 .337255 rgb
f
64.2988 309.535 mo
64.2988 328.682 li
82.0044 322.496 li
83.6431 308.136 li
64.2988 309.535 li
cp
f
113.223 343.771 mo
112.048 344.237 62.9097 343.426 61.8599 341.392 cv
61.5571 340.81 61.4062 338.936 61.3516 336.554 cv
61.3569 336.435 61.354 336.307 61.3501 336.188 cv
61.2261 330.169 61.6401 321.236 61.6401 321.236 cv
61.6401 321.236 62.0029 318.142 62.4673 316.809 cv
63.0698 315.07 85.2578 316.995 85.2578 316.995 cv
99.9897 330.894 li
99.9897 330.894 104.238 330.267 108.803 331.302 cv
111.222 331.835 112.642 335.158 113.276 338.263 cv
113.329 338.504 113.374 338.734 113.409 338.965 cv
113.834 341.428 113.736 343.557 113.223 343.771 cv
cp
.968627 .701961 .411765 rgb
f
96.9136 327.902 mo
96.897 327.902 96.8809 327.901 96.8638 327.898 cv
87.7104 326.492 li
87.5933 326.475 87.4951 326.394 87.4551 326.281 cv
87.415 326.17 87.4399 326.045 87.5195 325.956 cv
90.9092 322.192 li
91.0298 322.062 91.2344 322.05 91.3657 322.169 cv
91.4985 322.288 91.5093 322.493 91.3896 322.626 cv
88.4014 325.944 li
96.9624 327.26 li
97.1387 327.286 97.2598 327.451 97.2329 327.628 cv
97.2085 327.788 97.0703 327.902 96.9136 327.902 cv
cp
.360784 .411765 .647059 rgb
f
113.223 343.771 mo
112.048 344.237 62.9097 343.426 61.8599 341.392 cv
61.5571 340.81 61.4062 338.936 61.3516 336.554 cv
113.409 338.965 li
113.834 341.428 113.736 343.557 113.223 343.771 cv
cp
.407843 .713726 .847059 rgb
f
30.7358 341.863 mo
29.7578 341.062 6.65966 297.683 7.93066 295.778 cv
8.29296 295.232 9.85937 294.192 11.9165 292.99 cv
12.0234 292.938 12.1338 292.873 12.2363 292.812 cv
17.4414 289.787 25.4556 285.821 25.4556 285.821 cv
25.4556 285.821 28.3389 284.64 29.73 284.399 cv
31.5425 284.084 40.6094 304.427 40.6094 304.427 cv
35.5889 324.048 li
35.5889 324.048 38.1958 327.461 39.5019 331.955 cv
40.2075 334.33 37.9878 337.183 35.5796 339.242 cv
35.395 339.404 35.2143 339.555 35.0298 339.697 cv
33.081 341.264 31.1719 342.208 30.7358 341.863 cv
cp
.968627 .701961 .411765 rgb
f
36.9971 320.074 mo
36.8652 320.074 36.7417 319.993 36.6934 319.863 cv
33.4893 311.174 li
33.4482 311.062 33.4717 310.937 33.5503 310.848 cv
33.6289 310.758 33.7519 310.721 33.8657 310.746 cv
38.8003 311.889 li
38.9746 311.93 39.083 312.103 39.0425 312.277 cv
39.0029 312.451 38.8252 312.559 38.6548 312.52 cv
34.3037 311.512 li
37.3008 319.639 li
37.3623 319.807 37.2768 319.993 37.1089 320.055 cv
37.0723 320.068 37.0342 320.074 36.9971 320.074 cv
cp
.360784 .411765 .647059 rgb
f
30.7358 341.863 mo
29.7578 341.062 6.65966 297.683 7.93066 295.778 cv
8.29296 295.232 9.85937 294.192 11.9165 292.99 cv
35.0298 339.697 li
33.081 341.264 31.1719 342.208 30.7358 341.863 cv
cp
.407843 .713726 .847059 rgb
f
64.2988 198.196 mo
64.2988 198.196 63.1538 210.537 63.6929 221.493 cv
64.2319 232.449 75.7939 248.211 75.4687 252.584 cv
75.1435 256.956 58.4917 312.934 58.4917 312.934 cv
58.4917 312.934 66.3208 314.271 75.3418 314.439 cv
84.3633 314.608 89.8652 314.98 89.8652 314.98 cv
89.8652 314.98 109.635 270.788 110.602 254.744 cv
111.672 236.976 96.7432 189.372 96.7432 189.372 cv
64.2988 198.196 li
cp
.498039 .647059 .866667 rgb
f
97.1206 197.121 mo
97.1206 197.121 105.038 261.724 86.8174 276.274 cv
68.5967 290.824 44.0918 304.412 44.0918 304.412 cv
26.8052 276.274 li
57.479 252.835 li
63.6929 201.549 li
97.1206 197.121 li
cp
.572549 .705882 .917647 rgb
f
58.5933 253.747 mo
60.4961 256.135 62.6172 258.305 63.2402 258.186 cv
63.2573 258.183 63.3032 258.174 63.3433 258.031 cv
63.6694 256.864 60.9629 254.999 58.5933 253.747 cv
cp
63.228 258.833 mo
61.686 258.833 58.2588 254.416 57.2207 253.028 cv
57.1318 252.91 57.1348 252.747 57.228 252.632 cv
57.3213 252.517 57.4805 252.48 57.6147 252.541 cv
58.3345 252.872 64.626 255.846 63.9663 258.205 cv
63.8369 258.667 63.5303 258.79 63.3589 258.821 cv
63.3169 258.829 63.2729 258.833 63.228 258.833 cv
cp
.968627 .701961 .411765 rgb
f
91.6045 270.704 mo
91.5459 270.704 91.4863 270.688 91.4331 270.655 cv
91.2817 270.56 91.2358 270.36 91.331 270.209 cv
99.8945 256.557 98.3989 216.362 98.3828 215.958 cv
98.3779 215.84 98.438 215.729 98.5395 215.668 cv
101.715 213.76 li
101.868 213.666 102.067 213.717 102.159 213.87 cv
102.25 214.023 102.201 214.223 102.048 214.314 cv
99.0366 216.124 li
99.1611 219.517 100.334 257.073 91.8789 270.553 cv
91.8174 270.65 91.7124 270.704 91.6045 270.704 cv
cp
f
61.7983 203.275 mo
61.7983 203.275 89.8188 205.979 101.183 201.565 cv
101.183 201.565 101.892 158.333 92.79 152.172 cv
87.2148 148.397 77.917 150.103 77.917 150.103 cv
59.1323 176.705 li
61.7983 203.275 li
cp
.25098 .313726 .498039 rgb
f
91.395 215.179 mo
91.395 215.179 93.0264 223.515 91.5552 225.165 cv
90.0835 226.814 87.8389 228.221 87.8389 228.221 cv
87.8389 228.221 86.6772 232.435 84.6738 232.067 cv
82.6699 231.699 82.4062 227.708 81.8042 227.519 cv
81.2017 227.328 74.353 225.667 73.3403 223.872 cv
72.3276 222.076 77.3403 209.011 80.2031 207.767 cv
83.0659 206.522 89.0737 207.425 91.395 215.179 cv
cp
.698039 .403922 .337255 rgb
f
88.4643 228.126 mo
88.4311 228.126 88.3975 228.121 88.3647 228.11 cv
88.1948 228.056 88.1016 227.873 88.1567 227.703 cv
90.583 220.225 li
90.6382 220.055 90.8232 219.961 90.9902 220.017 cv
91.1601 220.071 91.2534 220.254 91.1982 220.424 cv
88.772 227.902 li
88.7275 228.039 88.6006 228.126 88.4643 228.126 cv
cp
0 0 0 rgb
f
89.1416 210.669 mo
74.0239 179.333 li
55.3086 184.022 li
55.3086 184.022 54.4751 189.688 56.9751 195.344 cv
59.4751 201 75.7583 214.572 75.7583 214.572 cv
84.3779 215.264 li
89.1416 210.669 li
cp
.698039 .403922 .337255 rgb
f
52.1416 187.49 mo
76.5317 186.08 li
78.6118 186.201 li
78.6118 186.201 85.9219 158.57 79.2417 153.93 cv
77.5718 152.77 79.7915 150.33 77.9219 150.1 cv
71.8218 149.37 62.8188 153.853 58.4751 161.734 cv
53.4429 170.865 51.8716 179.37 52.1416 187.49 cv
cp
.25098 .313726 .498039 rgb
f
75.9936 174.824 mo
75.9287 174.824 75.8603 174.832 75.7871 174.847 cv
75.5049 174.907 75.3257 175.048 75.2222 175.29 cv
74.7095 176.486 76.1304 179.492 77.1064 181.249 cv
77.3057 179.24 77.418 175.899 76.4736 175.017 cv
76.3345 174.887 76.1787 174.824 75.9936 174.824 cv
cp
77.3135 182.572 mo
77.2026 182.572 77.0976 182.515 77.0376 182.417 cv
76.7017 181.87 73.7788 177.015 74.6274 175.035 cv
74.813 174.602 75.1675 174.318 75.6523 174.214 cv
76.1352 174.11 76.5732 174.226 76.9155 174.544 cv
78.4814 176.007 77.7251 181.655 77.6338 182.294 cv
77.6143 182.429 77.5127 182.537 77.3789 182.565 cv
77.3574 182.569 77.335 182.572 77.3135 182.572 cv
cp
.639216 .482353 .564706 rgb
f
90.5644 133.106 mo
90.5644 133.106 95.8975 126.51 93.6597 123.893 cv
91.4214 121.276 87.9619 123.893 87.9619 123.893 cv
87.9619 123.893 87.771 120.796 84.3203 121.116 cv
80.8701 121.436 78.7905 125.113 78.7905 125.113 cv
78.7905 125.113 75.7549 122.075 73.6763 125.113 cv
71.5976 128.15 73.0366 133.106 73.0366 133.106 cv
73.0366 133.106 70.6382 132.751 71.2778 135.566 cv
71.9175 138.382 75.689 141.284 75.689 141.284 cv
90.5644 133.106 li
cp
0 0 0 rgb
f
78.8911 143.491 mo
78.7905 150.93 li
78.7905 150.93 80.103 153.086 84.4502 153.499 cv
87.688 153.806 88.8369 153.088 88.8369 153.088 cv
88.4355 149.315 li
88.0395 145.635 li
80.2051 143.8 li
78.8911 143.491 li
cp
.698039 .403922 .337255 rgb
f
80.2051 143.8 mo
80.2212 144.004 80.2954 144.245 80.4116 144.521 cv
82.0264 148.259 86.5659 149.122 88.4355 149.315 cv
88.0395 145.635 li
80.2051 143.8 li
cp
0 0 0 rgb
f
89.9272 128.702 mo
89.9272 128.702 93.7051 138.081 92.0962 143.242 cv
90.4873 148.403 85.7705 147.446 82.9634 146.358 cv
80.1562 145.271 78.8901 143.493 78.8901 143.493 cv
78.8901 143.493 76.2143 144.314 74.5137 141.799 cv
72.813 139.284 73.9863 136.486 75.5176 135.882 cv
77.0493 135.277 78.8169 136.421 78.8169 136.421 cv
77.4849 133.689 li
77.4849 133.689 83.814 120.183 89.9272 128.702 cv
cp
.698039 .403922 .337255 rgb
f
78.4912 140.461 mo
78.4248 140.461 78.3569 140.44 78.2993 140.398 cv
75.4966 138.324 li
75.353 138.218 75.3227 138.015 75.4287 137.872 cv
75.5347 137.728 75.7378 137.697 75.8813 137.804 cv
78.6841 139.877 li
78.8276 139.984 78.8579 140.187 78.7519 140.33 cv
78.6885 140.416 78.5903 140.461 78.4912 140.461 cv
cp
0 0 0 rgb
f
75.4375 140.378 mo
75.292 140.378 75.1597 140.279 75.1235 140.131 cv
75.0815 139.958 75.188 139.783 75.3618 139.74 cv
77.5762 139.202 li
77.7466 139.161 77.9243 139.267 77.9668 139.44 cv
78.0088 139.614 77.9023 139.789 77.7285 139.831 cv
75.5142 140.369 li
75.4888 140.375 75.4629 140.378 75.4375 140.378 cv
cp
f
83.8926 133.043 mo
83.8564 133.043 83.8198 133.037 83.7842 133.024 cv
83.6157 132.964 83.5278 132.779 83.5879 132.611 cv
84.1479 131.039 85.5185 130.849 86.1645 130.967 cv
86.3403 130.999 86.457 131.168 86.4248 131.343 cv
86.3921 131.519 86.2226 131.631 86.0488 131.604 cv
85.9824 131.593 84.7065 131.399 84.1973 132.828 cv
84.1499 132.961 84.0254 133.043 83.8926 133.043 cv
cp
f
90.8672 132.317 mo
90.793 132.317 90.7187 132.292 90.6577 132.24 cv
90.1484 131.807 89.915 131.711 89.8423 131.691 cv
89.7363 131.724 89.6172 131.704 89.5288 131.625 cv
89.395 131.507 89.3823 131.303 89.5005 131.168 cv
89.8862 130.735 90.7505 131.47 91.0767 131.747 cv
91.2129 131.862 91.2295 132.066 91.1138 132.203 cv
91.0498 132.278 90.9585 132.317 90.8672 132.317 cv
cp
f
89.519 139.376 mo
89.4502 139.376 89.3813 139.354 89.3227 139.31 cv
89.1807 139.202 89.1533 138.999 89.2617 138.856 cv
89.9814 137.913 88.6621 136.131 88.0928 135.524 cv
87.9707 135.394 87.977 135.189 88.1074 135.067 cv
88.2378 134.945 88.4414 134.952 88.5644 135.081 cv
88.6631 135.187 90.9741 137.678 89.7764 139.249 cv
89.7124 139.333 89.6162 139.376 89.519 139.376 cv
cp
f
90.126 136.055 mo
89.9678 136.055 89.8291 135.938 89.8061 135.777 cv
89.5557 134.027 li
89.5303 133.85 89.6533 133.686 89.8301 133.661 cv
90.0132 133.64 90.1714 133.759 90.1963 133.935 cv
90.4468 135.686 li
90.4722 135.862 90.3491 136.026 90.1724 136.052 cv
90.1567 136.054 90.1411 136.055 90.126 136.055 cv
cp
f
84.999 136.063 mo
84.8301 136.063 84.6875 135.931 84.6768 135.759 cv
84.5644 133.994 li
84.5532 133.816 84.6885 133.662 84.8667 133.651 cv
85.0244 133.639 85.1987 133.774 85.21 133.953 cv
85.3223 135.718 li
85.3335 135.896 85.1982 136.05 85.02 136.062 cv
85.0132 136.062 85.0063 136.063 84.999 136.063 cv
cp
f
90.6816 130.814 mo
90.6816 130.814 89.8945 129.308 88.0391 129.271 cv
86.1836 129.233 85.0825 130.525 85.0825 130.525 cv
85.0825 130.525 85.854 133.661 83.3086 135.287 cv
80.7632 136.912 78.8169 136.421 78.8169 136.421 cv
76.9956 135.745 li
75.689 133.052 li
81.0605 127.417 li
87.9619 123.893 li
91.4116 127.11 li
90.6816 130.814 li
cp
f
87.5156 142.316 mo
87.0449 142.316 85.5815 142.192 84.9101 140.708 cv
84.8369 140.546 84.9092 140.354 85.0718 140.28 cv
85.2344 140.208 85.4263 140.279 85.5 140.442 cv
86.0981 141.764 87.5478 141.67 87.6103 141.667 cv
87.8013 141.641 87.9438 141.786 87.9575 141.964 cv
87.9717 142.142 87.8398 142.297 87.6621 142.312 cv
87.6504 142.313 87.5981 142.316 87.5156 142.316 cv
cp
f
76.3208 187.557 mo
53.4233 188.962 li
51.9814 189.051 50.7402 187.953 50.6514 186.511 cv
50.563 185.068 51.6606 183.828 53.103 183.739 cv
76 182.334 li
77.4424 182.246 78.6836 183.343 78.772 184.785 cv
78.8608 186.228 77.7632 187.469 76.3208 187.557 cv
cp
.360784 .411765 .647059 rgb
f
85.1992 154.177 mo
80.8774 154.177 78.4497 150.821 78.3476 150.678 cv
78.2446 150.532 78.2788 150.331 78.4248 150.227 cv
78.5698 150.123 78.772 150.159 78.8755 150.303 cv
78.8984 150.336 81.2197 153.53 85.2012 153.53 cv
85.2202 153.53 85.2388 153.53 85.2578 153.53 cv
88.3442 153.506 89.4126 152.036 89.4228 152.021 cv
89.5244 151.875 89.7246 151.838 89.8726 151.939 cv
90.0185 152.041 90.0566 152.24 89.956 152.387 cv
89.9072 152.459 88.7148 154.15 85.2627 154.176 cv
85.2417 154.177 85.2202 154.177 85.1992 154.177 cv
cp
.639216 .482353 .564706 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2204.w037.n003.296B.p1.296-temp_01.eps)
%%CreationDate: 4/7/2022 2:43 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3ST^mlu1ara".M4kL;OKO@P.OCi=!OO+')(NQ_ji8>B;A<R8uf7*$1c+$R\]?+N/9nKWmVQ#MDdV-WV1TU1DX]2GDYL`_W
%:)U$"a"UDg@65puJ,_G`o;oSD[g%b$%/fnVP'4iakp%"jf8H27>\idblc$Bab1/$8AnsDlq\dp^S'`rRM,Ng%8u;M3[9AEEVc5%U
%mN*(bQ+0Y/<hji\b8:Yp&%M22(=f,`n6Wr_CW/oD'^nls\?oS=k:M/B+7P'!\D=$e;QhE:[/4sQIkX,"s5lN3`lI1A],A$"p"H<h
%'[<e-dck)nLu\Ro7d\R;3I7(8a%'")d[&:VHDThBHTm-1(/ilr5[%F9UQ/%IB;g=NaUG`\rGU*%s'Du%n*o1+fdTGfg"FKB%nd7S
%7`o`8Z)&q;k;iTRNX#k/m`3jI-#1KE;:kFrDJIQS%/SHQ5o1m9E'_rl15=oE`;1V#=K0XSjYK*"_EA3]^R*t&bGf,o</R0&dFi,Y
%YP]nWmZSTQ,5#oa;i.!IC?7?NcXU'*r7J*;iem5(2,^A@i,Co?n>].J8'U)(9p/_aFMNpu<7(#DX&Ii1I`BWuDD43*DT&s]qJ./?
%U6c1=J66GFKWOJN[k`N(1..,Z=hY"#Tduc7=Lr-WZ"bA?TdefS%t<o-?u@pHa5u$\mg7j/Xr<IQn?c=Nou,Fj;LuK"o9l9?2q5TW
%j@"cH40E9s9^<h1fkZFh\@Ja<fK\V"%r5#[FL6Xa9C64sX#(3!q5>=-?dBs7rKURbg#a`;Bl;[MofTmA+^T4M%CL'N[;A%6D*54C
%H!2V8FfFMK.->gMjEW09Gpqg#Kn=2!$rJ>[;'r(\Xr`<G(5=5lGBcQ]>Rn_n3E48bn0F>fR6gpM$O+l:l@f9H'FI`0"t`3.&P8Vc
%'NOgIgSX92K4;V(Y:'Uf1q)r`8Dt:pJ.u<-G>/RH%(u(e:I#8jBM+(,9`liW1@BAh0^qE46;na&M?,TIU.h6\R-#"l?77D4'N3mi
%WXAHOJ.,dS-iNYp261g2q*?anLfZDZN"jLtR:7/mTGVXtS/0ODA`/AGHiemD#C'7$#7.L]"s!._bS5%/ilVPRVj7K-]Tshf3Z4[=
%*lWeWRPoc2+M`VrTh3SY[Uu!Cd6B#]"LX0i6*;i-b@BId<tl<N#ED+eWJjoC!J49V9=^Wc69aX$,[H>7()ecK4EqGU&ILZm1iJ*E
%1-VDFoIRr@_/%&(r+,RNVYc_BV#bio5AK[C;+7dEpHg!:U;/u;b.ZI]Ff;mC]tJ]gM:J(#,3aC`oH]R"pS:C,r#W=)XaAj=Qo$h6
%HB0=t\9c6-B5(JJRO26)#6$)PBrW8uP"34#o&D_#\bB0SW4M:%W:sABHs])3rlS"JaQF]0p)^0)CfVVMrlWRPWdO75Pom#tcO6]G
%=+8`OjE'dnr#"63V<>Z^]F'/MZi25"JYV>f*4M"_J?"H4*OAS`#)0^\B*MoLI'DBm_9_/4YmQl[><[N\`jf'#51BBk5?TLU%F\;,
%rB*6cTt4fSPs?69aHO7nJG1C1*,taJh/ILSgS9g44L,B$L&M93!n6)dW_XHP]r,nLY50UNc>(ppMXlk/=Zd%D`aih[S5nIiAHaNa
%hkojS%?6]MP"8\oIkD%qZ`:)%Ss.^3a;S$8RK.soba^csB&$XXJFpsI.Y6W`q6$S-aR*I`ot>/I.T.L/QrOZr;O<%[8Yg`CHH:H+
%jfbA(So>0]%p"41/fBWOnHf5c5LV.WRmeX(J.dA6GJY%\KQ^XZ5Cio9aN:tN2s`7""0Q6GX?__:^qaB?@LhokjM'2Ui&hoq8s_;<
%*`53m"JMYVMOl!JlX(`.XRuoV3h[TWI^>a;h<SMq9s*tG<3KJ=F=!))7jGs)#8Z,2;;L3n'ZoDBpDkZ,[iqp"`"7c,"L:@D9c#`N
%L'ZlqcFe`7itU@$*k]A$+G:u0/O2/u5Qe'[l%@h#go_&FeA_;u:#,Jk>tNsXp-<oB.Qlo)3NpK?&<Gp[k\k/Ib@R4apFZUe>Yp@d
%'cM?l@jgI:4eh32ZHtql\hmab$9U>Z;OI.5*qc(/R,t:SRDZd9M%0=MB8fYPA1VMRI(L.g(/n"2hbu<!HdkPlPb4Q=4JG$`F4lZS
%ojj4uV@9%;Kje#?Lhfjt*Y\g)c=N\AKPZUR8"\%rRT<RTHh[,0J;:#c:)'Q+Epp/-=`?l4=[OtZ^"[db?L\:NUPf>94%.''%2JmL
%;'E9m!qSR:'nbc;\V-Zkk%=S"X;PV=UB/Oh=Uq6[830::$4n3B(5ggi[GD$$8=On?;cWHmS3u4n`W[*'7oG/'']6f)Bi2)2cpeOp
%^,lD@'5GP3B#>\X=U7XX"KoKT\>8j-2$8ZS!U3iSkqD#?3g"p-8Db.F+%d-[OG1cEY$MZe'HsW@<)?FX,\2&2`i-tC&[FEt`2XCI
%TW,"ags$2'd)<;5Wb:!=-chAfbOUV8@V%ipWWs3u6SBi_bBI!,#&r*TiC(G^XL.sPZ?X#1W5nm@:QU!sGiAmo5"9`_Kl33V'9EF]
%'mOHP+-o93!"oiV]WjH!p#&Z?ZG$uY@%L0;0=/S1C%q4f(B.K=HqY`+5sYn641C7s8f'+1;2WsK08psio3M4)dKGJf`h'4I1i`A\
%<%o@r6*R4U4fQ08@)?.;'#H*g'`::YPc=cV?P"&1NgUID_*Uh#RjkNVBN<__V;*,NH`%4Vn6f+8HaM=UAUtU"*$/1j*3'fS:O[6W
%o#p+C81FJIHCgUJ\G@)E6=!a9U"dVM28>gJ!hE;PhUR8Hd\K9oE"-qeRbLsR*T\,4i#f2Q0ba+#%/&Un$.JGkNTilr5(um4-j.Z8
%f9G>;ZeU5_@uenUs)c^QnoF3%BUZ=q6-EN"`eqfu%2h`<WUO_tbP/0N#dpDp;;,*g.p>3rh1ig"j^j7#P_KP2@a:F8?`5[hD,m`Q
%ocOtPH^\LLXTK<H?+LD,=D[V>9m:m4X2aX/Y`JV=W89n<l_#SF=XK/TKEbQD6qnEm&S,l6aHU.Fec-2AQ)<s3"1+u-NUjW1<\?lk
%X'Uqf)<H'R]sfQN^#(aR\@Pl7$X.Y`)Md.l^r[KT)!5I#K8pfCIP=soR_`F9J+Y)RR]d.anm+e\f@n$cRCN=WF&):3blK,tIIk_8
%O89a7<*&TW8?86AhA%p"E`S3d-8fYiBX@b*$hPA(C*Kj>HV[(Q+,2P_"t?;d']q.-h,RaRT0[4`p#'.p'L2s\6YW%XU^2@m5&%5D
%be'6j"7ErBk%Ok]:>BYO5LX/gJTO;cTLVXPgHBV7N!,^_RaWh!C'd`n%b-f$l$"-W/Y8=h>ug#:/$D3D>-sZuW`>ol0Y3W`N<)q"
%M<FUbAubU.#4(s2SMiXBPACf:EZlR"0NE7t>D\j)^[@kt>sig9'Sks][81U<0>P33G.V%t8:#BGI%!.F?%D]DerW^)=$^RP$[u/G
%9Ac2+R`Sf?$D&J=5%eGdJm,OW]'bc@2MIkV'Dc.p]OGB5Sa@J$okG`L_&1Z?VgV&R<)31f\\KGaB5X[E%!lsO'j=L4ML<pS%qA_R
%6et5A8"&mqmJr0$Y=-llU!t*c)ACIo-6#oF3=[H5Z3P#q)5Hg^hG[pXf'dPb^c&KJaVj<f4GAG*V5?/pZFh`f7jcGfAK7-57u`;"
%!D*O]o!s9tVh^-lh;1j'l;a_%Wa(jjM^t#,GJJfrb:/,GN,iN$rDV*/$<+.a;)-:(ZWR*E-j638"5T@Q,c^$R$e=ao@(*\e&P-*$
%r^+tsB=%5s%<uF>hGdSGnabm9pb&"6YR?j4HH7"u*_\(=N6,J_WBZPcEhMV41*ETSPS"a%eT-P0dL;BSK@*P*6Z$/\mo^K\BT3-V
%jCVQ@;m-6!D"+2g"a55-N'iOQE3rIB"Y,aFHQJHOOdr`DIC?6th.Tl3f`H1#9pA%UU+X<S+ip^2G9$,6TS'lA6UjQU0cJ%bE:40M
%om4mZHFep/8J$\49k4"dP0PkfjS&6`W#jX>_f*!1N=m#VY?F8<M,]O;]8n7Q=Qk/SW2eHrnKQN]cLr<N&+#$EBl$#:eOnJA<,ZjN
%.^k@Ah2TOIB"_),<_n&apt9!/mPNFb.g$9il;XH^_rg.^rbkH$"U@,S%R#3nXEPTK[A3TurbjDnWZT6[f5\'$DjGmlV:>4t=8FVC
%Rc=O&e:'2';B,8=>:(#K)tVZ<=K"X43$hA"/q;B#PLRq!8+gK%f76-<C>\&D^!YH9PY9Ha:*lo/bnND+2RlW`:/<(.;m/b,N8&7a
%[2Co-%3c1h_I_$"Imnq&7u=gohKH5k=t>kp$^^L/AXU4R;7h(Y;*JeBkq<iQ.co]&e2Sln;le/<lQilFY?/;`?1>L"_>\*F#W8gR
%P_OX-<3DMGAnnMJDTBG>lI?(oDGkg/;$5`_ah8Y?D7bOK(EoN0Fp<_<ZRp;4,&eL7F_b:4'0R>3?M97MR>^nYI+7ORJVUHG+]]nl
%Q!3#+j^YK"BHD^N)Y_SC@D,QV<I;XNKBu"NG.C_3pO9R)nMSHc[!6?!`l\NiU01:R3j!S=$>+JSr08SZG7M>+JT6cW\"&)c4QjL8
%%Ef#U+6Q06VoYg6:T5GtRcf'gmg[<#TS9Fr@9QpKG0)KKH+<VFBq\dG,Bmn%q`_D]TAFI'Ct205^X&7)aDd$*5Hf@>P+)9K>,foe
%7:L2AI+W/R`2ic70\^D5B?Lubb*>j\Y&Oau[Br]p7J@s3g-;:#mXnm4#MD`0,W[XB;bMJeFR==WkkD%(;.[qI9?PbYWYD-]T[<XA
%6H1j@RHr6[M9Epem0'BOK"$G/&nLu6JB)$7NPa!E./^_@'^BLBp8-/CO3nP8GKtq:JD3?RiLW(pb,+f'!gHZpqoM;iCc\iWBc_G2
%XXhEC;abA+99=&O[t`9&W&3O8VijG$l@QL!:9D7^/sC3m4\@:YLE,M''60];D'<OtO&`;\h(H.2mtm.k077Q95fRcH8*_jD`J%q%
%X[=ltadR1GHpVCc)$]5'(gO97j8J;.7c2Rrk/4=*#Y+f98Ce`"1Em2g!H39QDbK6dlCDNAIO\ZP!o*E(r!.&mg9Bo4EpYX\0o1U-
%lgof4,qTUt,a^36BG>9.>sEk9I!h/^)&ZN$RCI9M;44q7'3B)2b5M'>\YEb)`c#Fh?>`K-\I4Of3-0Q\\HFGQ#Wd#56H'UFDW8i6
%I(>(e2t?#/[P,*.Iuc+,-W-lB@lu[4S?_YK(9K=\l&m2EjBc+I_>8*F4,9*HANFcESV%(=F/rTha5>'fQVSg7TYL9h)DiG9qn;.9
%D-?s9UJ@jiNbYV]bM[?oc1Rj,<ntDupgZ@=8kE'_dOd(M8T75+8<n(4PtIpA7qJiAo2HUL=cP>TmET9Q+2o[8JL-9Q`$4*%pZ(=T
%:MaFtr)lT(m8W1b$b6Cs"0G>i-n<5``@)Tj"3&;N+5DnHSU`j[iB!7&RB+qCmAQ=]7\-`'C\Sdh&R>46;6Rqt6EjO&6lccmKU@9X
%_sRd$NF4""#qoK(d.ik+NF0/4A*h^g[J!(qE7"PJ2iKmW<B&DW4#)&9_WVlL9od.C)L@n2L=)"NguTA2%8\L_q;CHRWIP+%h<AME
%Bg3Xe1s@pa(B,/d_&6u0i7(MRK7/)+7*TcLU`-_+ln=FLZ8-<Ek;QKiDmHSUmDMSJ`9A*jNhbe@hdkbT<$JuEEUu-o--+fp),G_Z
%d8<TCI"#Fg:Te$-X>],6=+Z8,,fSs(Nbp,YB%S>tM-)OoER"O)\IEVCa4,7P`]tIi^gUb?/S6?G\b'K5.X.%L2dPp]YUPk-rFod+
%k`8kAfk.qN35O-r$!*uJF@24%q%((U)lLSc'/_]?C2BWWL.6HJ_l8hF8;rN(=r`Ggf^YBf,Fep!L'Q`L'<LT=YHO*+.&3N?`qjM$
%K#H^^4PQJnr;QNFrh6_&7V1NrnI#[60?XP;.8??5M3638^O'u0mFjQ%=Wn+4Wg34TbO(m@fhJ]!Q90q<[CELY=8;L_,eIdRWn\A=
%f`XBP2okB7Q!7R3o&WoI&f"o(^WU6=(s+)%)GtP^p'jO0di!o[*g7^$1@(j#df35.hO4ObY=G&=-Lhpp_-sd&7`D+IiTTXj<D$`1
%p"NmVGBEU[638E%7O9<?)*<_"QR#a^Ie0W_[b2ErIRHCR;pg67g5_U.V,^.E(0fStk`h68llr9D$]Rch(.S\ZYfSULDUt"^e+ONi
%/YngigY^Um'pVC&Hp_6BXEm<R$`aEaY9,XXq%b2p4ar%FLNjOnC=]FWEYQ(:D;fK!0Ltr;>cAuA\?+I,1:;E[a^ck:44VUk.2E$F
%elVXtS<*k'r%L<0ZoG+,\$d2$nC6bqr:Kh;HPTJ\>YQJ0p]&_K`o(=7i](JC,XGmMS=@K*P)1qfiJU8SatUeIMrTnUOp$W(d8shK
%M3?q[Z4Tc!q00P/E+j*>;-A374;XhR%_3uZO;Jj@rOXGtd&rrbOGf:;bb*sj9QEuW\L@L2>a45-jJ!nc@V"'9CD'I`1D_@"))i`T
%or.&J'ZV@5,mb2/UCtR((F@Jg1Es1)GOEn<@STWAXYD$4*::r@''0a$3&.rP@<-kVNCP[?pD;uf%[)J%*(1gdod`T>G&jq5X^@1_
%7rH2X<Q09j>@o4.m3[/(S*76_,adf'M-c\8[?8gOCJBCSbdHsrf4$FVU=CSomD#dR-H=bA)/Bnf2UQ:>Bs#t$,BWFEdk!sc\KrB7
%5Ma9uW=?Yb1qNK>ngDm7!=:+%BJPRm:8=BN?ZBYT')ap0LXVWnO`D,r^Bk^#';`M;Q+\cNrq.p:)FaT`L6oB:8WNe2_!N_U#4?E?
%*gOk7/[p1UbB97noWN.H`msp^ba;X\1:cu:pS(QgQ/\QZmIIGW*a"jLER`8];WrO?Df'blR4FSc10o2`;Y7Rfn*09J4\5O>6O:0a
%J_]>+QXM\0%[2<poroD0aj:lmm/;FM@DBchpm?J>iTOXW<3J4F/R!n;3siVbI:O\PV=HFB>=f-DoroO&^[[?::!Uu?VBX+GGr5(q
%@%8i%9+^\V]aWeI4A]^YEO]hgC]F_'(0uLp3*_cD21U=-HT4F<Er2XN\!-$XO]kq+Acdq4&sLtn*;W<2P0BIB8=Y^f+utN"&N<s)
%8&YS!SFjEXhYY(JE4b4Bs*"I\ao:a_50[X<GOk,APPsAHZ't%Z:A0/bqnJ?nho*MMG(;/S-)'9Tg%-5iI=u#fkU1_kP<IgXMKk*X
%So:TUFOWnQoc$9%"qnl%'XG8qNP)]'&nQ$b`bf.NQqns%k7V#WfBP2RaFDo:HI)@OnKF2c+am7q#"fF#,!5E969jL&V>fM$6n7<Y
%P;X.X/E0.U"A#)cODnJD[cLm:,@m#,\",q.rbY[^clSB)=a^o0RtSm1@C!%=Z?"`Zj4Xj.>4DqC><]3nHnX)%EI4N"QWECrW-7F>
%p*>*1)cuGQLh=XAqNN[/doZ7oN27Wt:=67c[F;kV)\iT7TItN5@@DS3h=hA[bI<q0Or$'+6Q$.S.JBl5>bkB%3F8Tdb]/V4N/?^m
%9AmSF[bjt$7fqpRoBlhAbO\_gH?uR<Y5QlnA,Je%p8Udf09a2p,k*Pq]M&A[PJG?en1k<_>`0N;//!2);&G>.9EHk7m"&3?nDd"f
%ARQ3:RKS^i306;bn4Y#s6Pi$,]6blB`294=+T9-_^pg;27f0KJ9"DVKPqNU>N1q4]E^kCrcbse\0Y(iU<gE1sq)42j:<sr39.#fq
%SH%:h'=YP4:2XL/XH&KKR/TIR@reVpkSM5XqN+(Z3)4@!qKp^5iO*f-c6?#$?b69P0t_pKmj'C5IuM?Jmn>>_8jK1,43jGUb-9!-
%p0h)j7fGAorTL0p[k[em>Y<)-OdSfJ^'1ibR7\L@VYb/=ECfS!Z<ZV%E;9ALe[IR%[s?-o(O^hKUF\lgX#G)(L5e"LqIS=n%rI7g
%ZuNSqf<gO*ld7\KPN>)Q$f2X[Ml)sDSKp,B/XfATO@Wh;h4i0dYIjeC1OYc=e)s63PUQ?)Q(,]HL;E]V-?5!l0si9IN+&;M_&1*F
%P2J$N@nbl!_l>7WKr^Cs`lKrI'#tiS3(>u%PY3n+;2iU\ErmO+25=VBWbg5/8b/1DhR/%$2Ld5*'uqI#QNW/-1%f>T]lpql]I_bk
%i&mdiI^tX*#k^IIgHmO7V*24]Fdo8]pI&-V(VVJsN(ehmH4H]N>\M.73cV9h`61/>rmmst/S+_fS(\t%MhWSQ$seV6jIW&0'KJaX
%s$m$WTgVPi;6sS'@PMr/gQTLrKh5>Qg^m_X1rd!5)4:V7lI;sanZV57%?E^eoXN#N6%:BRZeoI<Ft0;67l)PQG5$Y8Ek@,*T\AIQ
%O?Y[6a":-A;a:SSSWOqhLm)P3<ROq]A;35..gZQHKWefTpe!AcrYl/NmH`!%;;4hG6BbOLBZ/mDjPu2,.,O`#@e$pAT2'dEiUZ)n
%l+Dj3G<<-Bim%F)D_?UPSTo4nk6aqr\VW7(n`D1_@2"-.D#CgHpI't55F2ANM*!Y9k9fWP`18tS=XNQA,'WHL]j<a;7S0KJnG@7o
%=SZuqjqr>aacMnbF2Qq^-(7$t%=^"h@GbMFLgtV/6ir-OKQ!+m]7[:sEj*Cuk^g"Q+CfH>kN%5Rhlj\AcNP2qP@:!Jlb&!ZCF-o/
%A/*QkKq*#UZM!=s8lRoY8I;?PLl1<fcfIP<cW9pU-->S+.X0(bVuQrjEYc(XT$#iUbb_SQ!6-W&SQ(4PHR/IVh6f)2!U4%ADoobI
%ES,D<JpRh=ZFP:@^R73@-%35AD./cu:EuX;'BG.\3mFFu)"/37A@BcKnKF2c+am7q#"jr;>B_T2r&@8i<k<lG+"FL>eIpYue(G'7
%f;)hZ%2b(E\.HeUE6V3aThbt>`-l389s<1U1hQB\>jWfjRH^$MAb.?Xk*:'6fll`\5<09]@5l\0*_C/87c,1HYnSO#lA2RA_eRQ_
%H$9A:id@"q__8i0WCOSo=/0)[DhMN%as\2t':WZE'E.ZAU-1Ah-UuM1)+A$OmCqPgh@I.o1s*HQ6;=,f^j_6l5Q^!<oWg7NGbEE#
%iK1i-3PB6%HiOCa\8f%FhQ$Ysm+]E$C6mU%eMttN)3!(nncps$LO1i@Adcf/:7NS#S5'j?al<(SA8AJ1%Yp0%=WE3Gh@KRrGXE9f
%kh!g"oB*fr2ND5LH1GO!UMod`-U7Uo-q7)Y`paJ1CG-MB7GE9mDt4dhDb9hmDIsoCE;sT&,pRjn;)P*1&mWj=&j#q>eS\ZTh)(!=
%ge8UNhaR"FOR"X`[n5)B/iX1gnYg+-4r^tVeQa&22)1u+iPtb\N%nON8,eO-m;Y<l\i:1D9.VDD^5)].M=D"JNUS5-#j['kqr;fn
%nCT&=h8"FUqH]]-Zdqf*m/DE]OPh,;a=%0Iak&S7Ucj,^%6c77lGspo@*@<"\614=a!p*@LXr.rg_=WrLIoQ@'%'9$Q!hL]&Up9-
%<&[YMQF0;X;_.9rU`(*u+j9X0,;nmup2hKj[k24Spa`]$>>5T9(C*H^pR>$^Fd1sV'S]HHJV=6%a37!l]AU`SD!@XSJ)'fUb9Z`M
%Dm4pohQiEhT@!e:ki(;r6]OcX@FS1+s3M$hpa&Heflbb'=K@^u?\ZKQ(SHD_H>SF@iTjec'mql&0%]rlr9sZo)Z2.JB02@g]l*Gn
%ZI"--V>=Vj>&AFd-`P@h(*1H?e98/dA%_5<8tP1>8u6ndH;t^9YLb9to\(ac>juuP5*\tI+s[AJo*8+(A:22NZ4YB'RZ2%OJ&C4%
%^43nIr1Q6r2VWSgH+HH9nO9SZUW/o[.H`mV4@H!r5*>&FOdPX.h()PGQ+1&>88[BUVZbu9gB`mHHHGqWkZ_SoB08C86\jP9"J[oL
%@61Qp._a0%MU!Vrq\,Tne%;ddqa%#KD5KLE1/atKdDK6`#O8-RKAhc.LhsimL*/r->1_59-`Y,PFtAI9*8Y5eF!#S)KiYh-_-s&P
%d!5Eqe/Nf)^]3%;ddLph4Pa=^`i'>]FFZC7Od72@;_DbKo>A86e\c\::&TS?.cCg.Z6%MgoCZRj9)_1AC6MW@*%Ye(A-X1](,uBf
%XaV'K^3hN+_VNc'heM:4ol?JKT/jE%d@N@cS#s(.^.6H!b-``X'uklA4lGaA>([neSl@RfA!9`g;D4W]fA7%W,LJsK%g@Q?jVkl"
%m.q\q.SDP'(UpjjRfnQ@(]U$mn^!&4V-Pp!OGjlbKR=EWN$Oq-F[:OU.!Ae]HM%fKKqZ<QAu]eFHZCZ7p-t5E7n%O1'uB%L)G9TT
%\YT3Do4IIfFJs\94QA;a>=Uo4IsE,jC!s#GMrUSP*HM1GG2oNA"ieZu)4(TUpYE?gO5'>p?(7Q=]akE5Mb0:YD8In9i9-2pA/_nI
%0jMW2(9^-`0?YU)IDbC_i0RVNXk0bnl`f4m'5AaUC2Z&Sa4CPYGqeD3%?2+=l;;$'r5Hap@7JW/2AG2M`pK]mp=4'u9_aYR1L3mE
%P!h(W=8GSqflbb;FTX7,)0Hjs6A6[=Y/SZ8:,?e,m8T]^f2Z;5oe<ck[n]i5;6(]rbJ-#kQ.h4%oh)-O"F6l]G,O0[ZkHDIl<H0S
%NMq$UM2pWG:;,%hSF'go'#u:lXk/!.)LT,'Dd<9\(Frnn@okmD>,`T5Q//stWO-sr4Ynh!c$&C&X7^l*7Jub9NWJijClgTM-4Vu4
%Ngo-.W`B%pHh(FnG5DV:c1YR/C6hbF?[Bkj$?=ik+]1r^fn^QbW`H[aWC2/61bW]>&,rY"mC$2X>,Q"[MCN2>NZ?S)25]-64\_kE
%<7::HgX)HA29M>n>.)nZ[sJaV>u,#nm<Vhj\dYe_/%D*#<pHoM=kAr+-fMK*mVDUOZH[9GViNVZ]R&;.as>tD4/PJW%`'D2n[/gu
%f':6'3mFYaB"^8Jb^m&^M4<D_e:.<s41/*=\"gi]V;0WGC3k&2G6ai)>:uq(O'6mYS-Z]IALDBTEi+$UHi0,Hpjf9eg0a6=K'=AZ
%QTFC]Pc3.cVb!&Hecc5:^4M#9V-JpWX`h%")Rn"-#4#ZX"A"QRek>NNd0)1h)M=K*fnk5uC*W^!<tb5^->Hhb,Z]0kn(/3No_)41
%SOS6&hFbJt="0rR^W4SgZeQkOGrK2/M<r3HB2P/N5`!A'omDZ>?`\4XAN/nnVueh>:qFE[5!31oX]H(Wa]Ou1go/]gHD+9:BE<?P
%9Vu7He*@/;.ebLo25C"^gZ7&$pmnFJG`tIRq!dp@r$YUg%@Rf`DYurpiL%X7\q'5I<>o'#l^IOLbD8q>lL$m`UEt<&6'DtpZ7T8V
%>!5T/L@e92;5l,4;MEJS9<#UJ]ocL%Q"ZPu=t:^uZ/.$/Jb(*W/T'%mK?sF6g5E\cS"30`9W2ThAnYa+(#>X^K%mcSRT>;FBm4Mn
%Xe]"^Z\to%S?'$uZ,[c;>-':#eJdet9Wd^Kh7PPCQCt]+)Zj3&D319%MQQ%pO;>hp#Kb+;akFF-Z=LK"8hKB=-m[^;+!SkL!k.`)
%7""Z*&bdu2/C\)DlEI`EoG+Zj*nEF7^Z#UF];)kpKg0CnV/iKf8%;@d"/[*6H'LC&p)=XPH>gZrau,c4.YHo9-)dFaqZFF8%n@>F
%#g%P,nK>"ZRsC=>gLmGWootPqf3#J6ic,!>k="NCWA)X@GAb(V`Tmk69V=,M\##\R\Fd1XR,K*]8js[6B,At%jiQY8NH3<53*T.e
%8(R$HHqg*4drOK1G^4UPWsp=ooX/oa<nDHKUm8[IMX-cHdV!-s4TtS0?9_\u*S"):9B()I^9"NUEk<5uc+1dakqCpRY+B58@7Jb-
%N\V4TcrT;*jf;8MZurPL72-YV^=.s2J$@>K\rm)rG!uZU2u=T8\U8cm_HfbSr_2FC[+>!7#7^=ZBP.,+"h'tA/jtH:Q)hje5t$=j
%9%1Y''hsT7q4k+<?!gOuA>#G3Ga[LTcC95Z;<o^*4B*Jf.qOE-erRt=lXim@DO$8ud06T03L&1"9M3J8R;,e/&1!qp=X-N]\gk-A
%e)qnuJGP(Ir`g-i37!BZB_)sTm0a32Tpr;>_lgc4KenA(.)`9]-VDM#W2?J&?7m?&3*\YRUqoNqP`Y=hJlbXs7]B!d:Si!\?*7@H
%"8k,36^;8\g2ir?/5j`+S%@H?l,pq5dt*BCCjQ*+7G.=A=02DNMo/f1r%k?BWLXLA&$;0IG4%n,o5qO8pKYVG9_Qh>s/`fA(p-rC
%62"V?\3=q<d8ErEebcR50-a^o]-XS[<.gG%e;@=(p9-r_V-H[mP.n(s]Z0e.e&F8n^a"\On:7k_>5j42d4Ako9c3l].Oc"7@_G7s
%7iOadX6>).>oT":LSC(DpQ?,mJU2J5KJUITd5a#[!gUY_*G;s@`43/kT6or@]VJngF^HQUg(qG1-(/#<=DR0Pr/8W_rLWV^05RXo
%XsB\G@8Me!>u^3L0kdpLXcnRBX`M=IF8!_KFC!YkpT*#Cq+Re'F5gpXi/V#4I(XK+F"u&Rf4ksO9DZ&%DYI3'N9+A\`fY_*Zd?Hb
%>rpJEZei2Y&rp_o9W<&lf'XE.f+i&oV4f6F7f,l9bOL)m5E)&5X11<+[9dA1%2L!)_f_gQD7KcT%ZKIXr8>#JacB!LBQMPg\WF5$
%c=-%M18RU<GuX8.PkN)FUXBtL][/9GOoGKLkNZ2NMiT*9qlZEHADGb=.7D`Gf#2?)6k%niglAOB@N2Vgp,1FUFZ?-1Rhp?`Qg!'k
%V:Z6<]9fmKI'1/@khB;F,a=j1q715L5^Sde<H:YWlA]9O)B;<`2,<G]?e70b\r)t^U=;coo0b0MP:q$tZarK<4)UN_0:ZraIA&>L
%ohp4-'2,B;mC$[%EpN%BRjZh$`5`I%dcpC--es!]HB<UMk`MECg3sg?'V_#X_puGqc05[aALj<h^+n'BcEl=SbM,hH@C`W<nQ2sn
%Y&dL.ICdi$p$5[?4oZh#:>`ZFPtoXgT;#p"G@PLe=7:pU8R"uZ0@rpEF/OkUqcWsJEJ<8n]VLmni9BNjpo03cp&kQS-a,a_S#82h
%n++N,0?*VIppe0_=7'DW0g9JJiViMiAUH'"a)(7nDU=l`.5_#H)shr8U3H2>nSt24H$VE5]h]a<U"%T[e!\Z:S)2uY6M7`k\[B2*
%O$$B#T@mLdd@3RgT,)Heo,Bm-_T0X'09<iliCu]nTt>'1*&dVf?k^u@4La#p:rjZ*HMG[1mkmkk%eks^_Lm4`S$=mnhm6CN(3d(]
%hc_gi[FKU>d<k<1g>SUa&,E!4cXu`$3qd3`)Um04k*Z;Zg$/-cQ!_!ZXo+_#bJon#k3fE[Z].&k-_C(FI-g5R^3ae#V&*4":9'?j
%1f(&2r\1+`_H06bL%e@"$aB*aSL.3HH4%#c3+*l/'DskaHM>BkJtJ?OiMgCmB`!=OXRGiem'G'?^>+&TfH7RXk0qk)mru+MV8opC
%CJ3+dO(^.er9a)BrmBuJ[FtE2HV[^-H=']KQV7(FI!\q$m?=JTZeLR#[+n0'dd65-Cpe`I.6K#[DgU?!ip0kFiNqX"[ET0Pag];Z
%Ipm2hYiXP^3lPI@Q;4'e82!)?2gn,kg@OFmhYeh0>ktm_P9>>Ij.f:3DE[^FhB*J5T.Fo/4^EAR[,C`0&*BoKj4R[?D`ui]4#HAL
%Z7k'/*t^`P0!$[[00eOL9C$f$\^eidMS325B+B?>WHD`aS&KMkiACIcM)+bp3VC'_cgGr(-OZtjf$VsJfj%d,P.Q(.%2L`uq4koi
%G(+RTo?g^\.ZXL;@K)O`Si7J7e)[j3Vb5:LVUP?"%LI&0QVKbohSr*a'Z9)%I@<dSDnZ+8^:,*=@pp2A;@td5k<@kRFCD<n(r*^B
%Mj8uDXnguWNtro"l.P^Ym&/t;o_n\gqMqt&R%Eh^(=,2"FtjBm/fRU8F,qgnddq7$p%5p6/"-%HbGj%arR[ZKV\_S#I8+>a(['7?
%a5r(jUUp%PD79@%D,7Y0V!ZGX0C@%KGb4Ws:Oc.:k!:dD4P@*j@DR5T?@J1=S6dZ86*Bjtff+BVdA,mZl,TtL*iGX[b_>]So"BE3
%pL3n@]f+WXP:l3LH]ih9e+f;:hel,c?S$B+l&BB=+MIGm@6V@\l`I'l*bNU[^%G)IrQ9B^.fHsMFXm?uIX`sJrnu`A](u-pQ(S'R
%ZLTaKA`(1n5((&UQS,sggdrTQ*c7]Kl;9Wk3bpiN=-qfm9@pX/:Xe3YDn`(&pT8(,l1Lu22;MBjS=3`SSt2<3H2D>k+nsWV>&;H2
%R5-[qPptJCXAUuUmapR`;o.&@\Z(kUg;g0_GG>CA:R^ad:$#,npSJ:i?T;!MT@PMk)]t\h:MlFVSZ1GfbM(IHp?V[VG6Tqs0jC'7
%3nR(I9H@05l_B_fCT@;i)Q6Ci5#!nXJou1a^AH'BT%[u:R@\OBT1mRt&)U&6mWm-U:&A3MmEXDndm5j+9gAEYE]!`*pZq_@r7:K,
%l">?4@=$tYl,2bVO"['grN?_JVr(4phjs`\2Q!@HSZ"Oh+7E4-^KN;);E*(4h;$+oCGpNeB57>6d@IoDF2rJ?5!M3@A$!?<HH/ap
%Wnn%H*dkTkkX?_E-^Qd\hK`^G([l/m]Q*E,hJYQio-UgAoZkLRf/n2Njlm;"N](77gc>>]lJ-*\T4V]`/"MIFc-5P/Xc8a&cJ=O;
%k#PHNn_2ZMR0Qs&O(MFPUV3(n-SJ8-2IAS:T@rfl:M/HX[GT8WY+0s1.=Edp1LC[,m*%;HMUgC%.<9%hSsE^.AnJ*'=i[.<R9eZ(
%5Kl;?BBQ4_fr*]m(UKTL:M[<6ZhGQe^45tNE&KJocKoQ;I[I8!hdg=\Mt:lTcF2R\hHc),hVNB]J'-PPH+EM9mco_AF*E%ZYB5!O
%j.jY=hj!:BG<^:H2X_]4mhY=l2qAN-[SNMXL,Q^Ak[AciEtl?Zo0RA@mbucj4h"HoGrrK,3c],Q[Pp;BnRGOg.m7febZ.[QDm$eM
%@VYo1C0[99at;u(q\pK8jr](jA`fV6bI?VX18guE\'K,6k.fEp0BUH=p<h._[n>T8S&p.a\<iW^0R_:EPlGpqnMBA#hD>%(I.-05
%4hCBj*e1nJ=G]5u4"YsYE3EP3polG:J,F#s$L.j(/'k(&(\1plUP5iIq9$RDc*trOBW<qrn9$P./@;<uIHotogqiXJIB0TdFoT9e
%rPSTA<hXnj]@`Rds6e?rID>Qr?FsQ-4FOOq<SK`D>b$)HYim_nAf%dXhqfouW#X>(?b7EI`@i=jCbD;kG#&l8a7##3_Wlp$N&Q)c
%aZMRtTUX/`f5kjcY;[NXa[@dg4j-frf.'Elcg:s1Mn?TV90m:G?-7;]I9tW6DVIhQ?TnG%7,mD_IG=RFB["_4*uO^Pku6WI)\n=p
%m@@tOol9tjEVRt*N>cqUcE,?/:cG8^28<Zcgm^M_f-=eSHr]nmo?b_3c.]Lpf@J0TEn7N;hHd?,e^l;%MqmK>f%YP>VcG8'o;upM
%ds(3Tr*IYASG=g]cMd=VhXO[>gRl>E:[G8(a+6&>B%rtrS>CCH_0PgkT66a?>F9HfhRh6[icfTM:<UB#EYhL>[GC>35NP)Rj_!:L
%9AB&UEUh\#^YQZfHhZs155#'Lb;6?+]!UYfn*V3@LR#E-pFUbOlehU'G^_VZ.U[sWqYA*7s7IW&e1W]Fp\\%uMp:DXS)D,hB8th<
%DUf'M5?c_IatK?6%B$\-=J6JEfEkVl?T5igCF9Y00C^'Oq8%^\bP00J?7mlIVUD9S*^<qZ(S<OMbPMhAeBQ.,(R=iSPC$J8ali-$
%<qc-W2HEFgT&3gf8&h#'`n[rui(<?Pq8(?JEW&0;I%5]UmHFM8LPq5NjW6Us=.4WK'qH$\*k]5YiaLlXCHoE1oL8B!_u/Jk7p@Y7
%XZnjk^BkKse0m7f+"o8/:*2^SC4:KAh:UA**#7o)+#b-9pge+9l-bcsDr5uK2`HqL;Q?<HZK]]-::#-9Tq#C=]fXNR3IZ%6rH^C`
%=hX^jo]p8eZ;Y%Wd4h#iT3%X[Y;Vig"mRG$ft(hZZI[$jgg7Vk4EkoBoQC/YgJ03dDf<&ScaP]ur22J$fmMi'k2+h?m%a.*C2e*?
%mFB7!G--.qqQ=f3c.?!)Aa(HkCrN<U$A[C'f$j9^r55H#@ds3XqYV,?H2;6P\G>dO_L1sC&\c=LbO78`T=mBjHh=CcYB%:)J,dK_
%p$DVSfC`2eMRiD`iR?r\q2VlUr)#Sin9f0SjO<^afC>UPF5%d?0-7k-r;$SB=!9$=EdM:KBYN5GG[TK4mDe#=m(JCBf,q_EcC=(M
%Rub^m\]t(SAS^o'l:QA<_*:-:b'IhF[beOC>?fV_+7n6Tc,.VHrj-$MJ!fNVhu:'-H?[CjM5GLJ++NYD*4.r>?`$%.F^>9+qUE^U
%E,LEAH$QdTc0rq0m23HrmB?NWlX8uIDKY9qo=^uFp=8$KV;9&&ceJ&NrUeU[L&GEZnUpe2jgjdWj7^mZX*_h;e#ue:]NBXUIdbD%
%=3^]/e(=$NLZ[pIP=M+GO(R"X^6r?aF/YQeg#Ji/Dr(^T;fA*pO4N06cTZc*]=fo-o(Mj#ZhSFsb8pUgrmRpcGFq'$_>A=R5'jtk
%ZLR_grr(sTqs)o5`Wu+6Fmm3UqtTc<dc\M<+6O^]diWWejnBi]*]>'f8q5"-;E(4K[[%Fg]m@5unYs60nNT*t2uS"`rVl#%ft[:H
%+S4mKg;3WUkoUVsSh,8WGLei_E]*I\bNBE'@WZ8]n72+cam1n5q^4IP;.k=?jl+AMcHbD7dd*IAk.S[g@^+C3:#-NX>3:TLrPa(^
%o'RTL/\N\Rbu46-L\]SJDRf5^_tU3O-+C1,A3]rl4PG8U[W?P:oY`r%/URG@HZ/W9pp=$sT@bf4.jmDOe^l16dq5rQI%4Om^O3He
%Tj6@+J78<)gF9:Th>=]YrRs5;Is;mW<_B9no3)+#osGB3*j!$`.doE1>b-1FI8kXc@'<c4C_`Pnm`pN1CMS.=O1!u1nZ[K"ca<#a
%T@n/J-\ma(1b<-`]!8Scn>/uh83a"i^'.jb\_l8F7oR[>SV`h317ql3&+96h>OsX@iW"8SF+Q(7D"F0/HnI"e]eUV(RoF>b4);#8
%SW+p>h;_0q9d?ZDPT+gT'%0"s0JD$Q/$3ul=RXbnB4:o-[F5gbNV<YY\jujY2^_"`]jfJ-[_?VbF!&s`Pn(hmlcmptgVUmRGOgFi
%SPji(^h08'7_*\g7C5ILh2.0Poj1VfqB;s6n#'OCnp[oMh*`YH6!<&o>9/OU?<#L=G,%MO^1rG0f;cdT8XT/Lec&.qMGmA.::3mW
%PhH=9[Gj(s$YZAcSA_g7/,Ba)7C<gH3m[IU>C"L^/Nf9025m-bMJOX4Wl5FrCJ3q%2#O]:8Mqts[9cMFV)"Y30Vm+VW*Du\CJlh9
%-VO24e8_sK)Y"s#Y+q\"S18UV<0XCN;XYtGFGW2HE`#`k>I`RC#/"9co/;*%1$Mj67kF,UW9Zse!L6lg:@/a>E+CR5@a,L"\_&Gl
%XpIm%Bno?^4HZ\&El37kW)b)oOB=J$Y21PQAIDA9r?a^U?&jC[.(pQAT98/L7^:\aGJ?a6cfXP"<E?"upW:CCLeo^=8="BY^,dsM
%S(asqlG\s!]c-'j\T4/5I/;q>Clu%=8/eY=eN*a`[SnQQe$86IpBto$UO*_-E#EV5kV()dX0WYG)0R2m6L$#Og\k&BhKmZ)\cgVk
%h;2hsOW'EHXEXCt0&4M38dK&@'o5qe_g^+)VnE8L8]9T%62/bUM4eF<c2(kuhM?X#?+#&;VLr\FLM.=_jQa,cDmHR5Le6^'E]4$[
%.X>"[_:Ai&*K\1.O`t2Q]4Ce!q<=WCp"cOXS-q9-qRLqVSM/hg\jRO%cML6La7W>AM,a"m>H\c5I@]KI,o*UJUiDrg\9,l>2jis`
%A!l`o_9Ko,?kKr4V1\C-W^Q]i@[uLYh$m82]$"m`3/lo^?a"%K)+!R+%jQpU>U7UC]XfXYiiIG%VE_E4Ej(`:I)BaWG2QA836-Bg
%jaeXQ=5)Ys#)Q4E?Z\[lJ_j(0r!7N?qi1q/Ye%r^jl,V$BC];C(2A;9?(D:Fh9i@*QuZf1pIdbl[;n0BlI+P_3es*"oic\YLaAdJ
%\p<[U*tbZA1SAhZbc]H;5UC0cq^7s"@4`s1qQA;?k;!9`?&/#LGB^A'^ZU,8p>k#nJ[:&6nM*.tF6-0WT6kT@1r]j*/9tu-F3q!M
%dpTm-rTHi&ap!fJh`Z9u/o[;r'lXF-r3,Q-3OW&N<^'GfieLT"9USqCZ<W_[\:AH:rpTmL\2:oMFJHiN5&&o40&OHAgZ=Za5+p=:
%82(OPpoEhf*t7cAfCnb5JT$&9n,GEc8%*EV`Iu?O)=642^_]+4E@mi7*sL<\"7W3pKejfnnY8_h4q!a9b0.uH'QV6S#OZ@4I&$U&
%hE-Q4nac6,En;d\ZVSro2mluh:/ecHVNGcVbKIGBPN3SgE-^,#lZ6?6FuQ-!WjTKUWmZG9)B%.IS]bce:pY(Ye@)';_e[<-Mr]83
%+;gK&lh0:Tgh:NTh]/,_DVp-kB?EI)?Q=p(k*6X/GBT.A/VQ:OI["("ia#VpBE'OjC7=?k[518'CLuSkP#[=U76TIVk+7\k[GLQ;
%;r3bkaT\UbNTB(TfUI!mM6et"oeLN!*q,39Y-os.4K.UQM-@gqVd=+U55"UYCV:4Y_62cB>Kd@Y>[-K]^)c-klh`k`1c5=foK>IV
%^p$1Pj3SmkU,TOJ6X<&VL8L=-ID\`1>)&=4E:kYo^sMd1[Ui[B7FMW#Y%]kp$H`PjC=4?*)cD_\!t?pD=FhhgNPP6c!*PV!'.EK.
%`-ON<>md%/kFs>r`_Dc@"eG\+6@I-^);bli]Di/Ql>!au9@n'0+GKc/)Cj/=:?Y!#B7(U4^EK>=+UDV3VAm#o+YTd/RiiS^.)aW2
%F2BU63J'q4pbn>]U]q9dkn+K'$2M_/=l7(:Zi1i@DP;(crcZ;'M"LE0_>g-cNh6V/W_(ue1T'==K"mp4Hll26c?Nk;&1o](iIT1L
%6WcAMMZZ,MD$T&ccbmP?;a&P0A=AejE<qOH_bt!!<.WmlO93Vgp&^C?h\#C!BpEim5^a9u^e"RfRmneHqaTd(L`S",m1OJuW9[7r
%$>:9pO<=reY(JUfU-Z>eD)01o;D]R1(`-2)O?*bD(1E8sB#*F_CmKUuc.J$W:m`CNaT9K)KXU0sZtQ$j[Qn+[!3Q0Xn$ic-*GGje
%5j%(VP9fW\47I][O<hQo3RXX?$i:p5`'hiTcZ]7N-pXpOk^n]`Uh*LK)a+t5Wo5su5f$[U+cak[MoAX\<(],=6aVQB_un(7&M;6%
%!D*Z7--%nIjFEs)\W-Y`e$Ytu.4<0?K[%FK5K+7+p^>/b/<:[K##$/W-2j/t?.+8;Bo.^gTINg*hRFaOTGJ`RL`l6:2@Lm`e43nd
%3@A<^T(HH\O9Nh#\`,rM#t;mE@R=KAL8X:sRC4D<f<@Ro(mmuXJ;>V(KVefqU$YBF1LlfL-d]Zffh1@R_inC9<AUi^/(Qu6.?0?;
%p]C*jf9-/E?8)klD$e:h6:W1lUXXFG;!MLB)q'R;ZVqGmFF6C*YSAOAfT&FePct4DJL/0Cq6o:Mm0WWL0AR9>C!u:8[NGqnd(7-.
%.PcRqVLZn+Fu@?!onZo.<+GHG(*9)-k,Z(ElT#A/8/Oah#i]T%%(+gcNY4e<;8kjL&Ae'G.o9,;97a81'BoNT8`#\.k^q/]Y2XTF
%EX_n=p3E"4[aJk5(F&o7?>3K#CZn?"&4OXkF:(??OI5$!(P[3Y&e@b2*,DD.W(o`^]7L)Y%Zg8hlZkGQK0jtk*](iI4_gPhOe-d(
%T%?f%=kdu,+O*&Jb7fLjRTceakZnHgXsPQRV'hF"r%s*D*j8YH1d%J1@r%b\KNq5Kf5[&%>!ZgONTVcGF(d!6@FSa[.oUY0>J+tV
%9!jb]ZqB%U(*-ObLn:UKf6/\s[%T%-J<C5Vb/^r%&_$$$E"#/t8S>S+oj[1X*Bg<*0UtD8lM70$I0V"]"8,U'+0*tEa_tAc9KU;N
%h_.7ADRLqA-ZmG:@f`<)6CA\o[@f)\=@%K>q612C'\^!aH@aLKd&Kcbdno=]qOghq&_+%`?jKct#AV)`*Q:P^1rnZ@TH&S<:eR-o
%g]s`n=erp+UhE5DO:8Ms3Ns#2A-?(1fn$=Ba0)A.I\=4`#+CaO'19$_6J\/MKs!1rFMFu^oe\5/0U)ULUf"+a9f+X?Ej!SD's.hK
%_GOB8TN%9.-YR$JL.j)CO<mZW#=-?q<chsa'SUD"C)ql*R:^'P8G2j>Gl_u9^\h3<p_82tP6b$Ni=YgS4t&\1b7Y=STLS*+H<(%a
%KpZeW<KD7"i8saJU7LVSfEJ&e"@2ZtT]OHfZOA]rT#e94(q*UM9j11]AWp6lMDGaEK4:I-U7J+cMq0q>/DF+*3POf6LmC>,b(fA^
%l5HfVdo\>V:^S,p9F67Z2s8>Xk<SN(>rVD`/`8V&/Q9e+F[Xs#f6gRB91m")4Y8a]AL^\Q5,?CO;C$hAaWW/VJ:+2A%BN!u/m3,$
%f#[rZZ\ZYZ?S]g+Y5R>&XAi2Z^^:;`9-E+Hc[l@T,)P+R@qWukBH#@T>,8,`lT$Coa<EX.Xp;#Q[`EG2&";=s^qg)4U(@Hj+U/im
%0oA:+V;V/=YOOhK1\bSO%pb+ma=XA5EOe5qohal2Qj+sL(prd`*]CRn!N)l,RP:S;YiEXl@DZ,WI'JlC#/k2..[8On\6,kI]X0GV
%@9J^M>kGMiZWA@E3DnO1i="8C`EC)82*E$NFOpL<9+7u77o"^*#&I*r<'rpJ">g\0JFNnAi-DX+gJlP-\Qe&+Q>R,NL)k1&&>@T^
%!SB=.O8uduNMl<AP[hLa2$9'?!\;VLH5pu4@.7YQg!Bs8Bn/MX9>l+u>j44#6HR"hrl:U?++#"`R66M3pboBQ[&]4]F;\eC<[c!.
%%79jH/gStuM(a#o+s]?>9ot[6)o@$DAT,OBAZac"d^n?s@3.b<"mSFp$e-K1YG"?V>G,@_5sptSE8+b**\8WL!Xu66X-:$\8O6Eg
%Ma.Q-0aR'd:jUGAe`-$0cAWAT3uCfX3@"q?+rnZC"UM7VK,imJY3R</_C3",POfK7pM]7<W,7;)$[bLhQ)[5;4;Vbg[L=!2:,fP6
%:_,p-KJEQ[$P%rK(?!W?R;fmr/(G26T,tArmtl!C[-TSOLc$56E?_)/@I8RV,]Z0N6A2.]*$q:j#YU'<+0ibg6l@5p'm,d)O2Eur
%*_UiO2VA?KqLZ!Vcm!7dNFA3F!A?tR9K,mTI6V*Ae:j2H\t1]DYsu9+hFMdPlUTFF@-Y;('f]kr\f.RTFEVK%>LY)^I:*>'Al9<"
%"d..jH)\#V4ZKN#I'B2-,ba9%E-i'H.3-dDTK*$!r95rjI4doj7<pV:O]It.H*E!=VA@4Z/B$jjDXfguY@2b@q5.a&*i9k^UU#!j
%<3pjF3+R4flY.8`(<;-NY4p/s\g,B-R@U&-2'#A!4it4o3dj7_cZ<*n)c:!.%,4Up+_jim!"h<><J`:=L-XNEZ#rT7#q1o)K*U/E
%>Lh5P.a;[cbHZ&_U6/\<eCHX3?+-+]KS?N[*J4G`Q;%aIWuCST28]$\L9CYY5%qf54c,H/P`l>B""',<P%]i\BF50"9[[@\/fADi
%5`*'MO:6@llt@,AUQ@`%'SM1V[rbmr2WNo9ie"lnd4c6MhbZS(7'EQH5l'gV[2"qW%n@!'VQr>;"p_l6ALj+$PcZWq#id)P,dake
%Y1<4$27q1m71uZjn)tg]pU965leRi6Oes%V-WHZPFj>mfgj&n)?BH*NWuWd/E)Lsq$V[;cL+I3&db#2;2F'JXD8%=P^b/0Klh=$L
%mer0FL?LhiN`[-jBtIQlH3&fp1mAG(TAqUX(4K=oLE$V1O:>o$_%b=@Wh=4>&p0fj"9PlNHpu/.bI2jYm`7SUMkGV;VuW24O8r]o
%mSnR?(Cm,Rl9H?B?B.96M8^*CC`],\9":?JEPV1lj`\W.`/6%<*Z-Q+,uXf+SlVD$nD$o_8]Kn,\])3;eG;HZL0U"f*E,L!]#\KF
%VMLeJ<!]"E.L8=*c\2k,iAkX1l;IR#HUK.'<*n-8_feaC7,,++o8LIbU^_^D)\s*Eqsm&kVBo0)$?9TZ%>lR1cj<fs^lYp'(G<f=
%K?.q-Cc?2e3/\=B!p3Y<>-J`?*9r2Ii^lCm5ZUt.qAE20M?C<-+p12/5VVObFE\4!TuF]H=/^ZIDjVaZp=S<)fFAI),!1m'JK\@G
%gT7iY!RR"F^t5uYN^O#i&/ZV3A66R5@=X'A2$5C.!!k?;Ru\G]@A^%>#_3ZtKGMY5#R,aGX4/?.<(;[$bicYs8,@h*,(MAs!84G=
%80P2o%)GtVU&]_*#e8g30h"59!X0e^%'0uE_5$KDVs#.CAI,[KQjosHN#P^)A<Rla%Y+Yf9jkKMOD-B?YWYep7ZqYCN&)&Ma2O4^
%YY\MHeBT9%%!?WWKuF0&a$1+P`;Y#G-g0C-`^!Ni-/>Pp%$Ih)K,b&X^_)2mNM,V-"9srtVZ_#[>IEUJV?6RR.]'V9*4R`)HgOYs
%(P2"_NY1!XAW,jn?+isF(lGGGR\nqiZ$F8ef@45K%aI,KL^nu0R?m'fEt)?C7(`R^O=aNO:(iS23UKJ-"%;QB5Vc^a8`YQo:]MfV
%:YBMAF9sh&m4bj29Gf;8K;HgWlmq0cVHc&VpsL'ub@n-;kGiAoLI9R)0jr_!Db,mV^]lb9)N#QBg5*TiW$*46LT-(=F!?(spsrU9
%%Z3ObHf_`49_bn(Nd$M_'p`KjH%u!Pk%*\mYOu0M8B\Im0"?rG%.OoG_.U])aPYoUH]]kX$j&HHKmmRn_4I?t*>eTb\BrgcO9nWH
%drr[3_03F0KG"j%&AkPS36EaWP=<@F7K@'lnhN<L1P\=`1jk,nK&(8$"WVh8$1JN`KeWT-MlZu":&TUL/WpR)l=V>.*r;Zc%?>.V
%0HNdtJ8t[/%dT&XA:TDj1>*X,$aFWLZt9:ikD'ZpnIY%Uf8aqn&jo#($sCHE'QP3/0D@KS!s(;JU1#u'(a?d#%TN>X3q[4Gnl;o]
%VP+i4*mO4OcW$5UI;XT"U'H:k1$$H!`Tm+iV-";E#m+&PFa6p37DKlV%FjDTcrh8o)-Crf-eXN0$Q0h2TJlCm%"tRZJ<I16J:IcR
%V]f/*)!#d)+@Ao`c*RIQ+s)J37dl'sM3F54[fn,R6m.[2)MII]15*-[!F^>^-rjjM!)VrLW]H0C9%qd-&?W=J.ci/9l%a"D(.7/"
%KFNK9/oud7'l6#-a;jaQ'nAR!M+`,f''en6(SIY/lI+]8-(XgDLc%`PIjb4+L$8=FVBgd\3IW;K?qXtZ%^se8@e*XJ]i<S!i[dnF
%L4H*uMel>&FKV'SLq.$,H3"WpHiZ8d'YsOIYKYF9O9?1U_igid<i6f`Yp4.D'1iQ7fbT+$6?-ig3`mV3A3%^L_(_qoVSHT7E]0Cs
%0nAIsWIQ%Q#T2^A#*Ls)Y8@gio]P!`ErSJ'?_89T#NW2+;P[;+0k@d^VTj&#Qo#cu:@*W6iWPS7Ea]+74_6XB9PCi1iiCm3#@WqF
%l%:aI-C4dZD#TPiiNqA@aAVH9K5;m1T4%>WSTl*1J#n&]'fL]HmI;b%OH#u.7mI1&'W?lI"6<Ru@Z1hIgr@o(90>Mm;<+[p;9)O1
%bD%rh_fQ0t/dU:]I'OaB)HdO_r.5CH0kqabf.8XPS\T=M#p4GL!4a_g+*b?=_/eIARBFoP5`/Eg5m5Jd:_"+iKM\Pgjh]dX8&Sps
%b7c(`P@pG[q\]V2462'i(M^<cc)Nm58PIMscMZe[D2.hu.tqXRgB<2:JU@sHJWNgXQidU<1J!gXYR:3D$o1/g-Z\_s>rT"<`gNXE
%fmsLh+D]P`Y(Uo,*)^;$N(c-1qSWEB<-chdY/tflMePY/GfU*npNXGVL5[.`U-upFF\$Jh#!Ci[35.=BJ3c6PaHQYee'*EY.rfRD
%(\P)<:3o2J'Hi)Se1sp>).^6P=&Z`b""$L;(>2dLcnVHF69uL1D<*qeDk(>+d0Z*8MW@\p:f+G&-$U0q7Y8`db*GGsM*J`.[g\OT
%&Cb;.NM/nsj-UE+UMsM*"$hF[D;ZIO6e/#UhW/]8/07+/FY1!.=ggZKAQOXQ^5BB3PdgMjF:@"3[5:M_j;AqI_T'-_.:qh&.N9>2
%J0PJA^Wa#p5Js,NSp00:#mc)6dt4D9MV3aJTuCd_6@bFfE!ku_-(h,LGq)KRZL9!:hF+<l_);uo$mCdWFLe$L"qnLuPV[T_`aM'a
%!ce@q,D(p]"'$s-OD/6h=^ao_`!'GlgLk"!q>UTj7#N5>_Y]SREbLPrZ5"SQ>Cd&<SNPb$f,4OPYeBH"$>N`MQ<9NkCl;-=+j:VM
%U?D#\?t9.(eq_Lf#7?X"nXqXe?:`b!,N8V\RXmB*Ssa;gbQ:SQ],j$RUiBQNe7U)Nrf2W%J08D%R[fcM:]ROtH-;5iM]/!C-HAFb
%UdB;nl6;Pb:,W,I,de97L'Qi+@"n(>M?37`Ss/H1`l0JpUUF9'kD"K:EOe(>;S0b0Eh':Dac0opH*""QlLJ+P:tnKPRuLrD?'(H@
%15I@>#q/W\Ou<@Q9Mr_n/;[M4TdI(_M9tGMT">lrDjeQD=R$o#@:$IK:$K8>C_VcM_mA3>3L5Q/'!@%WB1gMVEukoQVQoS?P:`$p
%Jg_gD(N;soJ.Q%nc(:I=Y^+1'>;eu3pVYSqgf&VEVu&3\")Pr>]4F"8_LV.Z@7>n6#!3/M!Z@S_UOCU"/?ic@ggFmAE]dDg(=JRp
%0Glr'H]%unVW_I/<<[Y,rMR.[(2$+*(65K;c8l@]f4!AU.p$1mkK*MuQ=T)qbsaD</X]CRZ5cs36ITN#;F:JJ9d^/8+qB^%N4,L0
%GUC$Ke:bZr/!U9Jh%HA")R?^ei[3BFXM4b'DP.afbL%:c[Hh;>0JeBiNp!ISj:^,S;S`g,6=)oPn.5[-BY%rN(Ar>=KsLIS!!R0U
%nj<Q(;)M_h#fmnK"9UUH.4Y+_K8rE3h<:ce)5@+RlNX`e\cY7(X,:F)<d2o@@Km!%TZ6!%ls]*p?,kGlfaND"L4XHK'L6(C>8'?K
%4n+aMK4(P=A?sjBn-J9<A:s):!,&Jje2D^b+EM:\9O3FA$+#Mk(0g0V(8\1[4-b>N!W/3AEm,5]9[?].BNGXt"5$cYPo:ei30pBe
%:dq2tMY.iD$nZgV>3F!'q`0GISMm($<)Q_BL%@(2:f0*O,8k#_%ZkJ3Ig>9m<1XC^D9#Z\D4<\t:cg_Bq)BH0V'Kj*6>T[Y4iBWF
%m[%4!n[gAJS,p]?HP$TKjPVnHCjkd_qa,ZEL7u=bG0Rg&"_B9jZmN&>*:J$NR[34_#YjP-FP1LrHA`Ak(U$iH.n=3:(GAo>%->,C
%6pPQp_pJ_;.tC]7\V_^LU.S^-K0W@-#j$tGhG<l3rqm)K`9"*Ri6&\$<<]e_dF1pB*(N\Hm,'K[adO$l*?`h:p%Dh0a$g$jK29-2
%EABQg1lr.tQd=2:`03^l[M2/q!f-h&5dmH"0RV`#F-4W*/#%fmmaST`,s+D#aG-'uV?,aD$Zf<3]-\_q@klUdYZ*nPQ,^oA\mXH`
%Z8WSU>2aiX]iXKuA-,"JS+fkgjSDJpOIjEkq-Y3cXH?I^/Q*WjJ*BuDTII1E/n!#oQN3AYl<1Y@%7TY*RssSoJ3lst.8(BiF1\KM
%/a%P>i_kFV40,H30`dANaLRB4aY<g\i^:-S=]UlG4s*PY24*-A.];9:V#O^Gh7uXK_i(afJl$%mqnjD=K([*</R_BF\nC!_T'Yl<
%1(PLt6E+^ST(YBc"M<;IpK>$/`(<B#Z?USYlaeR"S4CVX(]*'d)I,-NAN(0GClrj-;qSGK<]QmeVC&8#RS)5g1K5ISc(ACXCrM%@
%%Lac)IP546>=087hUVnP2GH&aA[_]>l4@>\M60$B2A5P:ar:\f->c$G[M?5u!/->82NrKY!(>"#="G=i[:nKC'b=MXR[g1Jne"1p
%n"O//!6iP11OWDk%6;tNTc=?U<$Skg=/MS*8djj:fH`b8L+im$E.Y69$Zq#]V6ikQT:sdQUAfVU+Yk)%0(d8%"B`90P!bdBO-J<c
%L`&0c"H]-o!8hTcbU1Bo8pDIERLKE0/4Fna73#9ZbTk_;EEuYX-^Ir]0gqYOJ:R2f<sP2r^>b9sVp>@K6cDXR8'&fhW`9Gq$E59X
%S9M@Td_+8bf-6CsrZ(cWJl!+H=mc^+bV!U'.;6?e)/>]cl^q9uaad8I"7MlI)9:;MP#IJZ/AV=H@fqCDq<pY%:p!_#2-aR&@*8,W
%.3W';`GiiElE\MIA&@0aW8_]p8=RlW0hakg[eSAH,u1D8njci!OITBL+[Rnp@A6"g<hrT58@U/i9i@<fS-rM$<,e$skG+u.9pEeS
%<4XEXpWjl5^WTDWS#CMF!<q*3G5@lE^S?/p&$\*L=bhnU;B4+AE+=V8<S);W.hLu;kLmRiSCHg3eqD2$n8K49eI=ZG4-+ruApaN`
%3*hQDNZa8[m"F0t/=%+nf4*OR6p^IgEFngND)PT9UmFnZH$Z&S!XGcS;\_*nHdAA#;l07c^T-T=L*E7*3mt'6-Gd(L"B+k1C>*ra
%T$snjoN8cAQ%!T'#3jP6*.sEul//eYC)G/%#<VF(W)[rtZ([ncU5,+`$uuL3#(`rC.V$q>'@R_qbsj>@A*+XCLg`iU5j]H+_?a-#
%%K"AH%OeZmJK+Y!+]JPXbiW"[9KR[bS:_@#/%3bdM('iR!p!RkJY;#LYf)eY#jF)ikj0Lc,F$G4537Y][(*g]DE`OM:hX$<k'Fb:
%[cr&JKC)4OqLG8U.6B:]8RQ5aF1O9.,_87BGb/"GVIuj/1,AjII^*IF+',hFDPLUON)_T97/idR3Z>"3\JN-1a58mK/aV0q[]+7&
%KTQbAOupJIF)l8s4T:'L;=`?7:a$n]$7.Z/AZuKAfp<ph-Dt0YLCYG^c#XumW=N!F4-Ij'B_U&$EKJ)&UfWUQ\bM3=K!Z-(k*p7M
%gk?[e(J2=pITOsFi#"^oO]<>=Op$Nh,6i*j)^(0YN?ReL`#\8G/b0%`efNf^fPnjP%`6&EZd7:VnAsJYZ.@T]UPh*NaBRKibCH[J
%4Aa=`JNgJ@ij+7:!\0#t"cG8o<akd:"0lg:3Dc-b[M,$K<?PWm+\-Tn5b(dp3Br<Mo!q4,&K^D_&<qj2'9pip[]0Xei&2[K_hiR_
%ne2GdiB$"%N_^=`%$d:eTM'r01!J]7s*UmU-[chDUI0ciL:B4eB@'6\>/C\\M$Q'b%D9eC2H(D`ad$"J3$C`^q);ScooG.CLH(31
%RY%A';hOa[BW@gL>pqt@irod#@j_MZ64r6jO<)stD5!pa-Q("G(-n7@%$Iqp!3o#oOFd?La>f@03$'Z,o,QH,!L/p/RkJN-kTf35
%%P7\b%Q;Z?,b[s;Kh<MC[Yf6K?"DOgA?sh1ST*Wk+BO2s^pNcJ7/\?AhBN&#_JA@<K)BuNl(l.U_\3$5N/>b4$$^JfO%$I'UBY*g
%oo#h2n(>c#F:r@hPZ&N_fP^u$C,/I8g&T?;Cbbna'U,YTc8T6L.-CAtU-#OX@>LX^+(NVf5a%Dhoo+EfF42m,hTR`G(/7<E2+-Ar
%COMb1(A("4aRnaddskl;Va&#75G/>pB4\9sk.me(5la_cY#\@qJ0`DD&DtjP+Ic0WEj/;1-.;hgdL@.@44jVg&1C=d^e?c;l.MX.
%9X_qXA9kHjL"[GTW#Sn_C%qBRBqUJ:!5p80\51E8[99)+RE?<&*+g]R_/n<A-l^J@j\lBaa^'0sckJ_n.p1Fc5tB9EE"pg@pD,I(
%;AFVDO5[kkZN:.2ZoSOk37R(?jDZGX6c^fKiG=OGRi86O$m>['V"[8'+`b^3`@*"cd8Gk4W2c;tWa&]E3tB)0:7bniT:Pj(GYX0"
%k$]XBGG&Y;XQ>"#:+BTE3tF@Mh?uY(?u[fI?A/"<FsW0,Et3pNQPN\^0;l:KR/J0M$4\%u'nkY9&pZfB1?2eS#<I&[%"*2d,)"h2
%N*k%2(J@lOO-^O1>_k2*Jo7ZHYK''%YiVh\'<kWX=4Bd\/5sp[B%8r&03#Ac\^#kmZ#+^Fig.M&=mm<hJ!cD<kIZmRE1SQ2BQ)s[
%S)J;8hS8q7gORfq4AX`V_,mi!Fp_];iAbS?,3ss#8-,@Wdh[t)g\Cj2*C$g>9lVO2(UeZrE!`GMrt247*BD:jV9dT7Ym^`8!PBKI
%jOgTnbA8_i4kY4+S-e38oGaRC42M2/m2L#E27k!>P(c/qDRP):TckFcnLY:<:gk#AD?^6."O7`1[Nbc,H,n1<@4-,3QkaGM=FBcA
%WtKuh!QM#iW=]/6U67iJAAAc527*)o$H\D;E%j582&>A+8N-[gGs8G9M'aBn0!="fH*NV;#iFGf^0/PQ5ett?jRO!,!Atc%X=QOe
%K^1ApcXe2YC`g)+A\j+08uaN%6ZoP8AmGPHaT/(BB;gO>;/)CCZacO@&nledAUl%E4#F@j"oWgT$5Kfsgs8r!S.kMIicE^`8sj<A
%qY@Wu$m="3C>g(&0aRmRE!6>*]c74YaG!F6K&Bf>F@J0kSGtS.L5=&<^DlCGkk)ZE_]Gg\c1cWd("=tL:a0\*N>b!c$-Uj#!Pqpq
%rF&'R6d)91!)ci+mp*@2i?Ve8)="^^6QL0`I5u,i+L0YYU#QbcDN/.92P2[6X"\L3YEX9aYbGrWnc6'K:WY@EEst%3NTH"8W<BhP
%;O2sJ,4Mb>R\6s5aQK2S+#:peE<i9>!$WRCNY#U3ij%]o13e=/(:PFiZq[e@"$'nlTT1@b&(:mt:TfMIR>[kiL)=qm'CO9XfNJF-
%<G!B&Sssa/]8pkHYVM%a7TQb4;F//C2b9@4I4P\CfifiIV,GrKndlf[5-9'Y$?$@G'Y`3%qkm)r+,&J);tta</DW:lc&ie^!-(`d
%/FjB<1"\te^^ZJDC#=]Y>3]]YK3XWT5]QrHDUPuhF;nVJB;jQk/_Ef7o_gH"62uupLEM?7WB7#&hGj_/a`J;RA>fm/Bf^gVQJHa2
%binZ/$"$u_No1?1>Tu5d6\>2hiLg*;3J\d7:W7'*TQ2_Rpr6H7+LWq9"[LrVb:u9p;kXLd$3U0"Y&qm]+Fm.DO6kj=GZ3AueFh<3
%_mo'T":Hf_Id6.3"$[\H"#mNblY8edMPXE^Oj7%qTo[QEe_TL+EohZg=]WS'ESlc@2XkhF>\Hcl)!(:5G9Z*!DEi7ERBN,r[s&(h
%ih*djRYJWC%8bXeqLAuO2m,7%h?29h4J1I[8km$@JU&!iX=77i"N#K!A(hV.BDh9W#3soPJ]_6hZ'>`JaZDe9X0D%J7,9AGd'tGb
%14EVSn)3p$#(9%8ABFC"9K8@BIQI<L:'8#e:t=.K_X\LApc_c%eE+b(Y4Jt:,k4pLD;A3j6LDo);okX*V$fq%ltXXb'MKf:d>#9/
%>Z^hf-7<Hg!m2BF!9m-bO`.BfjI+[&iZ'mW2jE'm9Y$LV+`b&G.JHAPA"KGJC,\IPono6je`_B+VT=8sK`dr?"N]Y;$t$UR*)oqU
%Q5_='j^./gmbJ5)C!7^?ds%n)\uqf/EPBT4j\BdT?)XsDQC;i7Wd>nTWbLc,O86X'5U>5#+O=":aL'`!K/@e6P&%*>?uA8&,fgBb
%J9/gD-b`A^Xt_h?:WoGJYOaUo@3@>lamDX'pu,om81le.]6=L">t_?"`bAF!'WN9_j<p1UX[Z!I^lV58js$E+jf*kh=<F#$Eo0()
%1XctQ6c2o*@p?+aBP>dJp%60l&W;0E$eIV"cV4&iSUdGV[Ji2t>P:WVcgrF/:k0hO&KoJr"!Gkj;gP$+j9bWE*#N1I>QP([_DT-%
%]B^C#mbpFuZ!`H(WHI9:.%UO8AN[M::4t/,[&WW-glP5L\JWuK$I@<?raNp,l^D"V\?=5Mh3-d<Z6s5d/FL=*iol.+$9WaSMZ]SW
%a_fCq64SB9?m-I<XH6+G'POGJBu\,[[TX;Pc$QH()hCt=*4`rpJO&"Mg^iZtF$EXo,Et[o\TX"H^L)SchE72kTcqg+!7b(9-JrI%
%!lU;WD"s;S,8?79l4B_;X$'O,oif7Y`4cbk6JkAUVsAcF42f^:9ri3c+PTNMSj5I0eE*eJriuX?PZh3@Q=22lf[]IThcHdp'X?WY
%JSCG'<I0BCHH!2%;J'\^0N86<o.flJiR<\<Qg<T,el@Nj\db2>),#1j?Q[*O;&=KS'#bS9b?#JiEEli#Q&Ro:eHi\\h3j!"'X6Y;
%pPPXn^rar.'j$S;lCo$maoYDMpFQRjN$*X%^O%-<-&6\m#r8M6ZgcrK!CV7[m$!%mEq0#QO7Vmi`A1fglGQM`C=Q.2A1Q#i08Yel
%Hcf;RY,>HV!**)j\T4#YbFZ9VhiW!//>5[8=E0!tDY4XACasrDa&<-N>0mP.o-T3XgV?\'LYO1_GCm1*J4r1(c&&,]+=#7XiPK0*
%bM0%30OPKZ;iKelr'P0mh/\@bB?`tO1<LHVHRK^d+!)(,m^<9&N6kNFPT*56!lR%0(:1nYnYK]tRTCY+2[7rmmY7PqQ_tIc7AYbT
%QQl[1-Qg'_JsgD$VIlSEZ.JqlN%T16A`gU;6%acO7/$W"?.K%Z_f[rAKPuEm;Zk@3Dm7eh';ci+IM3(qgKuQcP#P8g&m>#XVQ\0t
%ZL+P"s!oMdkR*Qh`PLL]L2BM)7+Y+&@\Brg"`!!hEDR2QbQ:,j)hUIZNhP+!JLcL""6>`heR@+#a7^=d>o#AS]<$D]iUB!_E.#]-
%F^7q8Qu4$*f3^e:J)`.s2B2E".&+L0ddjF@:tuS>"?u/Pn997>C4kA3FsKG[BkP&HM#tA`h<Rh''?u-dFEQ6n\5*lkJNuu)iMNbC
%NcZBti!"///gQp7!De3[K_F+[K#"iko4?L_3[Jm4rU/nH0cagD#uuf\\AYYuV!#q64CfgB/h][TKStYVX25CWbZK?j_>d<fR3^I*
%,Ye+<I0X$80Ca<iUR,)l8?K-C[LhEb4$H[9aHo7++HU,bh80>Z`eYECk*$6hC8-]tc?T')Cf*>]G7M$`UclYA1dtSieJXBs<aYX6
%f1ul?;rY!Ih6F9^W:552@l[6Y`N6L4qEF_GqSAcJaA9Tl=23`F2?"WVrXNn^7HI+QPKX@V4dTH,J*f^Egn%bnOe@_=&:mY;_s[Hq
%\5^EZFp+.Pd,!nUi0HS7$LC-T3?hps&'sCZ%P5F$EcZ/B)njc'7SA?S?N\<_D71IQE*.eS13N[`Q1lN]X&)'ekQqA>o0+c@"n$Nl
%hKOc[g$S,&eG&'tn"Lu`e$_M#Y,/<+R!^[]f=LjgZVYL'Y`LIUGZ]6U1PmPjeL/mHQn"FPMN8[aLLGpDkj7@>qMDfu9%sjpc$D_]
%g4r`srh$Oen%R\lEN&(h,dV]^3hK/8_!(OG\'?Gsl:CgE'1^dNSGYUa\0_ZKpP>D^G;sK49][j;rs0NC7!AA"h+_cM"f^(fDEX7/
%:O,ALS6HSc&Cn[$I[ft#a(`>h<apki#%]H`3)1IM5f@.r4.pt'g7dHc<l#9tM:+X#3T1k52mMX%7!c_D=WCgN@IaXK4^+h9RDbQK
%VfGY/;<k]77$Aia"G\V"k>kSr+ZYdlg&6f\<VAQ9W%%;NLe?DVp-g%"6m[G1F[^[ncauJ@FosNgC#is:Pi*eJCJR$mq%UCC7T3%^
%_+$%rb*=(3^`1b^&#\B5d&F?:<%gqWL=Thih2MDpE2cQ_WN;T<SiRbF&._Vn_)Tl9o^/Z"YI^s<>X=V4MbIej;<!Q`[R^utXWS9Y
%irY)(i:Q:q"T?%pF:i(CVF*C[M0i7QF^5uk.G3-/)r3!.hjP2VWJ(=VCj#N\B9rj=f.DdM>N%_5LYeMKZ]oO>7G@o8a_B2@Kr-'S
%<Fgh:_:7UmkJ3lFQ*$P&]WkHhD,'/rHW'dBnbMsuhBiYaC4H$;SkRliE/U8<;6[O40/%5(#)2JV]',ta'IMQ.>inmQ=bf.g;-LNQ
%4>#jV=RX`8EIF_JnV[LLrl#`poW-#R[i6F+;[$cOWFJ;/G+PV[?_@Rn\se=-"hVCZ?B:2unEO4Br[h[GG/0?Ul7dtH'Zt//<^K>n
%(K#02NkX>U"&Xa&B[S\AU:f"P7TQAl-0V_5,hNFZ5_Qi+GpW18K-lql`pR"eh%ZMDHSE&jP'N8HC'B(YP()]:ehQ"@ctoQ)LG4F4
%:!r-el7Y5WA$iR@fD(/L=p,CA/"5Vr.#J4GeC!LSH\?/j/-NUX5'>45?>.]Z;n\eEE]M*Bf@t#\?,S(D#%r(V03=t'OnpWFCq!U+
%C@co96$kbRhfHa9/C,_.b"+TbU\eA+f?dGa78fW.PI%BS/K0G)J[iQAT2pB;1Bk^`qMZ\#"Y,B2]VJ"!U<IF^q%4a:DWr=#?uPa/
%i-88JYp%T<C%Bk/q1i8`MlH.?:7[]")W:omAD?Dm0=*T'WiW4.!\1Zef+P]`8UI.TRC8u^?tT7[eX%(>D2,U''c<2h\$SlTE.0<J
%>QcZg$Ps(fM9]h_PbU75V4J6&O3Z-KQD..*RBSS0_JKIRbg1b*)A3!A"Qp[paN>O*Kueo,WR:@T5s?3T7Jd3]I5.+pJBD'Pj4BL*
%1V6)N*g5n3D&M$d?15hpK:`JuUBV;i,V=$m?7G^]e(k/PYFX`e+cei!iY?c3jn,#N:5Kk)hCp"I_Ho+%Y8pmf&NO#E53-E%8&i@/
%3"\O@5lFQQ3tBfJqO0udScS?3!#ZBZH"RoJ3WN[/cn%me=j5(]oTim+,,hYljMhlQ3KnNPrg_&3Rg1V/L,DL\p9[4?f>Qr#,:pW4
%o2F<J_IV[C9l#Ct%$6*.ZFn];F.N:Nqr\pQ=EmHM*(o@YjKK<Oe/m2kFLXCB7CDIRG"7\Q)dD.eIS*<a:R/o+[R5>DT)El[6GD3_
%8Fql,`Hn(-bMXgEO$dE8k9B8W>0Dg\GVc_M?S<g'o56Rr2MqJ7e]667&IYB5EZG]X-E6M2g#&G,LNff6PN%&faC_i)E^:H+]n<VV
%m)G`QNQ6qe?c7%Mcr,'.].c".$"6caK-.[V4e2-?7Tl*2!@)jBCQ:md/GS`"*BsIN'CS_6[,QPjLK^X:gO7;7A1BT6p=ct>CG;9R
%/"e+pWgOtX`n#t9>*@Nrc@s$flqQ=U"[W:+RY6+F((D`&($S^;\nW[s1pPqK_B/X*k20*I\=3mc.F^W,6b@GFpXPB1=05udY2mbu
%&C/3!@odGt&V?NE"d9:!PSsrtih?2eF).!_b+P@8bA=d3h_Y\Z+8ea7s"$WCe=KZ/#U-(&._]"'K@'[%Ca4em&%tK@4J\L+Y):b7
%"^g&#'f1'c;]C5R(e_-pA8W:@]9F\+;^C3gcJE^aN(O84=6ATckO\&k:&d.H'):_9\,YpGV>dH:q>.G3KQN12g$P+MQhlW4l_\X`
%8n$&=XVLZ]B-/+[NS;:fJ>\\em)l#4=INT4rSsNuqELL1<Y"II6"#*mrG_EF/ATL\IOGLp<1o(n*Jtfg5/6sf=g^,cgQc$pXK]YK
%dEc^_k<M7uA@<:hr7ulgqQs0,M/Z)DpMpfY0nme7)ddY*'R4@A/0TR!9nNd7s,N)"TjPW"Wc$EerS_hE)C9>Q2A'[8VR:@K0Up3K
%,[-,N>jFR5#]Wu;5$$97Z;-pEfd1MeI1^a1)_lL@VWVa>rdu&%8c:b*Irat,Z#kr<*i'FF'(hp@eKB`E%#BK=9R73jWX,t[Z;fAp
%P'SRTRfnKT(Hrga>;N!=\s1L%V._,)rh_l,n+PE^!o0ob<]':gbNHkQ92La<o%0&H^GXlS`[>s?29eX4[Qm3Hoa!`D)#`#>&!2IP
%*[NX;Z^Z%);,o8kqVEnLBklHW6D"!G.(RV.+d0`r#0N.N3:R%@o@*cLLQW1M&Ad^I-+Eb]C\Eo0Ba1>>TsOPbYEY\1KKtG!&/^MH
%J#MLr;G/iri4?%e=!L4f8<YO1*6gRdP;Zd7gMH%QW*nWZKrpVRQj,luV;K/p7Q)UN$o8+,FFW(>CVS6H$_>$3YRu5Q@6+!rP'GX#
%?fh80eNT`.ZU@0lUAf3=Rq=n472>j!T]ZIFUKojH\S+H_Tr+k!ZD!/ZSM@%XcpY3Zk6Fi!Fo-t_^r/Fo9QpgAbassGJ:5[APKf*b
%&-Xd6?&:jZ+c:]$RcN/IXhb<5A=Wc44_(p.ZG$1$/s.*G8lSTB)7nTC>dg'LD(3Uar!3>@O9EB3$92H>QW(>fWGFr)\F7G4ia7Yk
%pL^u8S83^,E#;^o60#a_R5a@93F%1'$rKldR1/W1nJa4FIZJ"u.C"mZdm9,*!BdmAa`b[b#s]+(mqq?,UdWQA)&4\7]BN4'obR2;
%,,bD[Tjj3M'lacG%uq^W1ZSlM2lAlM>24%dD,>c!):bqR*Og.L%r+,[[Ukn#D2B0B"po1$2b'Ngl?$8Kh.un\aDAEUI@<ujGc*sm
%b<t0j`oT;Q3'T+pV_ga;??1p/WXD_QOBS+up.Y#Q,<G!7Q>ER6,[+(C:n)Ft-s!ecW%&gEHde[/<t71/_W@:KG+45U*H6a-1e-PR
%U*Er@G,(Rt:WYcd.;)fqPnIVqPMh2`2$Z27%X[(,2YXd4b0*8SBcYo+eUf?;-g\?e7-0\@E9Hg(:2EBUg)OYid-_ciQ=k=afXJ#8
%^DIE?Z6!ZVUZu3FdCUJ*\[t)5aE:PpRp<bIocVdtb^N5g(%C@TRMZ69$;"\Y)tJ[0g:J<&HgSu0-C_Z2Qh-o;`O]%nr95@<9Z4[.
%L(@62:j$'Mh605I15Rs=Dc+2ucXNUb-@@J/pkhc!$p)X]Q>d@NKh7"hr1_qd8I=Lk92"FQQ2FR-j=t!)lFB[IJ(3\FE@?quC\hN!
%dh#*NK?<hN7P.B4mG:O8"PnLua`M,S5kl*ab769HNEV7U_tc`UW#."/2QTKq/2[#fC.iY3q8-ega3Q'B`"3ml^V+@t5Pis`?<#aq
%Cq_,W_]_e5a5983G]c,koNO+sh<tupaO6$LN7.<H<7WRrrY:?.]/-M'(N#boVJNcT[j>Vi"U.9rMhpKeeWr]UB!YRRd;>7_OSrK<
%7ILg/UM%KY#:\=Zm`LL3l-'XH&IqKK*Hkc!gAeK0lL*OJP1fO8JOaNOTEV*6q9eJVECG"]'#'B1rY>O[DI.;OZ72r)V5@UaQWElC
%gT'nYC$-&H_1.P$9$oSX^ctMK=u<nt@;Mq/SuCoG=#&,mf<sX%iG`PUh:P$l1K$HH7RKUgddVp=EhO:H&K03fp7MM`F%r"bbm$cS
%EasOM4s*WUW=^/fmI$.B3!@,F5cQ)uaQHT/=Q.p(kZ:E1::ed=&]u%Kqmtjk)!J+r5;p`9)I3D.>K(BMQSEag,'V"Ndeg*(q5u%B
%ZSWW>AV,tZ>[o[%<ZIJ(Q:b]]0SruK<FF"U#c,d:`sZ-6$30/OVoGEu-NY.oQV/0\'UNrraHGQ(gS1H+KVln"JL0G'+u)/&;F:bc
%_J<D!m3cmOXCqVCWdet?I^6=,Ys&j*!4$d<Trs7c0lc^jc.O70LbRb,%+Ru`WG'WE.uFQ7esWUi`X6>r;6JcH("Wg3ZmO6Ein/g[
%-J?b,rSdTbagPK,*.njc$qkIZEjKB70M-m!:#1;8or\.4(nZl`pIqoc-9p'a]MH#I^&*Xp%la)@;T4FFaTg'4d>[=2Z;E25m\n/;
%5Y^JJ;$M$6gI9J[JbJ!t\\<]s33U$AS2uV@bSJK+b,Nhb3L'e%<>EY[da&*09f7SOm3-p\SP8Ft&?C*(_rld8m$Mshmd%0'>k^mR
%/W+38f#,joZn/hL;$tf0G9l[\JtS[:$R[:?AXAH^5!4'bm[WDW2=K<nSb\jS/(+En^o$;S$;P(r0-u(m;-ro`g%TQ_l':3hp.\dl
%Y43hYAOB:)gn"SVU-bPd?:]:N4e!oSVptHq*e&Pr@i*e5K=\21G&W*8ZoCs9#1mST$T8E(Tt:n1+oU`s[YMu6Bec]gRh+s:/T_^i
%if#Sf=rI@H.<1#&EK(3-I1EZbUN889>&`%mMeGB<361DalHgQ/@#$,qUNrf?Ml0Q3/05/hNq:7r9PX4W/L;>m3Sdu#O&.)WcP$P7
%I](G50RbMm7:F[03_.$:-930,?Ob-&rS6'J\kEptHIDU">(87hc[`IBiD5Nm]%2;j[6!#oFLdhg>L`$$f"g.RBCq%G']jfjm$G0t
%#Q/9s4Cl^$i:B@R"?^msN>O6"MG3,L)uMIW_Z8osnu.JSR)fY_N9H9bbNhL**d7?ooLUYsNf&3&ABVqTi;eE`r>BUB]:e*8pV0PS
%T0hfAoJ0>k5]N"\mNsJlU1D&*Sg/B0?BKD!]sn-;3>AtO$js/$:#W'8Hi[*@;KUA^6\j#4?Qu"14llB;P95)OUd<=_><mc2Y/`>n
%WX\qB7)lc0'TA#t8=!tK2#4^C]JCu9D94t+eoQkL'(8bDBISQNjUgrrY`0oXD57].&?"Vh3@%*%<q,jqaruI2$Yah@Ru``u^.UL^
%=6L\oo8JFklpnb((na+KKAVse;]tYnf'3f6kK&SECPS"lZ'O^Z_Y[:0:'ep-K/qAS$?;K[e+FcTT=!NVEa/7bU0B%G4;.LRXY$GS
%gDaon^R!ZR)FGa.KhP7O#OuH05tre33GfsV:BZ?)8Xa;l)adGM^:spGVa-"<e^!UHUWRVNN@?0>f.kebg(bY^<:bn/:,SA/j6&_D
%&&\;)9Y18-Q7IF^?W$7b:s=^.s0BEnAFE[ZpPP7/>u20#q>Du"4-u^qmUan/_<V@sIG$20)h:*VRtll:QBIG8Q=Hoe"`V@ps-Nr#
%Is^Kos"L5MlL&\Znui)E*'t1&@._2b'V/A;;MV%Weg+XtquVPq,rfY;qF69E0I]L7S\4sT^Tm##a,;2,2.W:G3:-_nF+Vj@;loVN
%p'94&1;K2f(#q2\<8*+ID:E<0+dRJCMk?Cl>';&@ORaMDWbKoXl-oC,rMtiimGqG16F_gU=EFfk0De$:$?'CM4/tN2aG[JsYOe#a
%GjT/(KGLGhC.PE&1ltMsrkW/T!TdOC^i+U<'cr\Ki^OmQW?*38.dhmI?b\N#p_PeA&52@([V?^/U=Z*q'.t8nG.$prPB%];-icY6
%;Tas;_*bbaM*2#I^iiNj[HcSN:HKgC\87kcMipa;C]GW8#,%s:1.5^+nO%V:CjYVK"Ap?tH*DWI=<-4c)1Qm!_/3?/[>"MsoX%Q1
%APS>a;df/BUc%%-5c/(FRY+e2VHN;"VW-ed4RVWcKd]q7f(ZBpQ"r:Q1@:6Za]";0),`?IRr0Mci@jeanT/S_6=Q@=-:]"DR/I0!
%p2]S3Wm7rBYSQpeU+p9l@Z]qAZ>r.<p)nSk4fi"FBf(7s*]YER!ZL@\FsrV[<'O'qc<%Zd,$(>;_k,[eiVNT-4Y*CmiEFW"WG4_@
%R8Ul^OTk[EGME6ifNfSWOpZ6,!1F7<q)R/#4q6Bg,PjQcYoboGI\jaJNKsG++0q&ZphUj*(\8PE/pGur+dc6a$j^UDCRZ99Ok"cX
%cl<DVq"4o3lEX9CS9-bc6WH^X%(i;M:AR6one,.=7=(W?#'IgNP^\r)j>r&0Fg-J]=a6JNLr9@DM8\j^,SFmS7E^_UkR`rVc55d:
%CG-Q86$Y[HRB.?&VouJMC*KQg>g%-2HHP0$g7dhOK!e6ENR(<a'=^f^g^5nu,E$#X%'%IM.+L,e0br*Mm&#8D$Tgi-V5p<^A[^i$
%R"JcEdSoi/l5p-bbij<AVN,Pk>oTrONh095l;`sY1[m)="FilGh\H:Y?P(GI@WZZjZsT[ojf3=Cas1OIo/NI>n]Mk-j,[h0i3$j(
%^Ct,Hc^mj`8<6?Zp+TV4Ml#tW-%pdRM&RT^&eBL\MRAeQDRXZM#BokVD<djbE=?qJSUuNcD$#h51Pjag<?fo?Y1S%bqc:U8,c+$@
%Og[0+^o/Fag<=,C42&ds^/'GG0`(2[<<*Nf,$6"F3VBfp-qQO0ZTB'fWS]KF+?#WGa@k%.S^dBY0L/6SdT\>gZHYp2+n"t_K`[fc
%OTOJj%-b1hL,CRV9182?HOnODj7_)r5ekq]phIWoqM-WS+(1(t.Y?7^%H49:qPLOu&rIH9>oW5peE'Bu[(MIK!S8XgWcsc'`0"LP
%Ik;U_'22i!3A6Tpcbd:C9si`:5XHmS/53NL+dEsgU;2R4q>+EM<f_Y,=.:bYhZ=2gSkH)iIG#mU_2U+_pHQ\KIYrMdW2=dYf+lNM
%0/egdlp41HCU70/]cYUBCV0Ni;YA?6T-Cf'[1$S^-'<@oPr.0qWp5]MXdMlTYeQ@:?Og=[p8r<q5>m!"<+.[ug_\cla=pk&R8?)n
%()1BP3qfE&/.giskj&5lRMq-q0*;L=+q2`7,Z^8)6>JPi-]"5UI/:/Epsk]")PZ_o[[CTWM2e)AjN#I"IJXadC%7f,DA^asQl%%u
%L)7[m&c'OQ3^ikZK8MQs]3K51,jB;KU/mX9h5n"9roKqkdS)qL9dj,,IEM:aCN]%Pp5Eje$_h)C$]rp2N(%jP6MF2K`&Fc$j5*@u
%s4HTIH:[T5,>SY+dNd(!NfJu&9RfH(T6WjM`Bt=`p/+D/9tPE8P)^DbSolg=?l.-4OdRn'do(f\7-@M(l?X+8<A-r"8'\s0XPUOE
%eo(#!+p<dM?#(lM'!dmNLb^9N7A6f%MOZC+rRD7UGGZ(2Gj,O`E)?;^la(S[2'K]s8H&&bGcdYVGk%eXRpKkOr[JMaCBp8_5Z[[^
%%^@l%CUP)U9o:0>9o-F)EeZ0a#*4*o1eScI@_$eW-m:'V_f?$J9!kPQ^N^TSVWi!*`VFBG\K1dS)>$AhVN'a8>*le<4')68P+'r'
%Y'4X$&/E#9Dah=4S*q5Q+!J:EF\:n;-"86qHDCIF#NYp\9?HA>aYREOmpa!F8aD"&!l]%.8esFV-W)-.$S<2P2--B&&7(UGZ2JD9
%Lo>[ljEPI&ie1qpL&H">8'uHOlC-LtJo!jCYGk6>"Go"aO^i=B:?&e8>Zn.GFK@Dm.EGH+ch5]Gi^BX:Me`fI@+%a^4DjF0&gNo<
%R&HI8kbcN:V"_4aXlYYWb8AT[710F14mLYkKYHL'b>33E#Y"LQj+;^1;l<)6Kc7,03'Z@?lfK+T_*:FG5o%52<B^&^mu?GTL]F)9
%F?+s=jnM$3#2cboI[47?@qiP)Cu]Dm#_FC>O:S(IkUK5Zma=@P9l%mf@t]lu/p-Kr#FhV]:[UN`+OP5'4WkY#Q4r>:3j2+eA>N4:
%%`%(J^JE]Q6qe?ND5U-8^#_J7&P62#5E$S))QbcKq%;On8/%+2_K"j,rfK2\J$VG'N1&AoS=2d?_kT*/V%B]<lCFYn^nMRo)\;s9
%ndckWH*gqTF&E`SH1fpi&b$C?.o"DAVR!$Bg.tE@Fh?*7>YR:<V#b9L'%b(Lf:p\N)s\GXm-7%]PhSS(hp`l=(Jak5nUjh"<YdLb
%[EDPrpiIN<.G5PoRC'K182%Y$aaTWV\I)Z!`A=he1.?UuLNXqad+Y0R><:,3m;]AC'q-&&YtFa3<TO>DkQF0L6Ysn!h]Af-bLYHh
%.[JIe0]b2UoTbI:d.;-)@nZh**[qPrO,oeOgA2Fl&e.N$MPt4'5dVr06'S,PMu&IWN+?$ccNg1LV>BBVi%lo`1.[RSQphAk$G,o;
%#J'2tI"o2DFUS\SlJ)B'6aR(Af0e9oMZ(^(Nr;*#(_gn@Hd(P4)DsruA[aV1Vjp/Lhq"]]?C"9;I2G.-%N^;n_1Hi'J+cna2>';4
%J'YAeVC%'I2T!LMLRMihN4(f\+RrKBAH]X-Yj1eM%WeY-%<Ff:*qiqq4;d]!$U0_alpO$k7['a5ZN]D`'L#VU*OZAKL[1qm:&g06
%qXEe+s)>BY0,`,4P:=1/FMk^+[@6p'Wr,jf06H1dMkX"gd7s+1@>Y`@H[RaNDE#!@-TqHR%)X8q5Q,M2nG6'F%Hsj5b*![THK9gi
%CJn]FKn2@O_5*m*KXHI,1!Q,;_hS>al$g(mdriDe=La61`u.g@o;.4u5^Pi5lK;,62hS5H%d\BJf&g^:$<W(5O4H!f5XSCW@>'Qg
%j70^ap:EhB#Jg6!ldB\4iIb^$m=R0l!Z$8T5.fPILbah&J,J;tVnP]V4YJVG@CI,=2ZE]Q@fKS)8lLDjWf!ipDu@Sk(_5pX<@J$i
%:#0pD8Ao,]k[)GU`SOKe28_8<l=$30ZE#+Gf!%s<7:H5)(#<-eh?4L^`rSq^"rEAih8[?ja^?#O)DH_DDu\]BqY=(Uo(?(4$0eg@
%Ttt2h&>?-JlD,)j\l62o+Al?Tn3^5k8NU9\j$YH6Eg5@84M@H_O+0pns)9S:*O7;^'4,82';JB,W"sf6Ki;Ss="Qrh>]28-A?=3q
%.L74.5ihg>E`=e$G:8`G^PYY@c_8TgK1T-DM4VTU;#6H`otd%m@_;rR%NOp%Xs4^ZClURYO_^O,]qP.^WLa/4nce<lUekif9)*Ef
%'Z+IKB$g)WU8(oeo9@JF*h?+Meo08t'uW))5T5Z?B*qFcP)_Knq@@%5io>AAoo,Q;mHfPCEH%]d$(`c$X_*D]hBf1^G"d[tLF:S#
%p-Yk2P`i&qgJle,Zn/5eGe2$[XAl^,1Ls\>do%"lFY&B0>8!@a0P4COCK-gn^sf*kSqUKC3StdSg4`($Z_He"nGTf:(:m[TmeGcr
%>fPl44?R,fCA?;'eC4kk^3<Se'Qm_Vi05l17T%-e,!,D&jNNM3SuI('W/^#u,&4H*YKD67Di87=I`-lK6:nI&5C0"?_o6BWbl:J)
%3f<A%>pVcH3PUk3N,#<6,k\0XAlaVGdhj6.[?BrX9rd%S0FT-q`[)Q%Spf(h:-^(>5-lmlBI)F53qk"LVQArQIJ7/K(Xj(QdksYM
%#pQ>Rm4Ir_1\MEc8Z@m;B$S12rp3k04KKK5;`"T,2(4Id@A^)/%sjDp@`VPW*BX]"*8&Y+H"(@#-Pa`q3EMd6N[!mO4<.@^kbn7b
%15Goo*h&=-$tJ)W?C=>a<N/KUU#9+,pgc^&R]m1Iaf:1ZU]e#WGh]*qBP3DB9Zjs=<P=)Uno.1'^\'9H-j)8*2dZ1c[D*QMmk&,K
%Z[Ra8_2'"aJ61f#gb85a+u75/+qAXMDW2QH4am%;0pKjD=ZVf0@C&N6^-jEhYGL50'[ip,6:sGaR+(YUU.7O\8;qXd]KJNXm1?WU
%oo;N$b#35RZY=BZ.qLh!g(Rfcn9Ulbr3\&G$WiL$L@nQmS$6[VNjq@D?dZ]G`iOts>ULYXDH.oa.B8F*ehaYNb2Xn?4*s*=qhkLO
%Ne4kbQj8T.:%==??RsR3k(?W:NO)?8/L,PeiJBF=/%*koXO(alEH8#C!'$=TQ+h3'b)k>F6EZg;jAkYIr7&Bs/.t)UU>/ZY(bSEB
%5DK\R<gZjd6^('CD8_SCN(j!&CeZA7\!HE@)3".W1SRV_OW"bB?";Y.XXdE4R`B\?7+8=Ks%m,h04UMA%<@8B/:j\2k7>-KnanNs
%+-lh7FPd$WTJ`=%=Eprk\J(d8f*A9=A'JN+c5=MX>#7HFr"M[@fd)\H-a"+<F5N1_qLdo6D&N^b[uZR]Gc6UK<fA&@3O(Tn`D:h5
%GA_9sqdr#;P8>1]-Hm/LM('Bp-YZ<<[C(06^&;P>0%M3%_i'u;;*f]cjmr5dWiRTegcIaLeLRK1s1"1TSECJGnnhoQmQkmZ@Ete2
%=;4#`Op%[mZ1^BXesPCV4I;$CKK4fE[g5.@G)t&?EHejkD)W_4'66_D$sUt;gYMg6^IGG',+$#ED4fMMnmn&=&1b3H`QFM,PHV7U
%c[HHpj49%tj%+@.lQjn@7%4[FZpPN&Uo@EFr@:q'%*g,%T<E^PgYGL6%UKOcgPs:n/P=:80bof2T]bWNfE9FDp4CG/,<FDM$N2M$
%m#((o1\dL%K\Npcbse^4@*8>lSnN-]KFsW4\3>T.0NQaQG:?`S%i,G,BL_SCE;<]@3/<n^iIbh"QbLnr01r$.`2s7fY"n5)Ya[WY
%Im_A/%"H\Ol@k`/b@\uVCecSO&,CaNn,S,Kp4]sX[9O-)D6M*YC@t9kZKq$&RqmSH>\L`U=f)/-&)HubCXiO;+V'T&!h]b<en+S0
%"!o_KMF;VWM*8<\T:r\m)X9:GQ_;D3[dKh%EAcRMp($c+d5=.tB*;F.PpnP-,64D,=jhnomj$?a(+iU5VY=-ooY'DZcVkTiNH@u%
%<''rq@Lkik86q'P6WA7"d9:]SC]`]<Klk(m&3s+_gh=Ql;_5Yb6'sYH3h,@_TdW6U;,6K!3!`&ierK._G\nDo<Ab]Za^6f3jOiW$
%+o?&`OKCo/MQT6B6EL4^GLpJp5B5+5U5.-(-B1U8V?N.56%_18H7rJ=3Hu1dgJ/N:h<iZOfVuB&7!n9AYJEk0EZW8e3^7iSrP\bb
%I,Y@XAijPZ;*])8Z</Pf#s2%A9^%"?aj93[aj0Oc:g24:8N</7^Yq@FP<<@K&B'DeQ$Val97%_KJ0]d>VJ;t(?WQLhQPY=DV3c4S
%b7UV?$Em--_>2:m-#9*pn+7g7h(JCXT-eL37sNOqjqjZi6;QM2<"A`A'1'^c(L^bYC.>AcXnI\%8Lp>iYp9&i+WGQpA^N35&:OZt
%ZY,.'07R;kl=^6%jDCnGj+lGjN)OO0=.6hg/ES/GbmeVZ6bSeR$?(.)b8d-ta'lG*Z'mBR=1-6)SQ;4J$$.5q'mTi)'?qJX0(6jH
%dL&&JU,o\%(-TmA^!IRaq85TV.E?F2;X[0WnIBp1AVd?D)Q>;'P=3-^g&X33"[:,o-.;O2CqZf#<U<O4hZ:IV:n*o6psuZ&C$S5d
%c!aQbB&QH*KXBI08,@M_8>E=To&XFK1fr<grE>'O\8'_Ziu&$C/j<_O:e6I]5Z%7F[7:q._),ZQ_f`5\4;59egTt*STWf`5`LCb8
%aL"F3Z%GI$&(N7Kh0WiGB"!*r!H@0OdZ99?F/kYK`9l2p0=SP8#`ZkYX*!<\0C+Y/XFnepB=%GVE]>D!'Mu@6/K$>Q2ImI"=P9;b
%s*=nbV`hM9<_.?d,qgUpIl7`71=hE@ksI"T&A=jm;ELFE7UWbJN,JAJ[X5n[;Fbcu$m[0]6Erg>,qT?UYCCoj=22S?Yns'a?N[;e
%bd/sYPT\S0C_)eYBb=,B^Wg*rZ6rC+c>o,'FEV2a=>Vt1Z@-+]cTnm,8^3nD4:0dNod:2jhK\`9JfJLu#=89kU,f=B)'ouff"YmY
%5a5,Z&DRil(ppIPk]Lkm@IuiELoRHUlp-*Xf@9k$N'M1r,Chf(K0lu?"TVEG^/!i)aMNrX-j?6W$NLhJq3Rd7^RJA(VqIqh5)8'2
%S5d[:T,J#Y#fg/F3-$F7j(D0uJ$"Tj("N%W8%+u-9NbZ/d\>cpoST=<Co;D.43#&S9.b6cK-u$8RC,J-n]Nr(Sl%nj'0TVia8C[`
%^B*/Z2.,D:p\Ul:m8b+(\-B:"blP;'i;Q'C[GZ?g738DTTY!IW1&.NU8c'pdM'@Uq-PXMnWGn@S%,gM*ak/5Ol?@f?Ui&GV%slJV
%Sm[F:(>rcSqOq]:>;1/DAnurC2&fa*-lacYO9*r`6\J"H)[#3_Ko.psA'./%lfLLCi]IX#dSnX/'I[:tb/^e"r6EqclK57u=<o.\
%TeiBpWOEj^At5Smo:TfBg_r.EUfF`jR+i0X#*J@S[h#s/O'5Q>gLe*j#]+YPBW"lTCF*7V6Sf:@mOPmk-+e_`@$hcTN4.D^MqSJ9
%g.h311fG$@U,o,6\#b&J1l4pN1Q%@*"a,h2>hj&f9i,Lu@>SI+/o,LGDlM6F+e6*74&oWZ*XnJ!>T`:U&PpX7-r5/-S4C$"5`]CE
%*0Y(V['WH&&.R6n&Wu>FIcta'F9Nrt]#4W@Z->S:`.mFH]RDGGs$h^o`)SA,_jIYR#i),FB8E?NBnUTZ86@0/m;<<hI<dNX0ZQ5j
%T;P5>-b*YInVn/;!][Y"FM]9%Gn7L#A3X;9Y87"^a"Lr+mbV/PlIGcghS)0E-$&5ko`Zh_=7;[u>IqK7f]TYeHlRA[DXllYXbC.2
%;a"u!,6T0nmOZc47[%h+?FL4#C\IK<;r,tgRb%:.JJ]NHb>c/h_VR(1`=s(ZVe1'.r/fDr*6dHj]Y<0^(Qf=K>&l7(@i*$_pum(\
%2#R^UKJh)i7fLL+RQjF"J`D.Cn/Uc&l1G4b?^"&b<k0!YFLeD=C`KtQEZbg8%VnHb^*=BGGEF:"r>`lF%W2`)Z(7)hNo`952YC]M
%rF/O7s0TtcP#ttG@$?Z]hc(:[WdW<\MXFu([U%-*G2"qD4k<3W,-l]?JG1il'PdDV;f]EQmlL\_"`YuBp_Y2)C55HI[]d=@PpT@m
%]rDO_=D)i$^)q(^&HM.08h71o9t.'tGcY#rcb8)f0f-/$GfY0DZ=Ze&F3SPon_H(*;hkWp.H`hlHJR^`3kOS.T,!`/Ynm),Y*QtH
%LA`H8Mq4T]:.8$;4jT?M@4p!^S*+tfg>R_N(iZJU>\A$<\6!iskok[\@pL??im5X@`M@bQH)IfC3u1sW84(2Qh'8^..H#'j#Ahb#
%+HIY6K?H#Mj6tu4n'Zn7C<FZ/%uY&PlYo*Q=LH%Z"j-#oV`ku38rOsOq(F;'QSBJTko;L:]ee;@ADWd@["(Nnb`W$"23!t(TJ,&F
%X:,W$f;Z_M\Rp_K/dat^)[A&f%gcI#-s4l>-EWSe&>c704,;B>ER7m)((.N,c6#6X(F@>K*r%QmS*"]ap`Pg[4,Co!WY\70?a"X0
%N#O="Mk$V<\S;PJlDp%X'-KFWlt;OAmjN:oVi<)2e.OrheQh#HOLR+NI@_VrG!O6<$]Z8p1*PhY\d^O@2-]Kge?99Yi`:dB29C*.
%lQS$nDJr6er5/L?mH6hf+^;WY]Fco(/Y7H/3N"!4_L1q5e]7T[^B(qGY(X]/K7kWJ!^\Hs==%^t(#@T<g30tdJKPT8Nln/DrTN>]
%r6#'pC4J!b\u?aVA(!C.Ef+C<"VFa)F3T2&h&OsS.Cs=aIVjta(3PY1D:Z"brPV1Hmeu;D;0%T=aKg)Vgf%)eWX)c\Lgt:#&;kg1
%05b_r47a4OQfIC)qgJG4L1\.3DSA6VCY$.2\G:nqkW@</=Ue#sZm-Ff`K<*'fJ)dU21?#BLr>.?a#0\RSjNRUZOSaDFk%$9hnH7g
%33=1'-]kE8G.[Hfk(b1D#abIc/X@^NS;/4'&`,:;m%V,Jbf.V$CN4:Y9:G)a>!@%AH$Y^3?Rnt^V4Ed_iX11C2nWH#'YURC8QM5^
%mQ.u=!Y(k/Jk_fAI`7@_;J-".>fT+/`=012)mn">O"e)5N*P+?LI>U>GEe\`-@req!GmtX9^^gpH-GCHXIpdA*-.I=N)qfliG*7e
%LpX,P1?=)pgD3YLEJQ%7_n=oMpiMG>H-n_!`Ju+^h='i,.CfbATgn8=[.qO!rBE8]QT+GmOMLDFdDCYMH?7\WUdJ]^[hM[QBag_(
%'rs_(8O?T2s5Ba)8_]7eKBl,jB-\3S"_hIQ80j3mW+dY!6dk)T,/V1mloX%D%Uk)D(QjoB'#AL]@>GjYV+_sooKai3+\^g[R!#Bm
%Gci1'LpD''Q)G$i',(*cQm/DTd&eW>,eM"-k8E$&LH+f(ef^D*PEBOG#EG542Cs/jF(6:d7H)KfiFR2h;R?'r+XjM`oS#*.%n/_:
%[u7"9MO7F'oj\8Y88*ZXHT@BF#5ro8PTOP"qh=ahf*hQ+5@U>d!.!AHX;?%r.j02N`ao;9VjdGj'dkGb!pfu%#Fd=d,)Tj=S";I'
%,!/bq`JZ_(9YWBBe`kDXgI\cf"e&+JKOJREo=i@]T-@=:@Hr^$0D[WUM#DFiDNS>:M:cOg_rQR8?Y.HcD^Tq683bA[%VI!#3_&&a
%hAY%cbWPI9c[H8dFtJsS:ALb/TMrG1H4X258aKuJ+hf-(2$bXolWWF9ODW+N>i!kg29d*h![1lR`]$HZY8Y4HJoa15CrHOgBTIR8
%1I'Dn;OiL6ik#%cdMU5fHB@"_*ZD`Fo/[(BVn-2c*HC8if]K4T'pmX3A!/OtTIqn,+J!?d9YWXrk)Q)G(j:]M#a^gRTOJ/1R3J95
%5`Fpm<`%2l5r".shDg7=InPRs"?nugY3:\X$LH<V3$^@eb)o:A^-INg`Il6VBSj#&+co;hP.&OidBmn[=.,Lrfgmqigaa5o\[RVj
%ENdQ/d(D+*^@^eT#GSkrp>rZ@fUo%(T[!_BJfiE9TF91#;E]i5D.2+m/)Ig*?TFnsTVb+d2ZlC9/mTYUSemM+"a+TF;6:2i,6eT>
%&.Stc+^D5a3N1%%dWoX>TGZ,5C\GVBCI#U#PZ`C$>=n+$a4f]t>uuP_1>tX.GLW^+'-=Qqo-%h[T3G)@MBO0;Jgg1qcURj.eG*@3
%jc<3XIAbAp:m7$N86tq69+_II+d';(@P<S=A8RoPiA;=A%-]M(X!C?9h0&X#BEXK%K.FQI75RLf@JKH;aZpAtqEGMrE68A+g_!C=
%!B4%M)u94OC'6bRa<h&2.7NPM6p!E*arV</iS39R][R88<d_'Ef\THd^E'/@C#S.%UT3/b4]CqS6rIG%RG#5Q:>o:d[$Z,%8?_\X
%/>?@U8>^Jdel#BJ77'25n.AB>B4u;c)WN&p=f+8<UX(iGTk>[.O"NgTJ[!%<lg$[YN*<[.SAZh&QjI"naRL#)KgV$Q7-rkG?@D,u
%@?-rCs8*gK4,-4c-%(fmQN\&q_RGaSZ'fP?T*=3aCp]jLKNGmtF9uY%q&WW0/5\KmM*oP^Soms!4,rLQ1*L*EAmd0R:#c@EZ(^l+
%?UjcJ\g\VG&^Uc<@3h'C._lbIeT8j=H?o44p8R;.>]!t<YI@:?XRFf]#ZiT2S]tjgn%>FhesaIZ<Eq%==5HRr5>H@RFNjre?pfep
%+A&VdNE?>omp+7`JsU,"d*J.3M9hS%Z9Z"@q+0LeH6m_4OGGbLGI0=tUA!_hX#n[dZkK$OVF',c%$HA@qSinmF1si`eXm=RcfO!e
%Jl6`O/4E*t+?=+LeM:.@BG&(2\^<$\0r6pe6c[]RXe]CbV<4.eV%q`UP\5nQ"*5&Am;'XFG9."3=M1'")[+eb6t)$KElX3'iaKId
%pDYdc&)mm8l?#*4q3V1*8G*Za$f2%X"M]0-r76ZR+sG](+%4ZC'JC1F^eZqOOrSS::WnJIRq/\1OJnMWhV#t3)`5McCq^gaVh.0:
%rP2Mp&!e-g():H5-;fmk=2_ikB/4l*25Fg,:`85d(EliMP0L@s'8o7J`fmC1G2U=P30:9Q9Nkl7>;Rhmke:aqB0ZiLiEg-?;Df.8
%[,5X0g.u`qYEf"p&6QYiMtC==MuHBc'A'R(J`3Gs&-:.&BBP:S,'?GBL]W$^,)o6<6(j^cqkVJ0A_bBc96^*"b%]3-]#od[KC&N;
%it*d^_n;]m!n+aa6_Hb?6u%?di'N8;7^HB[."L)DD9]-T(4]Jd;4oNu"'iLM87`us1.;.?#.;r!dr5oLpge+.I*8SB@-<.OGZ<6%
%XaX&nmAC$u4/)t8&q&CBj'YlY#Rd:ejO.bR\"0]O[[9BB,,_e5;6_`%e!U5NBW_eT/RL"\Eq9SCcPmDp"pa@'GGaqhE7W\S&oReN
%)-._,==8gU>8YO!>Y^FsTpkE6'8FsO^HE4'aT</u";0'_44"(FT,d<ibc42%^trUBAc+6Y=Kfd1[R'J47PW;T9/oE!Eg=_`]'8Jk
%]V=*E21Z`rIeeQP+H6/8OlC)'(6d34'3c]N^"n$qU<f"1k<`rs*fUA,9-!>6NM=j'Q+1LMWkdWY]&.#PEu:'VB$qPA7)66E_5F+!
%-1#LZ$+N-V4iH0'n0osE7g3e'BQ^FoTga;#Bk0i1F('`%DpF<lVlqU"YD5pQh<sqk]-JEl^cQ`8fepi\$F]S.qu=e*`+r=aF>Y7A
%'fW4&KGf8h;mlWV>!.Kr\nb-rA\tQir;%7kY,5]hkc9#&X+4a$Xr?6A+]aSYaIE#\#)2o8<-W8=S0[I9Ds_FPQ/Dki?H/s42\cgZ
%__m8q'2PcCs+9YJL\9,cn,D4BD#6!ro8V)m&lKCH5eE?DJ^_$i>e'$/W5-;mQ'I_RbH[j`e5X8f3pb1"L/ueJM72u_hEUuW^&PuA
%nSJ,f+CAkta*(#LGD_:B.8MDKQ'SNj[.lNF+*/&P[4lamBicl&)C,?&-*WP<iCP?Mki:=I<=O6l1ndE&M>KGmcdkT=<;T;R7Mf<E
%rKiEQTa+>iS7A>JVB)LY+n"fn4OU;?C7\_<FUaa^.TBd6&T8s>K)]@7!F+479q;K#eXYZWkP#Z1.i&&Dh]+Z1k"6B&+6_m'`VtKl
%nT:53-GKl,dI.A(g?V$SOWm^:[;"#;a!4\4r3=c>lM,4Kk*(K^YF&q6.)NS?LnpFD<J.G0N@=E&-g\CZT9WdnBU&Q:7q?A4U7_%I
%WKVqKQ"Lu#mT?m?053H'@L)!C4/A3Q.hi5W`<DfW/CadGSOH7B-5U^$#\^g,K"ed?qD_(H9NNm3qVIlBWB$ODO;IT/;?`D)+d+=*
%3?P]_?tG+o^7S3'&\gi7AV!Ij=qA2pQ<`.;nPQqsU3>n>'OYr57\YI+/2brs[$N'3AA536jsmAHAPU`D:$eWl*XucV4b4[)TicG`
%4V-Ct.,D=`j>=E>`L2,&KqB4*j.:[oCV!%gSp\H*(6=?!U!S!*1\r9u.u*>%q[$d\muBo<?"TKdVn)q$U1XCslJ>4,]cGAZ9o<CA
%Z7^Jlhca0094oCNN[5*!Ys8NY0=V^rqL;!r_<%[s8][lPZj$ujR.ZJMpN3pHKKE5Uq[cg\m1&sZ+<oE/:Nr6O%<A#6J_\OiR1H2a
%jSaZ/.&VO^c2D6>8kSEd,1D/P<V80EWd'_BB!D/:HRORjJRV/3eRr'82*C=;od1AR98m>SYJM*JXh1'5,c'Jg;oP*j]c=&^S:Mg'
%fe$%eWSXCP9MDAeBn`.CoT:EDppCGeqdW#c9p<VO2;)B.EFs5EB^,`8D*Ogcea[p=mi3MdjXeBSMWc'UUdQN"mN$_JBedmP-^SU9
%EX(<*$Lh((<u1Mc&1;*SDaHn=BBubHo8GjIR;EK+B+j:S]d?iN;^lGb`"76,PmF/sj\h]bmsAE#d/-T?$?KBe?.X8L:X"+fs)pr8
%d1P,C;L?/O'W3:PlpD(n($rqEnFB+"E\5[<n(f67B"3'M2]]eE`1"2O-jd[9?=elQ,UfqAj?A2:#ab7+KWs`MQW:=`,3+DlH+tp[
%l@j*7djY'dJT!#(HocR;k4uYYqM9Mi$b."5MR_8[Q?i\99cl?#QW_fp\P6Oe9)?%4[6/q8?els(I!M^c(Ba=/F+>f]%Mkm$U51k0
%?g2s"l8rluhWFRgk%0:tG-uZK]:;6Ip(.7RME/'Tcb7-IdXZ&<ACf?0p^$.*UGd^*M5,UT8?HJR\(`(Q#.Pl)3(/Fp)(d:E+d\!;
%kSXt\*HfA[pT]-nE2e^r3As'6V+j%alb1K,o8Ae[8sI>?VQ3cjIK(O>*H"B=YjW8'*[:u60\L\[fFFW>BPk^Xm#L^)EKroR4AuaM
%M3=2?4O>:;I/HE&C&>8$>8>-=k?,J-\[;*nJfR\k[`'Z&"U&G@k[g]D)_'"m-_$WtaM%Fe<n,sh@t6[*rZ\*o>oo)%=!B4!ZifR*
%R@8o'm(E:L[U(HVY?5\C*A6tZU#),W'(&&6T"BW&-(W$gQU*>9MQ=<!!R`H>L[=+^`<sKoaXZBeT%4Oo=.=u4F(;M)[7e/,.Bdn.
%JLl-%%F$,O\f,\M^Y,?@YaeCP*R6+AoK=%/1VC33`@h*ODY[MT2s9/1>p-+qHW*_T-mtV74sp#AEHF^^.45(WWbfY79qg.SOu.N1
%B.`k,Ank5D*bjkMa+Z)t9OT'UID*=n=jO3%R`NV:#opu\o3Bp2A&a?($b7;1<,eDmobqbf2p>qZ5l7]uM>>CA\Igu51a5nG=1)_t
%ELe"?HLO9WB%g&Dp5"L(W*ZGNF-r[]B;<n[!YFHNc=<1mBh>dtE`;5O>Np'bcM(eUI[\2HJK$o3.1K1Pk)6'%[X4g+%/E3=\g=b!
%SV&)FUQEhhd$?7c]-9CC]?Hd*h7A=H<!hPA9)fERE-c=GD:AS7U1IhGFqZO]q)7=UrI2r$"!9ZJC!Vf[plqDXJ87lBDJP'KjsM-a
%$!P))WkU)eW'NI2L+/6W1&9Jc:2dUi*t<a%Q)@op$;codPc/iiUUe(`XerCjJpUa':Qa51o,!&N#_,^U@ej5?%\=kt.`T#qd[)sB
%T8B'IO_C)VrnWWE-Ue])Q?tX9Y.cBKW$<7E:a"f\R4p'<>)l@g4p.n-mY^V3@q77_K?Ou?0kU[oCo%l!KACrSp^[j^#0m@!WeA)V
%4G\-*2g-hX.cu'IV9bG!9uP<R'B/KT_kFiAnmNJ(6]BSRUm1jJ.QBH.N0M)['nK_hBg<Ss09ms>QH`ujcU&'MGYqSToP8>h#2Y\-
%F(I-Jrg,%`ZYW-ml(,Gc?lapclUX>'!ip-X5(uRfeE_7'ep*U/E0-a;rF?bZ,GaFOV$A;rGXF4C-qq8`S[$3g`IfQ0Y%]T$d\$Vf
%D5[!LOX_dG\1SWHS.?7@=OPf9:]$:(%O/2Klqa;qM+ZM7:MqEFbr)pq`M+r*5nsE%!J)Ps3C<La-b4<RS"R#"&fRgm/4u&JgGOpc
%;nq+^37:P"o)(g-c::aT.6kT!+J'9M5N#r\^-0i^*KcX2H45XJPR1mA.mO)M<6%hDb/u$!4lSQno-liAJP+)T.KW;cL"fX#F_"4U
%3c*91>J%-lac4ra[dFnS!!Si/l]KK5T(M11\$o4YlHeV21?e:_kkTW&*Xi"gS"eC.,-0uqAl#6%eb5]:&5/RTNMH,0KLeH:aDnau
%nZpX/?@hKSB?QHY*0TXIC_`EG7A@C%(HTH\:amjVpda4G`"u?`_RI$-LSP^%15SN4P*@6k#lNh@3r<(a2;GoBkgiB%'p&=&T@(6-
%bTKe_>q7!@=uDTE;*ag)R):ge-AYMRCD^ibpek\Us#(V1Up7KPSN)Sr_LL-9Ko:;"ZRPQnhGJ:GYHDNkj%(Pr=nJmE)ATEb.I&0F
%\f)/cSe47,NF!*/dr\!R0u7(o.ZW1YRtPI7+JC1`L,:5Om#>9e:+\<b6G'nf%rY.&5H_aG>mtGiY>JspbR('_0[6]j-)<._Q#oF0
%7a(4g@WWEdL*+oYF<`6R:td?j[D^9(g1)\$Xd"1%W$)jf[^Qp477)MM2CsQdB)HsrPB*tQhUn7&ViV_Zq2Xh4?URgp$]0bhX!>&r
%h:m7c0_;pb?r'4rAi.c3-EM?dQ*E?W#`.G`C#PfXK(\\`4KhE1V%f#82uuAb"g:Hg15Y'fd<.hafH=?IoMG)RS2[^l)D5!]U4gsu
%$-%CSgD`NU4WEFBQd>Y746%9<psUn0M#T5fen],cpJB[\2LPNCQYW@-3=)KP86gkP9j)EUVN\7!A@2BF&[TTF>a+2ge?713&=mLo
%kX&&6*:q#`7CoYtn]%?=!Oqul=p/3e#-Mt@%5&+$FrGlp_$&fD0WfOXM%HQag@JL_af^?]B59oC_,u=e-Eob9m82%9ppNE"HK*gJ
%/+[Z-N5aM'DLB@KN4o9)<ad!T<aLOWLSj&t3P0sHMAt&(M@52r97[RXZ`>Nu+M<1:@;B<F["X\jkVenm5TYC%<J0QefK:0-[s99`
%:^X_?Y3S%bKDUh%AQ)/q)[@$p6B+I^9!gp_&Gl5d-LqFo`G?Id2FU6H/BYf1h<5jj1jma5[91_[i,^\kmb8l)Tf<):ZJeVe)hQZW
%0/V(<27W#/GmX*H>LFI*rW[+e_^Y+N`OC=DN67Uo%2dogiH"g)WEID_.3]Q`V.Kdf2@lefO\S6&b;^6dl8pto0$M:'%1Q;\lM>$m
%^8t]aCVh^)_M_CTd%0"BW6*-b,X]Ca6tn[(VH8lnU8Hf!mX\p9'n!S#>!m^(hrh$)isTQugCO6*a.#J4=]/@@P.2R")O5SSGF1ur
%;?_^bPp&1YjUadi`gNR.=MNBCVQ$;j9eO,b\s4!HbRD7,4e`o1[gi<^ZSu2g56Mb)h*R_8B<a.cR".#6Z@T+=C7[b'K=0VshoF.@
%>1FfK,ebH0RLs]r<@upubFH9s!Z2VCWpB#g8cA!EDDS@B6-%uZVTs"lNt^m!9RQ:[&G+'G<O)2Y'pJTQ*&"*#"mr9MAe^*u1qtU[
%R2T"s_6I3LWh?L"C^8_]X^Zi6fco%E-JQJM<H,#q0=E2ZF@[l';'F'<H>G2q#57\T6s=*LXZj%uG5A0a'60d9B:bp[?-(G.dL;h9
%J$+Rlla\s@\K4-\D*;\kIQUo',=#CjR,9&:kA,9(2Fe$@-$ek!Hu9fRlD-gmUO=;QYlPQ`I25IZTk(FYH:phLh(IE9#9-X$=dns=
%;Kb:Cbk\1oC-`r^qo-KupUN6$=],.&o,8EL.cB[6HB>S/IZ`*R94c'd<OSU!2W>tp)4m7gEUNd0Wp*=..3(`1Bk^l-<]`+@2pY=M
%4jYQi/61YJ?:-.nd1uam)Q3KN@I$!If#H9A%S.nbF_dg*OiahQOZ)o]/%^P3jdO\J6p;]dXu_B%l$JWb.H@!^,E61I?r$2'Vo!NK
%pfLtCF]"0(Qd5GV.'a!cO]Lb@aI\n7<g6sOJ6)#]8/7=Xg8B\b<:;SKT^XeBAnKC$Ret]7CZQViI>[?_M4RM#GFs)fSmjClU\Q43
%\b?=X>Oij6(hdlk8n:hP1efD6QBteWfcJmB/%N2_NP/ODQhsj><>]MVSm#RL5=E2lJ*pfC%U;<%=PJ=&\JH3G$T#Sg_s=-('ZGbb
%q1A&%1Ff=7os6s=MXBgTX%gWOIWp",TAJGh>=9'\7Hu=qHV(7^1/.cn0rmq-Ft&nt-/Zb[E;j6TkY,?NQU8ZeHstZkrNO1-f`3/3
%*m*hXN3lYj!N"%NnuNjp&r'7tC#5^\[7ubl]@!gMKUL!)@]O>fS#&(<%$E;>$F0lTH?'sG##"1Cq#%?:Su0Ee.?"tl?(MtbFh!mn
%lff_8KI\\3B5se."'77B`R:$,/o7r8bcK8+"-LQW?c.ER#>IR7qN<(D$^mnarHe0ecN<uX2iA<sTVrN,[j#o/(p6HkM?8*5[qb2N
%F^ej;-lCC,I5%V]18j2ODuT/H_DB86K@9ZdSBm=mWu%R'eLeVjg=%a8'`]EkG0'_!@8g0u%G/cZYD-FEI"!69p"N\8q[LURFL-8k
%[u$-$>;!l,:R*X`2Mt,8@cS)TP>2Y#(f=5ZSdcMRJ/k[qk>W8:p2E-1ea*aM,S=&YBpnOSQ#$fE9$s_ho\"%;P%ZC>p4[OV9Qk\,
%C:1(??J>->-gkd_C/4?[prI3pkNFWj19hSll/f]7Gq<d_JNLr]Y%[8Z1B>/a:(!1s0sGK5%e:0^=_<$EV?3%KQt);8)@3^=m"Vml
%f-TVAg=[Gh\4!\o#eg:]CXj55prL7F6U'3$BX#EcLXi0PU2D4l5u4oF?/&990VG-5,H0lTj9],bMAp4!p<Kn+YnLF&J.AH_d`[Zs
%m<$m'@r?Z=LO9tlQWa<'UaI(*&Re#,aLm:<E`@msSfaa@V%pA$fC2juHuM\Wit)I-e#fA/^<%#L,:YS=2>p.,(1,4$6CRY)AnKks
%OQrW,Rdc<+l?[LF*)W'1-IOlOb+M0],QVU6*F*dP23OD40Z7OoVMg,[66q@X]Sn#7VW^,qF1O\>og)@?85769L:PK&5VuK.V[H)3
%+>Ph[O\FHS^=P'%WhurTpTC=Y#TY!p6p`_`hF:IP,Pu.[gK2o2Y]"psBf1n+1i,\"]['F1"8ZKfs4V;/0=?YN?LONc&aTB#kWkUU
%<A[3.03-c):cg=cGlXaJ>@<(ia/um[\8O"%DsYY7^7-lff*YF),`GW99;sU\:crJ"RpaHW>T-k]5s,>&a#/5ZC3+#D'A\A+3`@t(
%<6fn*=/H2!&JM=PDDPXo=.u>[>[AkR[qh^g)/$kEY+[5Z;GA.+DPic-;1S!;:GD]If?#p.>f6j.,\=k<d87G,s.F?,r@Jb5_iiba
%?3g't%f(Hji\gC72YS0)PVMZdroK'h#:X."X^X]N`E!;uE?E$U2-5WCAJMTa!Zj\f_E\^?&JL@!2N$/UNgD),MgHtU$MlUbCO=FV
%lESTM@caI<6orbRLEoWANCqa7U=17/:$2]or.#uC>P>BNcCog5Y!CNBRQK0W(:E=]ga6!=[nP2*FR2@'-q"do[t#&&G5PP-`!'qf
%&[&;XA6YeM@5'>6E^$N%p%UX7/6Q`$mR&2Nh,8cWg6^]f&8ft$Lsar&,3Ga<5iZ*jir(]PR3Q#p_hHIeC\Afnc:qRjnpdpH[YX8F
%Hd8jW-:%cJ/X/e>TW'a2%SFC=c(iqT[a@4pYUg%d_9\P[2kLW]Dg^q2_30j5aWKHDD/bUb_[2+_L6Tf69l3:ZRgB)XqE\A';/>`g
%[5pUsg^/;S8c`LUAYl5r_;EpFaeX[G<^n(;1:J6@J8VsNN#JhR>dN:eg<M.o5k^r+msP)*hh(^Nl^j^R.fQY]mi<(Q/l4i@_L%l7
%KKoopXdJuHFXKeY2UQUqVWksf@[b_m/]G(hk%Q'nHYG^5BWssUHgALt#MI3pDq"?MRNnQH!`PgHqIVS)9gd&u@mDlFC]/@3eC%W2
%PLG[elaiXqKF;%:f!TkX&;Afk\=V^.LBg_$\mq3*+ciTmUcD2C\"50I-kqN8.nuG\[@AA@We3:*[o7HQXf366Q/U*!EY%$%#q2Sj
%=GPIPhgtlkJd'LS,#ha&?W.KG\9C@!9V!!//tCI#o:Z*4<T]C=;K94^<Dp;q!_#\3I1s1>eOR$^*hPYRQJ]*TN1=mS*ta.gA\Zl@
%WAq6<''aL3cug=*n/8HConNbRdFH'!88&!\(eDR;hTMIJcpTC]p(OfZCQKK*64`j7"ktUoKq&OYGM2,N,cmd/fYUpYe\.<c1p<qZ
%6$/2%E)]N[Bi-6!^t6i1XmN]Be93VA6c`G"//\1UU<QTlmY=[gYLN+P6[V]qrB=98e*oj%53nh^VC7>$@Y#M32F=[[hblj+`[+4q
%.S>+p7&'B`?<#:ECT4:J"A5W4M4m0m@J\7RflEn.;:#O1Y$86C?6l(D<>NiS8a7l=M&'A.*-I'uHe2($IZh'oq-YBN&iruQC=4Y%
%k`r*(D;__.WrT<6Q)mi(lga5#.,#QsqH5h93uWjlB5;8.;[(T0!%!e\i51T:HZqLE.O?220(TAtPt4^le'NaiO,AEN5`[6.+!dRG
%e<?4J<fidCq3Er3LIe,Z!l'*rlW2fpTVFM^FP2LKXi0#KNRua[<0)o`QK58!@R]F$B)%P&gunm=jbKn+2(2R8VnPX]%3N8HaALM&
%R7^o/S"B0&6G\Vpf%"1)Y,@8PM-Am.A#K3(4VKt[e=X%tIMtkFF`p:HM!O]ZB:r5Lj\,qGpXWP&3eFKWh2pfS[Hf#JjaX;>:KVcB
%>S!-dfE45#EePS8B7%UWF*pIAih5=<;[qjrP,(C".6PWcoj`Aam*`)pr=?"Ei/lPks'D(fpW/`OOTO^mTE1.^;E_#OWRm!2T!BJ&
%)1iJ!2mOq:nBM%k8PLG0o,o/im.?S/P,$>aG;jO,2]hsXIdFE.CE!.$WWS.;Pb%m"hHj1En&EUKaC#j;fo&>=oX&T7oX_<Z$uF>h
%6uS`cAiM<-D5N[m`VL%*"=NE0_CCG=*PE8m6ho7%[6I1An'3PdO`6nY\&%OrWh%EC<bep(qqdW;FE$*4J$1L,XVZ^)kTM3/!![tk
%*P4[b\N'm[`88fj2t[0gSF6FtppOUg6m>,uB2Ju;HLIbdR[.Wc2#q194_rnNoH.6A*+L+dIgr&e<POp54efW@XQ/m$dQ&9V@BQd9
%S7r7FNX?<c6^"DLAraH;N%SR\O*Fk%[+#Uc[_l*b>stZY_6dbF5J2<CO2!$0..<QtriD.PX.>4;XslS+&VW/tBQcu0^*UboCX'bG
%[nERE7\Y2sM9&XRF45,@!?Q7mj)!3\XkOSeqIJi*1]$,?q?+&1=T:=M$;kui^EhsnLqjbWPTjA^.ne=G]/?!&!E&As_,:;eph7p:
%IPdf`-_Dr4JkR9BV3su1]8pUIHDT.VoRYl*9Y@@X[*<7KXP5r<EET&$80pm+ETMjH9l%\;3M`Gq3X7B]Es4=4+afJo?oEfTIun@1
%\>gmb/C;S)*;..3H<:^YI9TYZh133_m+h^b>'R'C-,Tf=m!;46.=esh-jHCtg_QVbG'S,1>?j/(=<hQ=9dgCbb!r+#/4`5@=Oe_2
%oH1NN=FG.%KATBF/,qRLIMYtMf<(u0r#MH%MR?n%l8,i_(nX<fqYHj1J,ld%D+&Q($:,W#7Nk4-Fu^2DE?rP>o@5:+C;N<r-Ui69
%VB59*g4$lKUMl*lBJ8&O*_C&.&T62H*E)ZOFD\&B:Q`_0/LZc>(8J?Z$_(</EHI`lh^Q;1lk(iDbGDqu]eq:m.3$63?o"f>cCobi
%RefrPooB?NABh1FU&:AD,=dt;jlG539d#0lO%9so=L2_3H`s1linp+i,moa^dL"6#-kRal4%.6]$W/)lld%I"F$J*#h`FJqEg80f
%.^B=AjkM@Mhs=J20"Q!k(C_"i`?Nt$O/VJf0DVLj*Eo('fDI*`&B\7_.ics<o3Nh,Uo7rfi`,C89fs]d<jEfF;3CeUI"&=-3pm*\
%dA+KT17^6!262X=e1=J1IuZeLnY-%m=LugGa?uR#Oh:S3W.4df8E8##[+NNuRPA,u%5L%Qc3@@nK+q1N3=>^;;nH-Wn>et-aE(gV
%M,qO2X/MN2-RZZPEFi[cOmGb5M^lWG=@tbf9e&9t8p<V@=I6.?@Qp?*<3\tG]H/O6F"Pe'.J=QF[`K&\[JD7D]u<O""ego(ZM]5I
%[@7l*)'mY5r7UhUh3jGQ`#L&FXrsV@N[/F$XurG$H*g'r[W(kYpnsacl=d\Rr?Ze6U]Ij\^hC\7N!SSmWjH`l<FTQ0,g8Oo0dE69
%<Lg%pBW%3Wq-r:^>0Oh_,MUpB#86l\[`grre,<bGJ,62^s.@+`2cV@4a&SOi#&;!M/'@hVB:=H(;rM"[%7&U\qE'j#m$'cRQtq9P
%HFiTiLL]V4ksG5Z-t.e:069^NDKjT#/?=YPi=[GlD49Bp=k9B!ilZ;#q77"(/r<<1HrS$.Y5;rIVSnh:m&>(3+kh\^r]MGM.RP`?
%OBAT!AL-OqSA[V;ch3`YiNgXM`U#.25EOm[hqqE!5E!or5&*.6dFW9q!7K=m1m4@Zr)onr;?i#2A#WPnb0=@k8B*VD\SCRI??lRc
%S)U[>h!6<M3c,?$-6g#p^W>f;fAHg:aT+c$^9["qW-O>mo(Dn[pGqF:eA?V3=^OLqHjt$3c4i"=qD.p+i?a:n[0Ke*#l5T?Z(p_p
%,\mO]RssC2\R68hf)*KPVtY[#X$8[`(H?s4@a,nI+dUo@rZ$XVb/QBh%Y"&nKSo..bXPFA$#Z[SBTq`npBDAb.d+_n6LQ48cr`]R
%<81f$#nUb[f7)k$hIl"UAY'K@nneD@cCg6R[-7@$J#8W"%@Tnc>-KKHs+#TfL&oH^ef9q(l1RVkOH3D/afuR_qDH67I0VG7/e`B8
%F46?g-2%&Cnt^g-''+F-Z2YqIIm-&o(8R.h\o4Qu+E$^jV!);adk'OamL\KQiU-9frYW3<I-@k)/L^4N7d;5\=^<e[kNRb#eW+i5
%45WYd;L;$].u"ENo@hYrHrh=]1er)j844?qd@[*h[,*JkfWg"9G2>;ZQn2*2jYEpnB6,p\=JbH&PG`$af(bGq0,)G$5uFgBqX11`
%@c9l*RR/-r0;7FUbC^MVS;.,*J.;+7nFNV.p/!fEmF1DG/'p&H@$NV3l;SfYA(?DeqkMb7";2h47>[WfXaM;^?m;5!S4I8:&iDtZ
%;Z,BB8&Yd>7S#rQU^QcRDmCXem0nVFeS"$4^6J(6`:k^VkuLD44<r+5TBYU*6Jm48?o'MP5'@V,*l#XBik=kQ-*#@oWDFMb`/Qkh
%>O.:`3UBQ0cCg.,TIJsU2CBm2XWg>uI;(0uJ?bL\=\g&Q@B6n'Pt&qNlOBS&#&K"_!g75gQ6&pHP>lrY/X5@o%3N?&,:/5;^ht>i
%DJOs0kD(ZiKHODHhSZt3H9F_e+/)IUUk=p)AVJfEf-<bjQBl7EK_c"2NBU@^]qu&1)A+R)QTBUN3:B'1fHs8b[2M[2n-5pl92AFd
%LlErQU`+t\jA:LtaUN!T5<kpQRF+'RapPPd`"qu1mmkKQG!Gi[TXR;"EOWbcfDuOD;77l4g/7dagCP8qZ5FKMeaWrn&9$!MhrWGE
%mTD:5>FW)5ilk!PBXRY!^K+DYK\UQu%h%)s1"Q\5N=nYA(M#G_g_AIN,+<)_/C8PSpPr*<g0i'A[UWWYrl#G^s"#QWDgQP0df9k'
%UF;/P)NA$!aC%U!]PRU/^t=r90!Y9X^giCL_WABHT!N$iMe#)n=I^En@UKH]O6M:>d'4\s2AkC(NjJJi7o$Ct$ODn*NNop@N:<]X
%?+*;>]sr3-+%b)++gW6E]T6IPc6`?4nm(A7I_\LeT3M'ZOPs&A1HJGcBXTe+G7(YIQIkrb>"/dEb/TO-ZC`ZGe`coG'4BC$Vj>cN
%R/hZg,nHu@8h8:M-%kqG&89,IX05#EjXemfPiJ2'nP_t_#ZI+i`>d&7RB7Q-A'\@jO/&X^(COs23FGlN[SZL]+O]3;6lS+EKGiWk
%3?A_TU9m["&!^B-ei3$cdW)DpG]<HSHioJ-q]ea;j%Xi(0@]V\TC78McauaLd%tPo$c^#+)W"#b6ReRT,rt3dRf>EiI?tZadl_[j
%oasjl'[gt2q7W/UqE5qCS<Q]NSgl:s#OQcOPRPf`cub@9_,`n0`M.oSd;(n3;OD]u?2GKuTUbO1]8cTM6t[;8@Qrfq66gJ$egJ_t
%02k?PL&R0rGCH6d(J=WV:>E-<Q)Umho3Q0$:DL<8m>lM@-$\l_NTsF.+&/i2WrI>,ICaBX_dJ1blm/FZOo=3D9'fld7t_>tB9)IY
%d`VMQ\Xp=0l-(&<d=7(YTVHLo.,^qOo5>*Pc]\N=J\umNVu/+JRQen\XR:5pi*PX2(T$ZbUU'E^=p&bb<fqRd#H:DMBOsL>.!@o\
%@:$h^4M6SU94ffOB+.c4^@8M&nZg918%/h1W8KF=0gm+S0'[j+S*I_k>E4eM#@)KgK1JU:ZSS5^(1PhD[me1aqR7fDVbT+[ZVJ9q
%<@p_IOP$'(2FOa1h<uc"GG0;',KGYS6RtbPnRF^#9;kF?*]e5e3i=SeG^bqBH7FblY)d=I4[+??9&2A?K(P0e2/lTH';r@@"'Itj
%d9GWV^)-2MU1VSmL4KAq-L$U1.SZBk'$%9L&]"@FL*W3A"$^iOg&M\>75Jmm.cj:V\0ms]8!?o%\ka\b(DW)VE@9iR5j9b&s!p<2
%cB&@"m53:h@RsKs2)&2;L6adjnqTK;rujRmeiOS)^*h%4aVGn2Uj$=%4'5e3h$HHK2/"pTU?4Vn/?BK7i$';_Z.p4@"mHuH;"W?^
%`Ws5J;gde2<L@m['*CkO>oZAMOVM5FRn0poN@9nKfp?B3=G<-mm_K*n>*/N*';J275;ub,pWi9!OH'rOp.**>QVCa`%(+s^ESdG+
%D8iaf_`?i"=X]MeGo1rWK4W#FUg_5@602U1Q0F$\TS3K(Y?er<]PTWhBT>.`<4EsuEZROM6)&Tl"YQf:%:$WEl3s[UKXScOl0T#'
%(OeR%0;c^<hJrNM51Unr6RCaB*^%Wg5\akf3dGt`(OGnujEC@m=I(`1m/@\G&$2qkhYc2Jjk2BuFl+ds`[HkI%9Ge@>.5d2Rg[Q;
%jE_HV[LV`*H9;3N9/OJ-lC&.IQ^?,(jq*[-Vj6s.;kcmu/O["6Zk7sYhFFR]8EaU8,>qmM.V?LAC0^ED26&H=2/#G)/V:`?eB(B4
%@#oEdd[&lZks11Ron[ehS9?Kt+:fp8=&db^YX[YUn^:6K;o!U:,8.BPF,Y0F=C&"*e6RGAN6h1SQ_OCh3P&XHp9\O\#NdCrTWYZ'
%\,%d%dE93Wp$oZ]8Fr.=3EuD!6MVMW?(Q-aU-T=2a@CYm`iu:9PR=!lN.=$O@"DH<0!&(qhY]R3kB#ZJVu?X!*"XnSe#Ffu[sb1t
%:#"I]+dFG[GPY-u85+1>EMtSAe.kqNp&G=PYs'<G[CCpj5";i0h$KV6[?F4Ic#"^]Z0W("B</6q\0,>(FJ10SUe7qaH9g3SF/9fo
%?"$<g+4"&m4I,b.3r:)5:k^a#/K.n__KT"[=&q?U]"G#>89C4Kj*FcPq<"FbNLoQ;H)4[SR&%BnVIIMW>a(uY<<d&]E1s=`BLqIA
%!ReM:r[_W]+@r^W7TP\)eImc(F54<Q^pQ'(:l&qt4r_]^U]*Do-Vgfkco$m.EKPSM*QMJgcX(;=$T`59WbVN_g^H(3kR@#uJ,&)#
%I^*[9qFc!kpH.'/ZINss*gkM9]A0o79_poo40R-fY:/W"e,ApSEGi[p2tX`6erHK[m%U;O4]bM5']cEV3;FN>r<L`OEsAae.Rb?6
%KJr-1#1HW96T(?V0Vbu95d_64,SUDt,2KgC'KmcO%+p?*SXLW[+0)s5W;3r2Y1b%NSt2$mD_9=(psu-O^3nCJV!WXXH?OEdE85pZ
%;^eAQ<V6^Yc^kO;IoX1]l]l/)P*Tb:Fq).k)De6XK,h<'U[X:1Y"im/:o>t.L\5[1)D)Xu;4K4n-E;r2b"])l<l%=%0c%b$8917u
%:KNI"dKOn9.t2Ha)Hb6hC6-dq27_0oUgaVnfpd>2ZOujY%-*khNo@"j=G^Lg77B4+:E,'hkAj#O?GW7$JXL6iShX2n"4PQgf7u;l
%r.j\rU`5Z(RJmRo8%<8JRmk:6a,m/#ae;)ZMbre#H4/l3^@RL9"YFdS5L!j0I:JS).LYW\W?8-aC@p"u,C!Am<>D-&FU&);WP*B(
%6h1Sud028>.'fR&.1p4KIV^@5)]\2(Ed;f$.iQ>c8m2eRQm8P$Y77e-HPIe"02c7-dH^8W9sZ_CA-=hY/gb6J/p6;!@Mma&d_InK
%j:t3AU>6:qq6af,F71ueJgS,(Ai8`e7&L])*IV$/ERAM*=)7ER.1!/oD6o=o"V:cbeg-Ji]_s&6qUVd%r7d?cV*a6`Q(.(YO^$h$
%lhc.t$n.2$^*t/ahL2>*.G-sBb;sPsbccu4B!56hb.Es^c"fJfZBpdF]gM\%Plr9*kXI-I:$YY)8NF0"iilq-\K3TQIae2IL"b51
%"PC[e$19+%P@KHlE_2t_RV(n3Vo>G;5eM$nI)IK&VT5-6EGol_C<R^Yfd/5p;`5>K:55+XW[!ge3/u7+mj!_7'uA;Q(4K"1>=S0W
%lobO@LhcA;hB$Dt>5bua\V%2@MS"3+A\l>-jaX#0RtnpfAI"1fjhh4hXtjsb'&K#/qqI!B#?Gd8i%\rf(\VrQbproF\k9@?k'A]B
%gj@`Y/5rPk.WPrh%JPcpna82/$&;C'RH*iMUhY#G,aBeP.#V>U=J^a]+;-t7bTG/$eOhS%!&Xq>Hb^P!KTfVVjYNQL85Ju>C/\%N
%XARXjG64U'br87:gX^"rZNV&.=]aknl97k1K%,,C/#e"d*qpW[5+^muoP<SZUDCEr"aFjCX`ETnT9`*+D.XM71K%f_^/2u];N8#V
%W1GZVe]tB)j[#I$k@TPX<KWZiNA,2h2CE;0S4Ga.KK?f1Vip$pn[7[$\^;=clr$RVT(d)tfL>Z7T%f1.IPE;.J)4IhE90GVO::#8
%RT"&6;?AnkYJVaF0uYE,Z(u]-XBR^q$$MSX;JEBS]Loa#kO9l1hu>aL!3?/T']S[^7@9L:J0J8l?QBPZM;Lq)a!drekHl;W4u7*)
%%&ujaJ'8(uLg'FXOYe/srsmi*4V?0-D8<+[!j3V/WkRWEgmNq58p&H\c0TM$GWdo'*66d8/+$hWcG&=M3Z/`&a&7nXfW577menR9
%37"EU(A5,1e0T?gG[kFe^<@J$+B96F;Xe.uD*6Dbge/Z>YA&KP*49VFV5D-tNa+@#E,eKZS\_<SmQmAV4AE'a]4PDo>Ns97Y!qYo
%g"C$q3JpN2T;CJO2_-G(;3@!#leqGc$Obf23&J.DbB(E8k2d?cdrU#-MC/1GT7PZQG]>'hS/R(naheAboaTILU%JpHdH.e&pWT3,
%[%E^/^bEH9G5^nH9:^$pd]^37V^`:$R+,inqO:R_Fk?3_SMfrlS%neOe,[jgGOh;SJ;3d'kcSj1CU].TWX-6g/;P>eD[diaAIJI[
%,_<#sc5*-_Uf4Vp&kY#j[Eql<Arp,"$/s;6_ko?ZN47bF8@p>dTRKngI8R0Z<$t5L*,R<$:)AaSi>T];R:C)"6^nd\+QQnY#^Z&1
%=/^pi"Jp4$RP`P0=-J6!hrK_3$+8K(.0k'6hd='mUY-+_:S#QdfL[Rtg?n#XZ8XW8GGM!_S-2`h'BMO3F@fupC$HN:AO)O"LkdY4
%TF1*F:,o$E*:/Uc[Y@D4n2\`74GNNf"0@146g>0G;Bd1%dFQ!qhU^WNfDO1LR_eYPTh-Q>=@b6Z>8N0Z6")s*/HM>E4l)]qfAhJK
%@WZd'oX:jQ=*%3L_R>P7#bf);pSmf_NP;7*lZCkLKOFXbc3*4MSFVdIaIM`EYX[G.j[dqB5UOE?-N(9I`'q.(O0j/[9p]eq1mNh!
%&KSqMcJ6U;034C?kg,:Beg/_%Holm9Ou>5^.SP5H**%h8(#%OL<[4-/4=MJVW4q]rGI=Be'W>66g`uBb,dKTq)m5:+7['8B,fQ>1
%&AbT-W/:_kR+e;3<oOmP2hEXe'&tX/8Im:ZKf)a+=JD*-4uT=C#`9JrL:98YP/*nu;?Wdi%4rSjNlb/`1DZ@ur0U2o%G:0#Ko41n
%IQldTf8Gc^68Q@f4e!19BF;HY9/h`DorOd=jmsdq7+TA&Ub_9>qI5b,7M/McEq9PZp#+H=YZimR#pRJ!jh`9aRi/)j?rAa@>9k>'
%g`,%J9oNA:%b?N_g>K)1p[Kh"T*g,816F%ICO$o"60C:4;6'"+JHjc,[>4P?gQN#jmo;$*TJKT&@eTRPS*nn/oq[G(9!VSPV*5--
%Uo7fm27J`qeD1KYIsg7S0klEb`#E9flW@l;<I:N&p?dku=lA-FVVEOQ2E@_%TF[Ep(9hcQ_JHZ+kV9JQ`%a,93TG(RAQ<N!Ji]f]
%6po@lem,qmT+_HC;139aGc6+a-C&IjPPUpV#K<<`J&87)rV3k+b^c^4gM^"*2q<<m[0J]uYb[W;7(leaR\D]1<6+N"V]uf[eS<T#
%6D0._R,LATkV+=:lS'6(QL!,-j1:2YK]n($l!/GgJZ-ib,+1nHTD]dY*^@/co@:RcmL-;Dfcb],IX<^-"r,;1RoQR*KcXnT'UW9b
%[A]^8V8:5&Bs4G0DsC866s;YRPCqFbLor!$">jbL<sE&Y>.)Jp5nmc,<NH,*n'geYA]JX5F]aV?-XO<3.d[LHM3!ruh4mC-+gu,O
%XjT0]s3u7TC*!+iW*dl-mg7eICl\-+.o&h3T,TCQqJqNd2lE39I&^hm]k.NWkt_"2+93b#>a/D/+DsX_+lm;P!2N/f?=jMR@DUXl
%C0*M$=>.1_$e12@2'aLpWODUOctS7A)40Kp2dcOp%5*t5[Gh$-Xi9e:`m2t?Fi0gD`O:%j0`<`*?NtD_!92>#A0"nH'>-6sCBfeo
%9:^mVY%3jM!rUZDZOB2%f'_k%s,F#VT@P%S+aD64cf?eZ0b@(Q-^q:en$iOtk]B`SJP%%`:p^]B:f?h6hkh?/6Bh_B;r03&FiCWn
%nq16W_!/L_J0Vng%$\n274E\rlMD,-'t"da"RG8VjP/@^[UXe`^N[`X0n(cKLOh&B,a(`I?+/pHR\g8Il*Vg`gP9[Z44c'a)dN4O
%'p3BbG\NS^?[Y>g`]8&>"k?sR;K>@qHtkY%2NsM5]mP&lceh8T?gI;E=oSE-1G<*8bfBK)XRe(g'h@47/aARKY1"hP6jf)*3SocQ
%)0#XC(Aq62o?/-6Vj_"!eS5Z>%WYnu]sOh">Ql&H>P?1eVIPMa8EmAbZ]%r/.G-otbr+O][H]fhRkX9\en[85A#)'0OLZ["I1ZbA
%<e(3ZrGtGYXg;lZ$UmiAAuA6c&2esnUTRoOp$Xo*#&pk_3)&aX74E">!@"dFEhEe5"":t[)Y0mp&^GP"2eM;&ZjdBS%MN"^omYP%
%F4RV&K/MgqHd^YX?'HJ@hW.8]@&Ea/Kc9^B3Y#2c2ibZa/Ba]SKi=I[*MQr:<Tif7C%D*^^VT@//pm)716N9[FCXSuQ,agkS@MU:
%H\=qeM(qRuQ"l0!M@`&lnC`!ik@\lqQDB`VM,%BO>2n*O)]HR9nf/W!S>7Utr.D'UKeM&F9m>Rkm#]UPr5%;T0N&Im\$e]lg+Ja%
%`RW!_e$fU_!mg*ma?,Yn7^ReS?Bg>U]1l()fSP[Bm>@ej,)P_A<V6I4P$%VcbJa-s6n%T>rH&XC,06$5[ZORNqL1.O%pg=7G;H:W
%7Jqha9WN30Lk=IDrg%i.*^IROf:\hhSB^,%SPRl#,ca5(>)UPI6's-LcWLCema(+Hr4uR=Z%,HQp+JKMP^9pc+a',WObjifO^X^K
%I\"%_?J/),_0bA%]*+Bp>LVKlhN#nrn6Ah?b!Z)*BiT3A0"_rKKuq-[R8[6!psp)N4IFR9CPeK0>"1sU4Etm%6P"c==[Jt"c@s"P
%+'R3UNXI@Kc0E\%3#nXnLA7e]g23fC#?61N#`N3]Kf!b+PQAe%a-Cb+Ye40\\_=rT?bM)Yp_`KDbos[GlZi3ihsCc_V4f:V$Ce&!
%2bH0d1G"!Z]>UYJ:uT;j?@ocaeP0TKL2R#o9Q;JpVc-iHD*nmi\;*H8'b_Q%n\V3&P7jaj!j3H>`[YudIZ9b')AGq&l>UaagrN^/
%?JG+e_b2d]!Z5pIO&*K:fW;/h?C0!U=)d<kRr):(lLk2S1hM6[\pXHZ?UAN((92L+jt1>+IP+mpRB_cM#n"/KK1[/'T54.SWN*t`
%kB58_'@.VTs7kakrsrb";k11^\qT.Y&URtE\*XjF)S=mK25@[*7dPu="_\KSfM5=fDtXei>W_e&G7tkD0SMa3.[h[u=HHtc&"^c3
%T#FL;T>@*;EI,m.9$6CEQ"3rXiR_,^WnBYA!sks,3Elq"\29GCTJ*4CUPgg0l\)p*M8dH%U"Z%@:,"<UJ/j&_SB;gMd*R`e-OA&%
%Wa`h!G6I`PB)b.rEI<+T"9L"S3$YlLA8oPNU(5(/O:We+,Tj1u%=R/)&)sRL-]>[,f@4A5bnO\#F%:bamU-Xk91N8P7CZfJ3s.re
%2MY8])*4444)>U5-E<P>EI?=$&g0B5#2L/Z[QMkOg0+m<]'e7X>`OJJic456iTgC,+QDSUK0AF@2TInRkR[0YW`M60Drd9beITue
%!o%'KbNXIiUkiWelW!a\85*mAa3k)NP&Fj6ONPC+j;uF;pB,s/@9gVr>=m12/Qaq##$/f*@`T^-d(2ILE'^2TTK8`6$F<RVi#9@T
%nh1=qQQB$.iOR5K3]pOG)BR8N?o3o$1]N%L;MD[O17`$-qae!,;;lhuW`M60GJKinW:o2hb0uH$2O/PlDFhIeN."*7[/%c_"BnDG
%J+gRpF[\h]64r>1ia1_SFk%W>;gK[+S\l.,37e/oJ3b"r<gr@9&^=lV@d'!WpdIQ,\4dpn<';,V_#,Z*nn?L>+g4hlGBh+-`)6f&
%Pk>BpP/?c&n7%=fj[7R[qFqjZ9oi9(P\7on6j7'`4V\6o-RW$oZ1Fn#8.9b>Rg8?3qMX>.hG!=/ohV"i!;(a`:_]<!j"5/JOpCZ!
%e#^rf_CW$I%`3QkIWb9j@&kdsYicK";CY(.c=$(8B1Dl1jFhl<B8Bi"3T8]PrJ]SYYM8IGfmDR9@5g,T0Q@KME8*qhl=HYLd(MbL
%H"mK;Pde1V<9jp?Y&.s'Y#XZ1a0+sC'dFsomOMVIiTNpBjq^L8KL.'P*mAiar?1.G&VNgXP)GSF`&`s*Ika4GiN3$oD?+WiKGh+Q
%mmWDrl,HqBV631=>#pI=pr&hbqLQ"I(EY`D^`i#Uga^*im$b#dii32f2$Tks#s_VqLhc3%m.S:`n!/`B^Va)M%eTAmMFtu.Zt!S;
%Q"[Yb\[nl:id6qM7PoYk`P!cKi:7q-C]-esSO2msX#lMG:U27Xmi1OR]M3;I<SVk%8jNgf!Ra<(?ATkkPQVl[U.V5;D_M-]A(TTP
%'fj4UX9`j1@F*d0mWZ$RB'5]MfGS"b*7ai>ZI8[jan$a!F)VR2JC4_\oao<4a78=2'X]Am7?@?B]]ELCdG+*r&n2410]Dn='Ekhi
%Z"h8aWJ%77MNOm*=-RFcfT]]gH;=M@R'TSVqbZ]IKEtID+7-6U+#aOT6deiuMc$B*rMUH,/@kXE"2Mmt=JHpHq<2dcY(bA]:Pp77
%nZE6<IIG'gX\t[19k"7ca8%oO#5'2g<\_a&S2$qnKTNU)a\^fkXnADkhnJ8We62&aC&mnS/W+hTg83$]?;tgJATD@4HL=tuh/hs)
%jq@l/!;p%8AuM\QKH\2E/YSf<hmIV@VUAstTgdZ2l+,k<F6.ilLWYrWAHnoG#K7R!Zg/bX]FJ6G]Zi@P(-OV*I.ft^)AHVCCu=&,
%IGSmPC,EConV,QdIG.pZg@`_&NbrkC?X-n&??s0)n0FKt[6kOXYVbBsjfkP&XGF+EPth*C/s?X@O1qjC>joeq,P'BHLKJGiE<:gD
%AaaT]JPc8kLXL2'6l@n-`]lR;+dV"`9M?\>LhR@27(2IpeG_Rp)>0;pQp-jGNcs$e5&[:$PXgap3ZOdJ=Oc:-n9T,6no&$!K,=WN
%#P_&X^K5u`mXa(%\Z,Y+^2BH^"amuJoQ<nrf,iMhXfLW+R'\Z(4&bPT[8q<ASe57&H/*lAoL'nY;73bs+k_I!Xro6!"j*7CadQO<
%_gfU.OtZ0W'3d28pO8#)\;gqm[dOr.QC5?<FJN:)HJ(%BE!A"u1S`V_cF^/8iq;`#Lj"9u5JJ9YL>%r/P(jD@N']YtLt<sj13>T^
%>a>`AjGo#.NH9]O8#soAPCfq&6;5;[Cro1;2Q9(De0ERCWM%b%`.a!I&X=:(U)k36S]<oC\*TZQX>P*uVn0P*4JM+lm(?OC-1Ee*
%/#*20R4Nl-/1HBPI/[_jaHTQk)s1u@s2.t<7+6Ol.,g4YK"L^!l[I]R8ksGAoO&fR[]q6(L&&+#-WUC_"FmhBl#N:AcD(aE7hm/S
%>"d6D0WHW`FqIJ*H#=@jk[$cNRsAWj7[-9KR1>6fcfH=@r&8Ar>2IL/WdA4]WIRCN"'53H7E@:Na[,RXjeS7b(K3?[cAL%G=c`GZ
%\"(Ojc''d[c?]PZEke1(823#_dG(h#MnimJQ7N!<T?!cFC%C=_3^6NSMqK>-7U^%KiS98S!)n5bE4%eGf&!G<2IhfsD/?cZ?McGE
%ag4q^Mk$=*p$/.#9@NL+nT.rl?XJ"?E9h,Wl"qf70(03\hJ,ce<g&C9UdJVXU^k-oH)90FOjs<SR%I5q#ce#e\0SVP`D\U#)-FFC
%MLnAP%(GMmmqocT2_(jjQj[!"L,G2MD/.Os3mY!e-sV@4f<HOcZ7/%n.^rQCs7MU%MoQ,h8;ZoUY0aGbS>4_t/pkkNP3^?C"%t,4
%@HA84,NOD]>Z91[;JDTo](TnRam7o6)RTV=>&9OTR7Pj`@gRbFgY>u:K"r-VC5>#Ql&5$[K@Q@j>9.>L2\-1FL&.cXMsuG&Kn[Z-
%),pmBVJcYL@blJQM[I)_&62hSn"cuTot^@%L%[P\]GW'[MZKY^"-i,NP'ILGR_q+)N3W^T-pt>7c@%5RU^.qnEODfm^?/1V9#POS
%7@Ffe(I="%$B=6r,-X_U*(N[9dnb\*b/*((JQO4Q=D!p#(s/#CRChEPfZX2P?+&J#%(qup"(N$BJnV14Z.*6Q=^umLSNW%'s'sVf
%"SDL\9^q4ZL:MB/#<Gh9X8luQ:/jB0)*-[A?%Au$<.e!rm9!"6/$.GS+:$GZ5t#[Dj'kXP&B:R)`E5u?0%r8!+lj*7^Z`jR?2em\
%c<i6+pf4GdYNP`YYBZZ=Fu6-+leI'nU/PW]k=c`L@Sf/@jYu._:5X:mBSB^71$,Vqm3qU)>puQ!F3AtP9&mEP7?oG3<eI/!k#Eu?
%]`kTm,aknm^Pe3jUAbVfWu(_kPNoOs>YF&-_60YEidH("U*,%c#FAGB+h_-'63L_IG2U38$QCKr;"ErAA*?LaJLh)=L5G?4D=+c;
%&'%M,!S8)S\d^i$A85Z![75K1JWf;CF9`f*#&Y%ogW4g6F-P18H#C:KjjaTc6R6LWbM?7(XGMUamXf&P"m+!6U_c%E=/#V6:u5'[
%5UhsA>Ltp%=e`+%jA2M;Vt+)(J002Fg9+YXAqG&8QD,,%m@A'SSgVU*<#T-8K!&V7SW\2!O0GE.KLSAO<$?rDn8uW+MuU0jndMc:
%q.]>(o!dFZe3')UX5l9D6Kn?\kY*Phl5C'ddQ]-&n:Jk3gWtph,Q`JI`cHZas)0Bt"S`6.pEs/?-`Z85R&9EbW0SeQ&O"hO;#ClA
%S,3jDOOeIA'Op5,qJ,gMFZdXBl4lDfTiQ6@HuDm%9i*6/J#PhuBrLYf=%CTs?739`[(a#!2OE@+fh!bG9uZ$@Wo81._E2tGmW=_<
%:fnRE19#89XU;1D0I/B#]0iDjh/!eq':-FO("8FXRG46.jllGPOYO3S,O,UEKsXRD,5oV;H)r;5P0^62$P7qb@dm,h^;HSIL"F+N
%<ZgE=U;YXY$9*Jh;mIfl;bimI9_(!`i3^ZjB6'$P;uGMHSgIL"<$p(BO[tF#6Fn\>ja_qoJZD9JBL>^k^cC6"Y:0fpZ'H,_L87P'
%eeUl=0gRdj?O2640W)\2_n.1(n0hn&[$W_g::UQM1eq5,C-V3S*kt@b0UKR9;2U-?X;$sed_87H\#f2.<6hVPobcJ9qrutCj$GIc
%@;<Kp<HC/=WJ.J^oZetFGQ;<Rl4uPSl/f:!o+E"GRal2DWoQ?s26HGf>,8uNP,\+6.$cXA15/>d7ZZ4Y=db\(%.:,\P<5mk2%90g
%?n4<>>Y%Hq^JR1Sc<q&s6WH'+[iThJo:5nhni[3"g2Z(h=p5baB6Ye#J0+5B7]>AKc=C)RN+K@eoXK:9\,)-B9s)CpqM;^*XSH*K
%,St*9ETLuAA:OgF\"8/kR/mq#(+$qgGHFQ1Ohk=YdPgZG7IiHOA"2N69BO1M2N@Tralq?X?JW=s63H)]eiNPk)pVJ$OdNF7<ZZVc
%e^/R<d0DnnJ[0F6<?H&%^!nE109:[:'-``BFbcgM_l'/\*?T8qiN(:H_i,U-($+;>Z68Q<EI*0#9"NV:_B;*k7+ggPUE2^o^)d0;
%H<R3_YJCb\'V-DEi2FiL*-F$u]<?S+pV$N3oSNlLQ(*;8ii[%cV";T]7T6FR`Ht.(CXW8XL\+?>`FMp:"7WgHp>6S*$K4&q>,/)R
%RoYP*.*E3"-uYfXHC^I%%ptpRmd?OXG4\fM-EX3Vn_b0e]dJ$[O'kFqH=mV2da9^;`1%8uI@qE5Ogq=Yk<i@8f;Po_;NYOXaB)h+
%RA3H,#f9Gt%:d>2!I?S)In-SN>a=*Nh/[(HDc!B(=s8@Uo%.COl$t]M:N&L94g'LU5\I1:#Yd^XE]fB;1oAe5(,W.B7_i'pO*6hk
%SN7i@-jNK%!o4do_.+\6^G05")@SS7ZXm5`,`gJ?gY2H,nQs5Kfh<C`#b-4Uq)-eGF7Iid!FK^k`"/3g'IJ23CR%pa$#gYW1Z6U@
%Bi6dsHRX.D=UMHjrh1oLBG&L%rV^25r1(%dV.VA>i3"(dbUM&L/NMF5&Z]?-@mIi1_g[>tX/Q[r!)CK:TSL]b]`bkdci)gdO8Wn%
%J8-KiJA1Mln[;"`F9K142hCDW$%;=-qjQ;$>B-lkb+I/7F@l1\_mh+<:eY*$Tc1HGPg8>b!Pr8CSRoX+G=3Sir[=)oX?*=Ol@[&7
%RrTbiKo=K+^35F1ZG4L>4<1?J.V=jXl/eF(4ObE"A`o.O:j4=6(r6hd^<]8phBIX:X3s`dKN4s5qF%Z;p=r1h?fU0>]Cnt`rV/K$
%cVtDm<Ip3#&i\SC$j>52[XJJY7;fPc>2#*SffcF?T)+Y0>*o-X7L/3ccgO1qb2df5]U6_G^Q'nbecdBq8c2;?'iRHf:7?"!!#(h\
%7A5ZRi7cW<')+EY,FB`_+W1Z8%U!Oj&@^S_^[n#@G9WLYLOcRt+fTJWi]Bi^-_]%`=t*4!?'WD$hmKHZ_MK,'A+S;\i*X#)cZ1E?
%13M5L*J1Ut=gUE1s"Q+2+RA$UP;lEkNBI)!S1^OU=]O.o@NN4nJkJLW+OKd:)c);N\GWt/%N-<PL@['u;e=+3-TtJE,SnKI:R\t?
%0*g`c0&b:GTSoI?F"b83M8pE27@-n!,R@p!\`Io$c:T&'F2BQ1g!iMd[I!kN'4^',b,NJph'#D?!P!L_j#SAPZH<k1d6g-O8L9*H
%L#@r#lV@IN1>[OIdDh6/jIpY!oXR;97uTH1@Wgr/Nkb1V`mdtA-$EN1@od'<2OXJE-9=Wb!l'@d9OPO)o"3*G2e/C<e`'BIc:DS?
%k_`'Y9Vt7kkoNX#;9G"nKGigdPekpnP,A'E]a?2gJ[$b.Bd!RiE_AAs]F?6RApl#*/X9ftP'N<-<aVICC,C.3Z9kF9oV:il1A>\$
%j##N!%R'r%5OZs3*WOl+f"S"=oFpiprAQLhJ+Xj0piQ+r0)63.Yt2L-e5m@ufB?,cT$Bb=-kP#CrmW)IZ=Qn)Q*nd"LcQBhfDGVd
%BcSSDb;L*m=iue;SLcBaA.M&H_3#+.YQ)cY+Rf&Yc),A!&"1YF/=FV_PKYF=8n;$Q<Me!AA;UE?`1T+!Z:%^+>q\/O3f&hi`,+)F
%"qVcFnOF^`\8[fFoPuT4g^QACFF>UJM*$g5pO8f.i`egQPEf#7lf,9tEnMDHe&IN\U5T83.>:k._aJ4]2>e&2&:e*c1nA^'WY`](
%G'b-S.9e57@JDCVp`-d2jM8:$HI^ZJ&"l[U5#,Rt:_a!gD4_XdT-)WeZJ527\@91o)j;&d<+(l20B4;&BZAKV<gaZuPGNrOK`*[*
%c2)i6a*)_N&"%rh$eR/RJ!p/D;loBqmTqmJEA+tOeQRC,>4[B!N<WP;hQUf/kR^Zu8u09a1<hD&[7OG%<no`0UU4O:+TgRaXSGR]
%CMF%ZW]]<9`05+LI)cN/F:kSaII2h*;?X&47C,7u:D'T4<iPT.A0G0F33Zg(gf4#cmjrcL2rBL[nG>15n'p0FWerdedA*[2e`UMD
%BD0N?I,<u"m1/hiXe;kqqYP2AWrEEdFil^FCJjCp_:=#(l(a<4JaVT7E?1>[QoO";A,+HLR3Ic/o%BF^-.cR@+>`^qp__N`GsE#\
%$\@NW'^A_\k3=tMn>R[iLi'JQ*e[=i[]m3?(kpUnZ:uR3KgeSs-rpHZC?KZ<^A>S3UPh^@e4/)tTOBG;^_T>=S(`%W7t>iP+Ig5M
%)!uuk;X+'Z_DC'<<?qL'BCB3D#AsT=/X\.F#ko_M5s/1>PU\kqCQ&p;l)*r#YSk"'<V1LRR'*WB\:Y=1Q8W=#++;]XWYpE4k*5V1
%#))&\Z![FuanPTo88#Z0!OHk_]#R+-OhF$q:BqgSP[5J4'WP/qA]?f:dQb`38H]+AndN[3Y0"RQ^3LHcjKCf%J]c^93`K75)BdfO
%[(oJlYQDL9ObN?Xh<k1+7=UAlq%a[r*&3?_%VRYS<*Bl1'$o-@#V1k2eL]NN&qsI8a$h]DDY,K&9"QNp7`ct:HOJ:8FOhWLcpa8+
%JfU>^l[A()Anc3QqMA($_cbYg9I86,QQ8XQXM]'C=GbKB+m2Kp4V-2;Uq&?\d(\D]MNA8B1Si5OFBuB9e[@UV?)3RAPRDXG5#@#O
%4ZE1ObD57DC7'ZL#d'\3jKZmV(/J-j]Z98C/A5?u:V2+NKAJa(Vbu_XI@?f:W:YnO2e0gPI/tH>2lslpkV5]k0L)oVkhV:N#N:3'
%i]B*H0lo=t2oB,NFFn)5Ygf94>D6($X!n.+aZg0Z5'qpiK$9W'c2Cq,6S[A1N"D=N.0:m&PX0Eie^qP4>mR`=[-'CoQmK8h[$4Y8
%?%nPW^6.q@'s6oJOrfko6-([DTRB3i'99Jprp/&\pj9Qo*Yp__%lkN^WP%I,Z0NdmB.>R5=f-"p7`"SbQ_ioN==FZ[5=HgN9D1)_
%&mF!\>\+&2V0IGh&=&%5)dFA[d9"ht<Jk6r$IQT-M5Qnka-a]FSZ/$sZpI\k^`?SOG*uRHF5O()QRakQF`Ap&X<Sn1_+0f5ACkQA
%5&F";T@SRclY0\SPJg,:K6;i;1gN^+HWK"$*.^/\5A6p_;h*BMY6MsY*Vd\:3g.Hbs.*]>*.h>^ADuan<m6_u>#f8tQ!`7en[jm8
%RUO@ahICCPCVdT\.[J1M6R[`BT5Zpu#1]TiS\lF%CR]bc#:6Dh6;AB5J8?'-56\=:h/ujH<tGP=Xm*^%.WG>+hE<)CBa&IHm,O?"
%WC]m]\,qj[!+PQ^4GV&DX1V'=IhrfX0NA`2icq:4l4P2*n>%b7Eq4?'m<lWlO++/lRWS@*Si6M)*dYC+o8sZHf3?K;fd:FcY:!A=
%ZA97fqDdp4KP&V:0'^&Y">6OFCtus-k_*_1D,HS"Bb1!eR)Nnsi-2mk0_&E"o\g(;M1fnh'Q7m0eDo*E*d8Er,#WMhKh)Dd[tj(j
%=O=K-CWpc^@GF#\<*L\"CQ(sOrmp]:0A>Y,/`9u@,7`%t<-H2)cYi6gJaGU\3c(,qPnY@bjA(`VA\uUIQb\F>BosF&nL.VsBg-F[
%EF9GbDPqGDqr(jJMLOlEKgL\`N]PtL*M'tX9gB%;s)s_!orER0h"!Mcm'A:H*U=YiO<(_gij[J7Z?0O639.g7dL4"hB^.!&<>rAq
%;MMnF)QjL>MCBm*1eANnAIOiXMu%FUVcjE@BeQ3BC?d"2@t%qPOI[V2O/Z4(X^\D!P3]?,FQ0^*rlMb/f4QY_3LhL@?;VK)OuZ]f
%c:Bg-7gKV,e1a=O%Mla\#Lh>V;lEnmA3N(t:/M-XOVlNb/\\RBlilBo)ui=2pU/,Op((!\2CQ3YdC=(c!=eP#rVBW-CAjOhONl9Z
%,"/_oH)VK%EE/#k(N`dqop*\?j>T357WGPSN[cjhU/[=D3omuV4UTFef*Y*U/?8)_)"3g"77&/A%9BqJ[+=JBU4b$1r7,hMHZXWe
%EZUfYePHm(kO2N.[(e\fL2G3L'Unrk.&FQG$;[,U7@X9kB1/kNT^[ro*SjYd>LfH[V8gH*XEIr49QeQ@DnjNO,6,LN14DU_pNRnr
%,k[iV0/`G<rnle2;oR!K(\VF+j^uXoAq%<O"3QFf3WeAueb]l1q(qHg(-9E`QYd?)gNS\%"nHuVDjC:'G$$U[Pj)#bSBoega&!1.
%3*LiV#mTl;mA0@BPTJRn\e($e24&^E\@=g6.<sG10Dak2/#'4*4ZTA(dnqJPYK_`EXI-$@^8?".h2J2tBV4,+>P6HYlu*el!aFBA
%UJ%Jp1oA@4c@#_iB1J^F:>s8VK2Z%JIMsq(h%&7GB-IIc#;mE'AI40\r0!\-?<l;(UBl&je^O!1AQej:Jer`aQ!\q<Mg"qcY/jgH
%jn2H%-Z>U4:BT5C6(0]hSp+%Zc$M:XDP`t5L[!aeap)9>\Tl_De3Dt`:up0$[bWZ;D048"TG#X%VnVW=$iZ1F_CtWTQ4NHqioDN^
%H0X>a#f4'=66`*ieQlCE64AUoJ@qr-#g@b#+Udq(`Cu_Q3?gI/'pq2\ESae91^[Z\bq;Y&23=)Il;luVe%R&pQ4CTq?\`O;>cm^u
%'rtq2qo-U(CFTd^e>o+g,;?c$Lh+m]+/9V2Tn/41h#j&ZlgR3Jca.YHO9.pE4=0Hm1EIoeJ!nMa]UZaI=8PsW1]bSSp,HjS3moe2
%]W!\4"]VQDS,F0VYlo,Jf\%"rm5ANX7HN`j"$m::]:BUAS?,QV;8iOKR7]#/WQ+bWM*l,VC".4X$IVs%3LSKUl^=J9Y7XqZU?FD?
%YkgO@F;3-SF3JOmI:8A@0,smZ#<b0:iZb:6$QZ$-6sHbDT3*i@&<*OlR!I#hmgT_B*A2PrcVuAtI8Eof4&Ok9;f<E#LN>Q(&2%5P
%hWNQL]%VN'&fVP-m-9.ET&7f',3,'<b@N+.#;a@.:Ene=<6cJ\TiTdU2>)++[6$i%chI7e^M'KO[)MqeciIsI9($5`F=^I1)5bb>
%=OaQYl::gV86!MuFZ/&VS[tnsCs@u%9.0PLn>!n.QP\/"@<VSdRu>D$<EeX_jd%A_ZW4^U/$%@R'VeY$MMPLerU?`tSK]8eK7u-7
%e/=@"Bmg<\FP59r1tIjDroaXN:+ND#+e]ZY6#+-]-hu(4^21)L#faB7#c*ko+[t=k5(9eG^FcDhg-#tq7Iqt5(Z)jQJ0H6\HRJtN
%rNK70OaPP"<;kIZgFCR5B_1_3U9o&8+:%]Sp[2c=qZ%J,ha*I1)``CNX%Ck\e/9L'?Z39+NkhX,r5@q$j)kKRd:r@JB71&d@tPNo
%G*c:Xa18@:,/uHmMH.(6#aJ%j#MTqmb.!Sj+o6AN\V]P.<PuTKAI\[!9/SDAZgnF^P2n1c_3s"/C)F4H$\g(DA5Qp;jt]oC?m+Z:
%*f/B)_**$<$MB>!g*+[p5dmUMN$*4CHV2t_<Z[[hUIMN@4uA-==$Kd9\fR`\ked*E'uQ-1dUEB*9FZ<e!@oT8?3fNKl<f4P=hpo"
%FC=Jf;0iJLV*N<WItL'q9n!bOTd'OHr't*RHOn8!&IA<m<3WCp-)T-'ci->]IR@9J39tYH+E+p$B?0;Z+7EO-=Ciu5,Z&7$VET/W
%0[=EN?FBY9,m=$9mj%(.7TSaui"'(i^2"!'#[""*p<ad,JC>]Np8AjjL:XGi@Tk+LS9MRk*S>N$$qZBN-Fs>A)iLY[G/[mha9Ns<
%VaEEpbB/%f_Z*V@,OK$mYI/i"2lkU(19GQg7./'@dAh,EX&LmQ]0E"k>E(]7IUZ<[;G_C^#8o?lLV4UdL2nY!CQOKuCGf<iG/iPj
%oN)jZ*$6\Wp31L'[$Li"&dOHkDQDhkERnD>iNc$LgpA'nO+Ti;*`g\2LDLXq@ZPl,lDhZ^Vuhg(qBD,m46&!F%%8<H1B=<qiO05G
%goT[qG?_aoe2PFc6>Ijh=2<fHG>Ve3bLfUl>%r.@(J[s^PTqN+C%QpTjJXGg<I2iGMQaOVdR]d,?U5V^+c>ad]8#ZFej5gj6@>R_
%jW45t29Bu@$=%=,&8PFf6^ePq4G!iQgG7REP4n1%[uM^.V0&ef_Zq>-&j/VIl[4p1</D=`(8i4-V$N\t20CZK829dG@tpU*=blUZ
%j_e#=^8)Af/'hDuGn7Ue(_@T@R't\j4UCK9rNWZ;m'VI+IGjP8,dJoIC9LQPZL3``UBEn0HM\iLQ?KYeWXP1"4dL<+29![G>";nA
%.dKoT-`44c>k[ES&aU0-=cXUUDd!UT>9EBsdAgu4k"PZo\;453r="ZRjb?s3S?XGV3D?j:YHhb^jL-J>8[&AK[e@VI8X(('f:0/j
%9a5LX>)ilP$!U?T&3Xn+='bIlUL5,eHBpa(Zld.gdWf5DPFdJM#X'f-;N1j#"I_ZB<FQ%!10iUQXjgHnCDEdd*Z5J<B_T0O,LRCp
%]dP$QdV5"VTR*2n:^-`?<>A?uEi#(SC4&AE@ZrgBiC$4[_HerF6?9O'\@5Zg&)Ja5NUkYANXO&(XihFggfdIp)"1PPD\TaTqp;oH
%q?N#k`ciA7)d7TZVV8)@2C0I(;*SBqr/31RqbaSr3!e=heK0*ohPeJ?PuZ^M3d:s1D7cC]>*G:%k7nXKmE@q??`t^'_9&gT80K7'
%`!k-"*ZMW!AU8L@.0XdA$7Z$I@cWWh:pNm_:!95s@'1;>4upFF:Im0?(FKQ8`DhF?%VmTbi[%#^@2.Gb`?SDJ',.kfl<Rr!_g#;>
%11h2FelXS/p$Fj/RO08d`l.Ed@/9`=UogWB>?/ldc>Fl6bQRijkFH>C\oON>H660X-g@sdDR]YF%]\BjF3#OV(E.bsLEOi'DS[*H
%$fK3JUfT<?^+rhs:N?lG*Rn`Zj`DDkK7j#BSqV*^F2\e7LM?ICPe0r<3q#sOp#Li^`3[ZlQd'C?Z9`tu\TYMIZ&.T!kF$+2Zr!@"
%5UoE,ZBC#9PRLh5JU\-r!g/)7Q$Wi%.<-2PoS(mCj)e2mff0scMWs7_@DPoYki`^\f)=FBBGm_UdW2VhP7Sb+$73@deZU,o6m[9.
%28"fRrXaWUa2Gs+(4>eY>NmZ'BIM:@)\F-9oV4D*>:\XgbpAK[Mh:,\1s=W)6/6l!e=>Z`)-G?D,gZA_jNSLn:PmQj.!_>0HTK3(
%0!T,&bT?M40Zr?\LNF.^?d!G(lSqe==if),ph6'nQET!QK06"Flp:iKLP6KJ/2OR,jr,&u,&_FjbXiNLs2i8dU&cR<N[`_bVtK?G
%miF\9S@e56l<2EeW*2\EG^i2ir2VIHm&YY765*q<n'#1C#=mDi104*YRLrJ'0?oau:*SYG>[n&QUr_Rh1/nCP6Sj)SQt[Z`c;k=X
%lGdO=W4CoPe2<5dd"$)!33`[o8@qfCV)p1ocmsobW!@RsBMe6*A5f496o&dTEoh^;)FgCraCnQiXE&d4#"'u_V^Z=Z+kWiMq)i=A
%1#Q:8EnKtfC,BUM=lH6_H1g;2a:>Z%gT$o@9d'fcZ8r/+8dGi1dsI^kK0lH@NZLWGdp7OE5hce:ls&nN[]$C_3b=#QYWQ;C4pk^"
%s5f^JE?kq/Od/qC;mJI>+`XjojUY&]Pf+t._pm9)""t0AXJ>s[l0YFYbat.7\^;%e\o5&1\a$T=XO+9.-D*H*FLtr#(eC+,Y=BDQ
%B.a(8#SpGpT*[.+=87So`f"pu5N:P2ZplmO1AcHd/cA5$NFabP2WnE-QgD&s:7%KBY*CHtr5/)8=T&+Dk;VG3Y#:X`:5u>.?)k#`
%esaTdX_R,L[f.U13;s)CLs*k!22<E>e\rB*f?a@$NiB^p<U5VuIp^nP+u)$\Smj(*!^@U^h?8(MI1aGK)QiLG1_?;sJb=pX!dCcX
%.d-I\^BF\5Cc[YldKt1$XBV)28<1`u;9!XaW)1CD#<Ba\mKZ$?@8!*FD)hRuboRJ+1tD-"#:Tcbo3lIN&=9(/?[TBiSbi/+]'oK"
%Yf\o').X?4$T]1[\B0nk/NKOYK63!<%k_3IO/:$Q5ZX0@&F7]9'89^u:8/1djLVmT6r\JX^d+`O_6T^VY"?7(E1Fh4D*j$0_jCP+
%UZ<4-E=YCI6iqL#``hlF1[/WPWaq[,$^QH/.Q/n*(I<nd&en!=T2M:T#pRm\!98:kW@IPL(eDHqaY[e?mY$!BMcY*+/^YVj_T:9B
%VTrq4HV*+![t<?#_j2*+iMSTnYDI1RSM5t_KqNI,17atYO8["QAQek@b);Tt*!R@%*aSp]"Her[atRDgHPmjfOqF+eb9EZS%)Q.U
%k[>mUlaB3I*<\eRJh]gNe-&37Q>SSt#`=.U?gdub-10XeakOBDj;Z8P:7t#5>3KGe-P`6pp0fu.N=^>^V]-0$;).\.L2(8VCYSMj
%gaK_-.Y__5c*]m(=g&%Rqn3qQ%+q9Z$I)67<qo?Hib6O"3)i-P"?DcOUA:X&q42CS.]($2RUdD*REG,MHdTMkk=#:QS.&cF_YAu`
%r;PH<cbEdr8n$If^W#Icl1[aFMa<1t;8g>[TZ`.j?ft3]q3iqW7F#Va@hDb>0Il>fPsOo#&94Si%dkA=%:L")6#gpfFK*)]Z7BQ-
%d<9G4((k4^kcNco-0M4b-Q:Y?aKB$br+K4Ul+I!br=)pgjoIe)PX#bhGQ5;7cq7>raSE%p0j#l/n=7H`UQe'E;L_R]:7>(S2FJ]R
%O*T<<iN,M->3q)tL?nZedu*/@OPPa`"Qkd\<-Oat1s_cU]cs!6S1(B%D<32,f$HYIB#TjcO0/A^;\W'pOHQW>C#+ULa>dTu0pSIL
%<0D?g?hXK^#;*4C>io6ZI(iQNC)lNFA>37ar&?_,BLGOljj8e:/A+t:p^i%?"N!7.ee*=n7UF/,=\1kJXoDM#T*Fe,aO8nrdL?_0
%q&0md;@[=l;-g(NM_#LjXF[O=V0O#S/1.4g`J";Ba4Jk>h8W/Z=!U[3Y/Wk$86"sVdU5'TE`Jh2AYZ[:Skn1$/-5r?S^u&1;N/i[
%28G-<]dc*O^hXKGP5Z,`>'8Z@;*lg,)#"Amh,mGl>RV=?/sX!M+@NMI3B]fN#8WLu53]]B4oF&P6XRlCpj+^1rrshAYM]Mo%rjoK
%&2*pSK0_E)5n6M0GhofA(CFK6_3!GV7H]Zs"/1(G2uA[\'Z+3bE"jBG?'8oZee6>F2:u9=V0P4GPot6G!0LN6]Ugd,=qEJ)a<#m%
%B[&u6!f#\"/_E4N\ApQOq+uKW%m%0o0S1^%P%lk$f1`>Ab;f`S=%=e65-GCdE\[&,3Zn]>h/Ru>9UCg4C:CC9!D"M;.27%_n6VWs
%,i3W(@UsP;XTMZT!3i?S7-GRU<'d?J`eTlE]dFIM+n*:add??^Y6KPPd(Fq#'O,e:i#YOeAY@BFiD]4>XjGXXHK`kiasf3!,WPU5
%lK^uMF;esXF9J5TU>KC/F#'G1SB*Ed2SpuMQmN+TS=+f#J$$3rbVrQqM(m$_&eL%4C:8p,Y#B4X*n=!.gMt>=>UB<c:e@Q+:Ji!)
%3m`u+85tafL^)_GBK<X\*kA<&'N\SD#</,@O(a(W7flPhhSuVVBtIN>[,%e&Hij!).h8>]R2U^DApkV)8[?2]`Lm5pTu,s01Y[16
%&OlJ#MN0&BEf)#O>N815+60TD@S-7lLb[,)K:?pV#/FE[PV`h(Y(tU^qMVQn^Nq0B+-P>\iBW3JOKj]WpGR%E2LW^NiO<p%(5'4-
%h%GJ_ZE;Y28J59FXCM!MOpG&]IV(re(!IH[4IW1#6`,rpYJ;ea+A`K--):t=fsu#A8ga`d.VF&2Y`I!0oJKUELTh[h>=N7_$GV:4
%dYrf=ehpKaP)-f.o"?d'FXf\A`o.8)O[]2+dgS*J4b[oSJf@jiA;uZ4';ci&B#lm[W-D<3q3G?CnAPSf&5jX>Ri10LT<%fFCD?ka
%F/5h@%CF.m9/58^p7=UI4mgE/?2eoXZS+a(N`4mRK`m8IYj4oq=h.*8Y4R=.>?^9H=n].0N[--^r`fP$e9Xa)M=<=e.(CN`n'jt+
%`-[B#8QVVMAYhs`MP9,Ab+L0hrVHK,+b#<N\sh"FaO:b>jp2DeI:p2KYB@dLEa4eY"M;kj1P71P*3NL<>=f'V'@53@&4;;a7t)CS
%Q),t3@7qO4WsZsuhP1ERE'4WO+VP`d0lig#JC(2Jo^#k"8NYqY>S*k87b>$h8g3YlH9`!02f6\GkO;os&C1Z!(5YISM"l(f6/ege
%&M*PaC;YdGq;C/S\0Mo6I1QL?#qDmge,&d48O)O+j8I8cqX7ci60M1in07HVb0jZ2rQ_Z"c%gHNf:T9L)[8rYghX%0Oph,F6B\a:
%q@%B$CLt?/a#kAG:Csu#==`JY$>JA?39jA;eEKi5TF"#<!KuY`OCg2A9L44nM-7?1I(]1"SHIiMkB"l*R_@_#<a:!Y%\l<MiQq6V
%$JVb&!gJ"67S<V^lTB+&T<fYhl'u%r.YS5`+T?b2gsl%;,YqP*n;(uo2$'l>Hm;DF4=jS"qJ4^1")!u'O1A?hrmR"de2]%T[&A[.
%3\GC`RV0Mh_j!Eihs;:KcEeIs,FR<AW7N#m7qaepZ\QuG"fm_YV5,<UeW9\]hUm4C&^1%rFX:62&Q%>06g8_bB\5Ws=LI%No5FF/
%'6M]Sc!TiGMf@5jYZ'O,5MmJA<-MfT^7IC.aiXE`\tN6u%o5@Nj_)=)`ZXn)e(MfePgV.20opSBD4HAk;AOF'/1t.7CC-S?mGn!R
%['0X0ln_Xg+jLR8C^1FRfg^*<$grt$=>U5C+O2YNa%D&.Cf4D6JrcZlh</.h[3'FTFF!A716]Ck)&44>HfQ6/l7Hn,BNo^X87*e*
%QNU!C3hbD@(e3Tfg>B(+R6$7kphg?k)2n<./a>nRVR/YsWK24?XF8Z0g_uuDD=4Zs?hD@%1DKa9]*?[*UAXe=NTP+?7\K%$#\&?k
%T+tuB(4DlUi\4,'/MQL[U4:RloL"5Ygu&t*&:7/##",#HG-p"H[TO.+!rlX6k09YD-VV3dKf"#OGj6]dg+Ct<G\,f(4OLZI?6NPG
%C5t:;lLd_Gn:U>o2ns$p?Z^&[-/6'\%RhHK>)kXP>Wb3cQj;ooY)QDVQ7=6!9Cegr;6<B)R<1YN]F0bOnp&PPkAk4NgF%J]CFCed
%-fV)k5K&0&Q:Aq.Z66J3i)(]jo2/dUH]&eB_*k0MB?HF]Ial6ej5!.tUWZPX$$^hA:QlS,'t4jX">]Q>5hnE*/3e!@1e4Q4=`HZ_
%,6Md7bD=^#NVI@AiC+ES3[q<>BHl;=!8fAMFRRaUAnkh>;=uZfQJMRY*-6L0)A5-Y:.,ES=qRM!D+d2:ng.)6=!\hsV^g4qA2gO;
%Bl^R\`f$3X161hb/-"Y'ftYV=Ie?8SCb4^="P%hCHI[?8YR&N`MOS0M2bOEf;Ip!M5QOcp^uM#p]k5f@Ghq*BIS"=)j/@09;]K2`
%KM'8IfGS@3#e@,R@"Yh.6WUHXq&J/?%&*u9@.4au5pj_9lY*5k>@Gn4E5gj]Sgll1:!7[N@8/P3UIT.%Bu<$I]!J[QZ__<d4(e!u
%ri":ZGS?m(;+cI^-&S\T[>*K+SnGiBf8=&hTY2@'k(OT2/PLT0NVH?mFkOUc;_dMb36DIY*N*#%W9!8Fr.a_.U/B-#n^([hn06JA
%!$B5eSY%;aAYDAV\npCIOmiZD1f?p"/-Adr<eV/-7s?nSELP/bW<bmZ/9c58E7<D6(iAJ&;MYou1L".-B;0&oQ+L3tb1;!_*W`/J
%DdhB/j0:3PD1@gS\SFfF$-J!5$<l#(,Q.>4l<pA.VPc9`,'-aCmeBB6]P,3l#3L^gDoPEUlYN1I8<AiDB3ORJ=:22[(=NW[OjsKj
%)8L@'7A"T@o9qCt-@oO8aQ-u9Ls<\mj-Zar2YGRH),:)`3Y:;L3gI,2+Xr(fYlnd\p@*(F>2WJ((<i`q@>&lb2=.F%I7]C:UTEVo
%m9PKk3LXW`H!6tek;CG/hEET]nZ=m1eR=dHYA@6q`Rp6H-)26<*?5WR&R(6gr+]e^LWtQTb:3KZHOpFb+elsBSt`5GQB@rRY8QA:
%30]"K[+Pd7k^isMb'.nR_K0f#Fb*N$Og;b7nrZ9!>o-r=g->rn3Jk7_#:?Ka5J355?Q>"d@KC>bI3TVF]Yoe5j$kea:d1ep;^*N1
%1#j/@"kq9;pA2S<:<Oo.>cIAlU62)B`FjPp5Q&)6-ce3QqHn/=o2#\q`q8XE09"mepZHV=UdQtlXL9\1A2*mo-]=iJ0efC=C;Zi0
%K-5V)fYasG_^0_oEDUYOkrpKJA>)Nt@]OPD5]MsHI/.[-^RasNQ?Ad+U#t:QPhJ8)cAfZ?E$3D0qI";GUJd8dcl7EqgDt/_q1)Mb
%;RH$]QRfF+PXW\0:Squ,3B*rOCa9Z_34#6pb%]uS^%!mRLqe>'P9u1;Z;)X-(HSTG5;B<;;76Xo'eHWYD)3]Q+V2q;4"S.B1L%LT
%md5%O&p,SGCPcub%W+a?X#e\o6,6Vd.sd_/$1Fc.LGkHc;$4$mOe3&%;81=p$:5hr?Q-r`TEPpSD_p(b'#Ze4L,Q]/$Vm];I[+/.
%h`+(g:ELMM-AZ4H^G[%FcBQ:_!JaOVjg,\$dRP5&j$a&7mtS;Xc'aP`[0m)i/XIY=,r\4/R0k5MaLaoaMkS*t(oL7$9/VNVSj,JY
%N(V7!7P2UjT@jb@%i#F6/=*[ub\",F%ZAS@OFH._B9(.^BmhN5XX'@h:ZA#N[[Q6f\VI7U*cL?N$(UC12S+*Y]R,9LG"KSHOd`MZ
%.cK<6q6\B3#(6"O\(q`Wdf/cACscd%,'UI*CQ5-5Pta=L0tWjAJGR7SXi>_$\$;R6?J/ugn-IPjf:,Cm_!>7=aX3gDE.T/]"2$11
%YIJBMNs<gjG&U(?i+lWhNWTtW8_H++?3:L.&;nlm,:2BYoarb:ICDX/>O34XC(4I6`f&u)d>#EP6jankh?PF?a@:)*O@3\`#WR&N
%m!bWfr($Pu=W(-UCJd0jn/<PkU0&(?be9Qm_aHd(,HY)2b&ZF__ArR)%;>Oc-U.qfqZ.j!Vl]=m([_Ds`ZLF:[6g*K<B+[ki!&gg
%\F0[C"EQd!1Ecnp\lHIB*4_.RL4*f<Fn]m3f'2rHnM,HpBRpV$ADIB?1PP#=:=uU5^?ZYJ:l4:Aoq^[@$O<)2VJ[`=0I8KO`DnJk
%4E9/m'"CS8]"Gp@%5p"/#NH^I9*3tnQ4`>Ii+eEd#2CO.8[*c(=OWM;IM1KJ(=Q>i(9)nU%9C)`/&l`]a1nCO$AEg(TO480Ml@$`
%gb45@R0gCDYC>4#<EFQkY.c>iI&bgTP$gV:HuSMt-VR+<(8jt4X]5")>Fc'L0\$J?2&QRA.5X30$23^SZP,':+XaG521(HN)tI&!
%kK,9!l!i:!,?mNQ-UkI5Kf_LYI+(]`Y"J"@W"1O-9+1t2!a$O9\jJ*N'('at(FoUt3/)+p+Sdt;"heZ-cW2Pm\:(p#l`3@-C]DbW
%lf]@J'sUeTZJA!l#:QI"8hbN"8NY/#N9Nr`_Em<!U'n"<f&D(AEj\K$P;kUH6Fud,=+VZZ'Q0l\O#dRa.*88PVH.2uPY;CW5kd=Z
%ast9E_J^p#R-!]mk9lQt7P'broJ-NhT3D)]05b#io\7H_^us#^@D,bG(e`98#"qPNW7:2@.';:d+9jVZ(@j%nL/(AsG:9.HIbm-3
%V]#e5Q`&6kd"jd;_f0bu4=>cW;\5e%>op[0nC4RWg[c7CTY$uf'il05]D%pSet_?GYke/(cr9H/qu:btmJlrgqZ$>WJ,>l,s8;Ea
%^]*baQf4S:gRnN:rI=k5TE"WrhuE?[s7DYmrV=M&+9)1Vs2M/8rr65QHMGZj^]3'grV+'Us7!Mtp$_nk$THm#r:</QbCBK:J,#rA
%%mdBKE<~>
%AI9_PrivateDataEnd
