'use client'

import styles from './CSSAnim.module.scss';
import { useRef } from 'react'

export const HoverExample = () => {
    return (<>
        <svg width="300" height="300" viewBox="0 0 300 300">
            <circle className={styles.circle}
                id="my-circle"
                cx="150" cy="150"
                r="100"></circle>
        </svg>
    </>)
}

type strokedashprops = {
    hover: boolean
}
export const StrokeDash = ({ hover = false }: strokedashprops) => {
    return (<>
        <svg width="300" height="300" viewBox="0 0 300 300">
            <circle className={!hover ? styles.strokeDash : styles.strokeDashHover}
                id="my-circle"
                cx="150" cy="150"
                r="100" pathLength={100}></circle>
        </svg>
    </>)
}

export const GeoProperties = () => {
    return (<>
        <svg width="300" height="300" viewBox="0 0 300 300">
            <circle className={styles.geoPropAnimation}
                id="my-circle"
                fill="orange"></circle>
        </svg>
    </>)
}

export const KeyframeExample = () => {
    return (<>
        <svg width="500" height="500" viewBox="0 0 500 500">
            <circle r={50} className={styles.zoomCircle}></circle>
        </svg>
    </>)
}

type BalloonProps = {
    linear: boolean
}

export const BalloonExample = ({ linear = true }: BalloonProps) => {
    return (<>
        <svg width="300" height="300" viewBox="0 0 500 500">
            <defs>
                <linearGradient id="sky" x1="0%" y1="0%" x2="0%" y2="100%">
                    <stop stop-color="#42D2FF" offset="0%" />
                    <stop stop-color="#DAF6FF" offset="100%" />
                </linearGradient>
            </defs>
            <rect x="0" y="0" width="500" height="500" fill="url(#sky)"></rect>
            <g className={styles.clouds}>
                <g opacity="0.5" fill="white">
                    <ellipse cx="198.987" cy="107.667" rx="37.9283" ry="36.6667" />
                    <ellipse cx="259.072" cy="107.667" rx="37.9283" ry="36.6667" />
                    <ellipse cx="214.759" cy="144.333" rx="37.9283" ry="36.6667" />
                    <ellipse cx="156.928" cy="132.6" rx="37.9283" ry="36.6667" />
                </g>
                <g opacity="0.5" fill="white">
                    <ellipse rx="30.6835" ry="19.6667" transform="matrix(-1 0 0 1 435.291 188.667)" />
                    <ellipse rx="30.6835" ry="19.6667" transform="matrix(-1 0 0 1 386.684 188.667)" />
                    <ellipse rx="30.6835" ry="19.6667" transform="matrix(-1 0 0 1 422.532 208.333)" />
                    <ellipse rx="30.6835" ry="19.6667" transform="matrix(-1 0 0 1 469.316 202.04)" />
                </g>
                <g opacity="0.5" fill="white">
                    <ellipse cx="44" cy="290" rx="25" ry="20" />
                    <ellipse cx="69" cy="314" rx="25" ry="20" />
                    <ellipse cx="22" cy="302.5" rx="22" ry="15.5" />
                    <ellipse cx="81" cy="294" rx="25" ry="20" />
                </g>
                <g opacity="0.5" fill="white">
                    <ellipse rx="25" ry="20" transform="matrix(1 0 0 -1 297 417)" />
                    <ellipse rx="25" ry="20" transform="matrix(1 0 0 -1 322 393)" />
                    <ellipse rx="22" ry="15.5" transform="matrix(1 0 0 -1 275 404.5)" />
                    <ellipse rx="25" ry="20" transform="matrix(1 0 0 -1 334 413)" />
                </g>
                <g opacity="0.5" fill="white">
                    <ellipse cx="698.987" cy="107.667" rx="37.9283" ry="36.6667" />
                    <ellipse cx="759.072" cy="107.667" rx="37.9283" ry="36.6667" />
                    <ellipse cx="714.759" cy="144.333" rx="37.9283" ry="36.6667" />
                    <ellipse cx="656.928" cy="132.6" rx="37.9283" ry="36.6667" />
                </g>
                <g opacity="0.5" fill="white">
                    <ellipse rx="30.6835" ry="19.6667" transform="matrix(-1 0 0 1 935.291 188.667)" />
                    <ellipse rx="30.6835" ry="19.6667" transform="matrix(-1 0 0 1 886.684 188.667)" />
                    <ellipse rx="30.6835" ry="19.6667" transform="matrix(-1 0 0 1 922.532 208.333)" />
                    <ellipse rx="30.6835" ry="19.6667" transform="matrix(-1 0 0 1 969.316 202.04)" />
                </g>
                <g opacity="0.5" fill="white">
                    <ellipse cx="544" cy="290" rx="25" ry="20" />
                    <ellipse cx="569" cy="314" rx="25" ry="20" />
                    <ellipse cx="522" cy="302.5" rx="22" ry="15.5" />
                    <ellipse cx="581" cy="294" rx="25" ry="20" />
                </g>
                <g opacity="0.5" fill="white">
                    <ellipse rx="25" ry="20" transform="matrix(1 0 0 -1 797 417)" />
                    <ellipse rx="25" ry="20" transform="matrix(1 0 0 -1 822 393)" />
                    <ellipse rx="22" ry="15.5" transform="matrix(1 0 0 -1 775 404.5)" />
                    <ellipse rx="25" ry="20" transform="matrix(1 0 0 -1 834 413)" />
                </g>
            </g>
            <g className={linear ? styles.balloon : styles.balloonEase}>
                <path fill-rule="evenodd" clip-rule="evenodd"
                    d="M85.1286 39.9427C85.1286 54.8019 70.3959 73.3782 54.4949 84.6169C41.5326 84.4155 46.5612 84.355 31.8291 84.8384C14.6879 74.2724 0.875977 54.8563 0.875977 39.9427C0.875977 18.451 22.0542 -1.29145 43.4984 1.00907C64.8712 -1.73858 85.1286 18.451 85.1286 39.9427Z"
                    fill="#BA0505" />
                <path fill-rule="evenodd" clip-rule="evenodd"
                    d="M71.3168 40.0881C71.3168 54.9567 60.5411 74.2361 52.3597 84.8516C42.386 84.8567 46.482 84.7969 35.7659 85.0034C27.7135 74.4052 14.2275 54.9789 14.2275 40.0881C14.2275 18.4807 29.4324 0.944168 44.3296 0.944168C56.9637 0.944371 67.5786 13.5576 70.518 30.5689C71.0399 33.6164 71.3168 36.8057 71.3168 40.0881Z"
                    fill="#FFC875" />
                <path fill-rule="evenodd" clip-rule="evenodd"
                    d="M53.2365 39.9417C53.2365 54.6982 49.2728 73.8267 46.2588 84.3843C40.3832 84.4266 46.4122 84.3823 40.0929 84.4477C37.1286 73.8881 33.3359 54.679 33.3359 39.9417C33.3359 18.4691 37.7932 1.0423 43.2862 1.0423C48.7782 1.04179 53.2365 18.4691 53.2365 39.9417Z"
                    fill="#BA0505" />
                <path d="M32.5305 84.8257C34.4839 91.6416 36.0267 98.6478 37.0645 105.685"
                    stroke="#696767" />
                <path d="M39.4045 84.8235L41.8411 105.63" stroke="#696767" />
                <path d="M46.804 84.8477L45.7527 105.615" stroke="#696767" />
                <path d="M53.4461 84.8275C51.5633 91.9233 50.4269 98.7704 49.6846 105.645"
                    stroke="#696767" />
                <path fill-rule="evenodd" clip-rule="evenodd"
                    d="M32.051 85.2125L31.354 84.3771L54.7107 84.4011L54.1917 85.3853L32.051 85.2125Z"
                    fill="#600070" />
                <path fill-rule="evenodd" clip-rule="evenodd"
                    d="M34.3781 105.463C33.5465 105.463 32.8757 106.118 32.8757 106.923C32.8757 107.729 33.5465 108.383 34.3781 108.383H34.912C34.8861 108.554 34.8737 108.736 34.8737 108.947V115.895C34.8737 118.724 37.221 121 40.1303 121H47.0158C49.9251 121 52.2714 118.724 52.2714 115.895V108.947C52.2714 108.736 52.259 108.554 52.233 108.383H52.768C53.5985 108.383 54.2693 107.729 54.2693 106.923C54.2693 106.118 53.5985 105.463 52.768 105.463H34.3781V105.463Z"
                    fill="#431102" stroke="black" strokeWidth="0.0574834" stroke-linecap="round" />
            </g>
        </svg>
    </>)
}

type EaseType = {
    type: "ease-in-out" | "ease-in" | "ease-out" | "linear" | "default" | "custom"
}
export const EaseExample = ({ type }: EaseType) => {

    const getImage = () => {
        let path = "'";
        switch (type) {
            case "ease-in-out":
                path = "/css_anim_easing_in_out.png"
                break;

            case "ease-in":
                path = "/css_anim_easing_in.png"
                break;

            case "ease-out":
                path = "/css_anim_easing_out.png"
                break;

            case "custom":
                path = "/css_anim_easing_custom.png"
                break;

            default:
                path = "/css_anim_easing_linear.png"


        }

        return path;
    }

    const getEasing = () => {
        let ease = "";

        switch (type) {
            case "ease-in":
                ease = styles.easeIn;
                break;

            case "ease-out":
                ease = styles.easeOut;
                break;

            case "ease-in-out":
                ease = styles.easeInOut;
                break;

            case "linear":
                ease = styles.easeLinear;
                break;

            case "custom":
                ease = styles.easeCustom;
                break;

            case 'default':
                ease = styles.easeLinear;
                break;
        }

        return ease;
    }
    return (<>
        <img className={styles.exampleImage} src={getImage()} height="300px" />
        <svg width="200" height="300" viewBox="0 0 200 300">
            <circle className={getEasing()} cx="100" cy="250" r="10" fill="green" />
        </svg>
    </>)
}

export const StrokeText = () => {
    const smallS = useRef<SVGPathElement>(null);
    const bigS = useRef<SVGPathElement>(null);
    const bigV = useRef<SVGPathElement>(null);
    const bigG = useRef<SVGPathElement>(null);
    const button = useRef<SVGRect>(null);
    let on = false;

    const setStyles = () => {
        if (on) {
            console.log("draw on")
        } else {
            console.log("draw off")
        }
    }
    return (
        <svg width="800" height="300" viewBox="150 0 500 300">
            <g fill="none" strokeWidth={2}>
                <path ref={smallS} id="smalls" strokeDasharray={100} pathLength={100} strokeDashoffset={-100}
                    d="M495.916 191.848L495.915 191.848L495.92 191.859C497.11 194.698 499.079 197.023 501.788 198.83C504.646 200.765 508.315 201.688 512.714 201.688C516.787 201.688 520.454 200.802 523.691 199.005C526.903 197.267 529.247 194.654 530.712 191.207C534.778 190.426 538.358 188.575 541.433 185.671L541.438 185.666L541.443 185.661C544.65 182.543 547.073 178.47 548.735 173.484L548.963 172.801L548.386 172.368L546.85 171.216L545.906 170.508L545.362 171.555C543.093 175.926 540.73 179.182 538.292 181.379C536.333 183.075 534.376 184.282 532.421 185.025C532.461 184.737 532.495 184.445 532.525 184.148C532.614 183.256 532.658 182.283 532.658 181.232C532.658 177.282 532 173.419 530.686 169.649C529.488 165.971 528.247 162.504 526.962 159.248C525.796 155.996 525.234 153.175 525.234 150.768C525.234 149.641 525.313 148.812 525.448 148.246C525.716 147.515 525.874 146.814 525.874 146.16V146.098L525.866 146.036C525.754 145.135 525.358 144.346 524.715 143.691C524.015 142.88 522.945 142.6 521.802 142.6C519.901 142.6 518.272 143.516 516.934 145.14L516.934 145.14L516.93 145.146C515.591 146.793 515.042 149.486 515.042 152.944V154.007C513.469 157.448 511.575 160.601 509.362 163.469L509.36 163.473C507.162 166.346 505.013 168.874 502.913 171.059C502.634 171.335 502.11 171.655 501.236 171.972L501.221 171.978L501.207 171.984C500.279 172.355 499.286 172.899 498.231 173.6C497.01 174.321 496.047 175.466 495.308 176.945C494.525 178.509 494.178 180.608 494.178 183.152C494.178 186.103 494.76 189.004 495.916 191.848ZM520.295 184.077L520.29 184.126V184.176C520.29 184.461 520.277 184.727 520.252 184.976C517.384 184.133 514.822 182.834 512.558 181.081C510.239 179.286 508.456 177.411 507.184 175.466C508.872 173.615 510.651 171.281 512.522 168.475C514.043 166.193 515.426 164.025 516.669 161.973C517.417 165.071 518.164 168.116 518.912 171.107C519.832 174.786 520.334 178.506 520.418 182.267C520.417 182.642 520.379 183.238 520.295 184.077ZM516.047 192.914C514.752 193.676 513.349 194.056 511.818 194.056C508.971 194.056 506.909 192.967 505.486 190.796C503.966 188.476 503.218 186.019 503.218 183.408C503.218 182.461 503.359 181.843 503.554 181.468C503.607 181.366 503.664 181.281 503.726 181.21C505.296 183.132 507.384 184.989 509.966 186.788C512.525 188.572 515.352 189.879 518.441 190.71C517.777 191.637 516.978 192.367 516.047 192.914Z"
                    stroke="red"
                />
                <path id="g" ref={bigG}
                    d="M475.625 195.564C475.643 197.013 475.822 198.495 476.159 200.009L476.164 200.034L476.171 200.06C476.649 201.778 477.559 203.26 478.886 204.492C480.374 205.881 482.522 206.699 485.195 207.055L486.365 207.211L486.326 206.032C486.241 203.384 486.156 201.118 486.07 199.235L486.07 199.232C485.985 197.455 485.943 195.722 485.943 194.032C485.943 192.185 486.027 190.426 486.194 188.755L486.194 188.751C486.36 187.014 486.692 185.099 487.195 183.001L487.197 182.993C487.702 180.806 488.42 178.187 489.353 175.132C490.376 171.977 491.655 168.056 493.189 163.367L493.191 163.363L494.471 159.395L494.804 158.361L493.746 158.114C491.224 157.526 488.613 156.768 485.913 155.84C483.257 154.898 480.601 154.041 477.945 153.269C475.294 152.388 472.634 151.944 469.967 151.944C467.054 151.944 464.59 152.721 462.665 154.357C460.828 155.904 459.556 158.299 458.758 161.399L458.418 162.722L459.782 162.646C461.302 162.562 462.734 162.52 464.079 162.52H464.11L464.141 162.518C465.486 162.434 466.831 162.392 468.175 162.392C470.615 162.392 472.924 162.518 475.1 162.769L475.121 162.772L475.141 162.773C477.089 162.918 478.973 163.155 480.792 163.484C480.413 167.213 479.603 171.022 478.359 174.911C477.018 179.101 475.218 182.992 472.96 186.588L472.957 186.594C470.796 190.084 468.275 192.887 465.403 195.021L465.403 195.021L465.392 195.03C462.656 197.121 459.668 198.152 456.399 198.152C452.064 198.152 448.284 196.203 445.027 192.136C441.882 188.018 440.247 182.206 440.247 174.576C440.247 169.219 441.084 163.551 442.77 157.567L442.771 157.564C444.459 151.484 446.74 145.571 449.612 139.826C452.572 133.991 455.866 128.756 459.491 124.12L459.491 124.12L459.496 124.113C463.117 119.397 466.886 115.676 470.798 112.93L470.801 112.928C474.78 110.11 478.549 108.76 482.127 108.76C484.476 108.76 485.868 109.331 486.616 110.203L486.641 110.232L486.668 110.259C487.572 111.163 488.039 112.309 488.039 113.776C488.039 115.634 487.495 117.835 486.338 120.399C485.173 122.896 483.802 125.179 482.227 127.251L482.219 127.261L482.211 127.272C480.703 129.367 479.378 130.748 478.244 131.504L477.494 132.004L477.914 132.802C478.793 134.472 479.737 135.749 480.786 136.483C481.804 137.196 482.942 137.56 484.175 137.56C486.726 137.56 488.983 136.419 490.922 134.299C492.908 132.22 494.423 129.62 495.485 126.528C496.63 123.442 497.207 120.341 497.207 117.232C497.207 114.459 496.671 111.85 495.591 109.416C494.569 106.917 492.851 104.927 490.471 103.459C488.036 101.872 484.84 101.128 480.975 101.128C475.583 101.128 470.216 102.588 464.886 105.471C459.662 108.257 454.717 112.079 450.047 116.922C445.381 121.761 441.238 127.286 437.617 133.493C433.993 139.62 431.145 146.093 429.074 152.909C427 159.738 425.959 166.492 425.959 173.168C425.959 180.026 427.174 185.986 429.645 191.017L429.649 191.023C432.108 195.943 435.425 199.718 439.611 202.303C443.782 204.963 448.361 206.296 453.327 206.296C458.358 206.296 462.892 205.059 466.9 202.568C470.118 200.678 473.027 198.342 475.625 195.564Z"
                    stroke="blue"
                />
                <path id="v" ref={bigV}
                    d="M357.741 201.739L357.743 201.741C359.38 203.56 361.241 204.788 363.329 205.361C365.338 205.971 367.101 206.296 368.598 206.296C372.695 206.296 376.94 204.748 381.315 201.775C385.667 198.902 389.995 195.044 394.303 190.219C398.693 185.313 402.82 179.852 406.686 173.839C410.632 167.747 414.151 161.525 417.241 155.173L417.243 155.169C420.335 148.728 422.745 142.534 424.469 136.587C426.279 130.553 427.198 125.164 427.198 120.432C427.198 115.031 426.155 110.702 423.943 107.567C421.813 104.549 419.374 102.792 416.598 102.792C414.953 102.792 413.179 103.505 411.312 104.749C409.401 105.993 407.847 108.001 406.604 110.665L406.134 111.671L407.184 112.033C409.433 112.809 411.313 114.284 412.826 116.514C414.288 118.668 415.086 121.893 415.086 126.32C415.086 130.731 414.337 135.586 412.82 140.893L412.818 140.9L412.817 140.907C411.382 146.223 409.398 151.587 406.861 157C404.317 162.425 401.478 167.637 398.343 172.637C395.207 177.637 391.991 182.122 388.696 186.094C385.405 189.974 382.22 193.028 379.145 195.272L379.144 195.272L379.134 195.28C376.146 197.521 373.582 198.536 371.414 198.536C370.353 198.536 369.935 198.238 369.748 197.933C369.5 197.347 369.342 196.453 369.342 195.184C369.342 192.219 369.837 188.722 370.846 184.681C371.95 180.522 373.267 176.019 374.797 171.173C376.421 166.301 378.002 161.302 379.54 156.175L379.541 156.171C381.084 150.941 382.371 145.752 383.401 140.604C384.523 135.425 385.086 130.45 385.086 125.68C385.086 118.221 383.57 112.232 380.423 107.823C377.225 103.258 372.506 101 366.422 101C362.864 101 359.477 101.757 356.273 103.269C353.181 104.683 350.438 106.585 348.051 108.973C345.754 111.27 343.936 113.84 342.605 116.68L343.51 117.104L342.605 116.68C341.273 119.52 340.59 122.309 340.59 125.04C340.59 128.18 341.615 130.865 343.683 133.027L344.406 132.336L343.683 133.027C345.83 135.272 349.185 136.28 353.494 136.28H355.112L354.388 134.833C353.74 133.537 353.258 132.25 352.935 130.97C352.695 129.678 352.574 128.341 352.574 126.96C352.574 125.075 352.778 123.054 353.192 120.895C353.688 118.754 354.388 116.696 355.292 114.72C356.262 112.785 357.458 111.241 358.87 110.064C360.206 108.951 361.85 108.376 363.862 108.376C365.786 108.376 367.098 108.945 367.97 109.951C368.927 111.054 369.641 112.661 370.047 114.854C370.46 117.084 370.67 119.667 370.67 122.608C370.67 128.523 370.163 134.353 369.149 140.097C368.131 145.781 366.859 151.294 365.333 156.635C363.8 161.914 362.268 166.85 360.737 171.444C359.197 176.065 357.911 180.265 356.881 184.041C355.844 187.845 355.31 191.139 355.31 193.904C355.31 197.198 356.065 199.866 357.741 201.739Z"
                    stroke="green"
                />
                <path id="s" ref={bigS}
                    d="M280.745 203.669L280.751 203.672C285.389 205.422 290.245 206.296 295.312 206.296C299.676 206.296 303.954 205.642 308.143 204.334C312.418 203.111 316.311 201.275 319.814 198.824C323.342 196.442 326.134 193.476 328.174 189.931C330.323 186.346 331.384 182.242 331.384 177.648C331.384 173.062 330.368 169.11 328.283 165.846C326.247 162.659 323.596 159.922 320.34 157.634C317.229 155.387 313.903 153.357 310.364 151.544C306.964 149.759 303.691 147.974 300.547 146.189C297.548 144.439 295.118 142.54 293.239 140.498C291.448 138.471 290.552 136.066 290.552 133.232C290.552 130.94 291.185 128.353 292.509 125.456L292.51 125.456L292.514 125.446C293.831 122.482 295.688 119.671 298.095 117.014C300.575 114.37 303.47 112.178 306.785 110.437C310.046 108.725 313.64 107.864 317.584 107.864C318.905 107.864 319.951 107.968 320.744 108.157C321.548 108.348 322.009 108.607 322.253 108.851L322.27 108.868L322.287 108.884C322.974 109.508 323.368 110.409 323.368 111.728C323.368 113.292 323.014 115.186 322.267 117.428L322.264 117.439L322.26 117.45C321.589 119.631 320.749 121.902 319.737 124.262L319.731 124.276L319.725 124.29C318.782 126.691 317.924 129.008 317.151 131.241L317.145 131.257L317.14 131.274C316.436 133.561 316.072 135.668 316.072 137.584C316.072 139.555 316.592 141.253 317.717 142.582L317.729 142.597L317.743 142.612C318.863 143.833 320.481 144.632 322.482 145.087L323.173 145.244L323.55 144.645C325.026 142.301 326.537 139.494 328.083 136.23C329.728 132.94 331.111 129.479 332.235 125.848C333.369 122.185 333.944 118.714 333.944 115.44C333.944 111.216 332.678 107.709 330.079 105.017C327.405 102.247 322.922 101 316.944 101C311.18 101 305.912 102.136 301.157 104.424C296.441 106.608 292.41 109.498 289.075 113.096C285.764 116.668 283.183 120.513 281.343 124.632L281.343 124.632L281.339 124.641C279.589 128.665 278.696 132.513 278.696 136.176C278.696 140.275 279.724 143.853 281.82 146.86L281.825 146.868L281.831 146.876C283.954 149.795 286.644 152.348 289.888 154.541C293.075 156.694 296.432 158.716 299.959 160.609L299.968 160.614L299.976 160.618C303.446 162.395 306.744 164.298 309.872 166.327L309.88 166.332L309.888 166.337C312.958 168.246 315.423 170.429 317.302 172.88L317.314 172.895L317.326 172.91C319.212 175.188 320.168 177.944 320.168 181.232C320.168 184.845 319.052 187.793 316.853 190.15L316.847 190.156L316.841 190.163C314.663 192.583 311.826 194.416 308.295 195.648L308.288 195.65C304.813 196.891 301.214 197.512 297.488 197.512C293.168 197.512 289.631 196.722 286.829 195.201L286.819 195.196L286.809 195.191C283.966 193.728 281.855 191.844 280.428 189.554C279.068 187.147 278.392 184.591 278.392 181.872C278.392 179.223 279.033 176.421 280.349 173.457C281.748 170.498 283.772 167.6 286.44 164.765L288.026 163.08H285.712C282.691 163.08 279.598 163.613 276.436 164.667C273.172 165.755 270.45 167.708 268.286 170.502C266.052 173.298 265 177.131 265 181.872C265 187.267 266.464 191.851 269.445 195.555C272.378 199.199 276.153 201.903 280.745 203.669Z"
                    stroke="black"
                />
            </g>
            <rect x={0} y={0} width={800} height={300} fill="black" fillOpacity={.1} onClick={() => {
                console.log("click");
                on = !on;
                setStyles();
            }} />
        </svg>
    );
};